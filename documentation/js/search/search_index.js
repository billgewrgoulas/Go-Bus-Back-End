var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/controllers/AppController.html",[0,2.091,1,3.21]],["body/controllers/AppController.html",[0,2.321,1,4.707,2,2.502,3,0.096,4,0.084,5,0.084,6,4.229,7,0.131,8,1.185,9,0.34,10,1.246,11,4.707,12,5.585,13,5.082,14,4.229,15,3.518,16,2.505,17,0.01,18,4.229,19,0.574,20,4.807,21,1.097,22,0.95,23,0.235,24,1.008,25,1.752,26,1.327,27,2.008,28,4.229,29,4.229,30,4.807,31,5.606,32,4.229,33,4.229,34,4.229,35,4.807,36,0.577,37,4.229,38,1.195,39,3.757,40,4.229,41,2.986,42,3.148,43,4.707,44,3.337,45,4.807,46,4.807,47,4.02,48,4.807,49,0.096,50,0.19,51,1.794,52,1.327,53,4.229,54,4.229,55,5.585,56,4.229,57,1.436,58,1.558,59,1.646,60,4.807,61,3.848,62,4.229,63,4.229,64,4.807,65,1.128,66,4.229,67,4.229,68,2.986,69,2.986,70,4.229,71,4.229,72,4.229,73,3.564,74,4.229,75,4.229,76,4.229,77,0.007,78,0.007]],["title/modules/AppModule.html",[79,2.562,80,3.21]],["body/modules/AppModule.html",[1,5.499,2,3.5,3,0.104,4,0.092,5,0.092,17,0.01,36,0.624,38,1.306,49,0.104,50,0.208,77,0.008,78,0.008,79,3.978,80,6.428,81,3.261,82,4.176,83,4.618,84,4.618,85,5.741,86,5.416,87,5.416,88,4.667,89,3.644,90,3.644,91,5.249,92,4.984,93,5.249,94,4.618,95,4.202,96,2.364,97,5.249,98,5.382,99,5.249,100,5.249,101,3.261,102,5.249,103,5.249,104,5.249,105,5.249,106,3.892,107,3.892,108,5.249,109,3.892,110,5.249,111,5.249,112,5.249,113,2.63,114,5.249,115,5.249,116,3.892]],["title/classes/ArrivalDto.html",[50,0.171,117,2.018]],["body/classes/ArrivalDto.html",[3,0.091,4,0.08,5,0.08,7,0.125,9,0.365,17,0.01,19,0.694,21,0.705,22,0.611,23,0.257,24,0.648,36,0.327,49,0.091,50,0.181,77,0.007,78,0.007,117,2.861,118,1.262,119,4.021,120,0.948,121,5.549,122,5.549,123,6.098,124,6.098,125,3.121,126,6.098,127,3.121,128,4.306,129,2.833,130,6.932,131,6.098,132,0.746,133,6.139,134,6.139,135,2.585,136,1.419,137,4.57,138,4.57,139,4.57,140,4.57,141,0.722,142,4.57,143,4.57,144,4.57,145,4.57,146,4.57,147,4.57,148,1.522,149,3.388,150,4.57,151,4.57,152,4.57,153,4.57,154,4.021,155,4.57,156,4.57,157,4.57,158,4.57,159,4.57,160,4.57,161,4.57,162,4.57,163,4.57,164,4.57,165,4.57,166,4.57,167,2.433,168,4.57]],["title/modules/AuthModule.html",[79,2.562,85,3.006]],["body/modules/AuthModule.html",[3,0.104,4,0.091,5,0.091,17,0.01,36,0.614,38,1.297,39,5.188,47,2.95,49,0.104,50,0.206,77,0.008,78,0.008,79,3.962,81,3.24,82,4.159,85,6.116,87,5.407,88,4.648,89,3.621,90,3.621,92,4.964,116,4.964,169,4.589,170,5.216,171,4.589,172,4.589,173,5.732,174,5.732,175,5.216,176,5.36,177,5.216,178,4.176,179,6.696,180,5.216,181,3.868,182,4.589,183,4.589,184,5.216,185,4.589,186,5.216,187,5.216,188,5.216,189,4.589,190,4.589,191,5.216,192,5.216,193,5.216]],["title/injectables/AuthService.html",[39,2.562,194,0.766]],["body/injectables/AuthService.html",[3,0.083,4,0.073,5,0.073,7,0.114,8,1.079,9,0.347,10,1.022,11,4.284,13,4.626,15,3.624,17,0.01,19,0.626,21,1.196,22,1.062,23,0.231,24,1.099,26,1.399,27,1.776,36,0.554,38,1.04,39,3.419,47,4.039,49,0.083,50,0.165,51,1.561,52,1.154,57,1.727,58,2.146,59,1.432,61,4.626,65,1.133,77,0.006,78,0.006,132,0.682,141,0.711,178,3.348,183,3.679,194,1.023,195,1.393,196,3.679,197,5.084,198,5.084,199,5.778,200,4.182,201,7.945,202,4.182,203,5.778,204,5.084,205,4.182,206,5.084,207,4.182,208,3.918,209,5.778,210,4.182,211,5.084,212,4.182,213,4.626,214,5.778,215,7.495,216,4.182,217,3.679,218,4.182,219,5.084,220,4.182,221,3.1,222,4.182,223,4.182,224,4.182,225,5.778,226,5.778,227,2.903,228,4.182,229,4.182,230,3.679,231,4.182,232,4.182,233,4.182,234,4.182,235,3.348,236,1.822,237,3.679,238,5.084,239,3.679]],["title/entities/Booking.html",[240,0.875,241,2.347]],["body/entities/Booking.html",[3,0.085,4,0.075,5,0.075,7,0.117,9,0.362,16,2.911,17,0.01,19,0.675,23,0.268,36,0.306,49,0.085,50,0.169,77,0.007,78,0.007,113,3.613,120,0.906,136,0.985,141,0.736,240,1.187,241,3.183,242,1.928,243,3.767,244,4.97,245,5.897,246,2.233,247,3.967,248,4.164,249,5.897,250,4.164,251,6.703,252,3.791,253,4.39,254,4.53,255,3.522,256,4.202,257,4.282,258,4.818,259,4.282,260,4.282,261,4.282,262,4.282,263,4.282,264,4.282,265,4.282,266,2.942,267,4.282,268,4.282,269,2.321,270,2.067,271,1.314]],["title/injectables/BookingRepository.html",[194,0.766,272,2.835]],["body/injectables/BookingRepository.html",[3,0.076,4,0.067,5,0.067,7,0.104,8,1.012,9,0.347,10,1.059,17,0.01,19,0.659,21,1.243,22,1.076,23,0.24,24,1.141,25,1.054,26,1.503,27,1.968,36,0.518,38,0.95,49,0.076,50,0.151,58,1.757,65,1.15,77,0.006,78,0.006,96,1.72,132,0.623,136,1.263,141,0.716,194,0.96,195,1.272,241,4.29,245,6.377,249,6.377,252,4.259,253,5.347,271,1.172,272,3.551,273,3.36,274,2.527,275,3.677,276,4.02,277,2.287,278,2.823,279,5.422,280,4.12,281,2.823,282,3.044,283,2.618,284,2.823,285,3.819,286,2.99,287,3.819,288,5.422,289,5.422,290,3.819,291,5.422,292,4.198,293,3.36,294,3.067,295,3.36,296,5.422,297,3.819,298,5.422,299,3.819,300,1.988,301,2.07,302,3.044,303,2.651,304,2.16,305,2.372,306,1.988,307,2.716,308,2.07,309,1.988,310,2.16,311,2.07,312,2.831,313,3.819,314,3.819,315,3.417,316,3.819,317,3.36,318,3.819,319,3.819,320,2.501]],["title/injectables/BookingService.html",[194,0.766,321,2.835]],["body/injectables/BookingService.html",[3,0.08,4,0.07,5,0.07,7,0.11,8,1.05,9,0.328,10,1.258,17,0.01,19,0.597,21,1.141,22,0.988,23,0.22,24,1.047,25,1.79,26,1.311,27,1.746,36,0.562,38,1,49,0.08,50,0.159,52,2.113,57,2.288,58,1.822,59,2.221,65,1.029,77,0.006,78,0.006,106,2.981,107,2.981,132,0.917,136,0.674,141,0.643,167,2.228,194,0.995,195,1.339,198,4.947,208,2.379,211,4.947,213,4.501,217,3.537,219,4.947,235,3.219,236,2.824,237,3.537,238,4.947,239,3.537,241,4.521,272,4.598,321,3.682,322,3.537,323,4.501,324,4.501,325,5.623,326,2.014,327,2.621,328,6.484,329,7.022,330,4.021,331,2.715,332,5.623,333,4.021,334,2.981,335,5.623,336,4.021,337,5.623,338,4.021,339,5.191,340,4.021,341,3.537,342,1.887,343,4.021,344,2.791,345,4.021,346,3.219,347,3.219,348,4.021,349,4.021,350,5.191,351,3.219,352,3.219,353,4.021,354,4.021,355,3.047,356,3.903,357,3.537,358,4.021,359,4.021,360,4.021,361,4.021,362,4.021,363,4.021,364,3.537,365,4.021,366,5.623,367,4.021,368,3.537,369,4.021,370,3.219,371,4.021,372,4.021,373,4.021,374,4.021,375,4.021,376,4.021,377,4.021,378,3.537]],["title/controllers/BookingsController.html",[0,2.091,379,3.21]],["body/controllers/BookingsController.html",[2,2.345,3,0.09,4,0.079,5,0.079,7,0.123,8,1.135,9,0.345,10,1.324,16,2.596,17,0.01,19,0.595,21,1.137,22,0.985,23,0.256,24,1.044,25,1.243,26,1.375,27,2.049,31,6.109,36,0.567,38,1.12,41,2.798,42,2.95,43,3.34,49,0.09,50,0.178,51,1.682,52,1.243,65,1.169,68,4.576,69,4.576,73,5.462,77,0.007,78,0.007,241,2.441,276,3.34,321,3.981,323,4.867,324,4.867,327,2.269,339,4.867,346,3.606,347,3.606,379,4.507,380,3.963,381,3.127,382,5.348,383,6.079,384,3.963,385,6.481,386,4.505,387,4.505,388,4.505,389,4.505,390,4.505,391,4.505,392,4.505,393,4.505,394,4.505,395,4.505,396,4.505,397,3.963,398,2.257,399,3.963,400,3.963,401,4.505,402,4.505,403,4.505,404,4.505,405,4.505,406,3.963,407,4.505,408,4.505,409,4.505,410,4.505,411,4.505,412,4.505,413,4.505]],["title/classes/Context.html",[50,0.171,414,3.21]],["body/classes/Context.html",[3,0.1,4,0.088,5,0.088,7,0.137,8,1.219,9,0.329,17,0.01,19,0.644,21,1.008,22,0.873,23,0.238,24,0.926,26,1.219,36,0.57,49,0.1,50,0.198,52,2.354,58,1.626,65,0.796,77,0.007,78,0.007,118,1.385,120,1.008,271,1.54,275,3.68,286,3.675,414,4.842,415,4.415,416,5.449,417,6.382,418,4.533,419,6.53,420,5.351,421,5.018,422,5.018,423,5.449,424,5.018,425,6.53,426,4.508,427,5.018,428,6.53,429,5.018,430,2.969,431,3.721,432,4.415,433,5.018,434,6.53,435,6.53,436,5.018]],["title/classes/CreateUserDto.html",[50,0.171,437,3.466]],["body/classes/CreateUserDto.html",[3,0.116,4,0.102,5,0.102,7,0.16,9,0.353,16,2.749,17,0.01,19,0.63,22,1.043,23,0.233,36,0.419,49,0.116,50,0.285,77,0.008,78,0.008,118,1.618,120,1.112,141,0.714,208,4.616,227,5.415,437,5.768,438,5.158,439,5.863,440,5.863,441,5.863,442,5.863,443,5.863,444,5.863,445,7.206,446,7.159,447,5.158,448,4.693,449,5.863,450,5.158]],["title/injectables/DBUpdateService.html",[194,0.766,451,2.835]],["body/injectables/DBUpdateService.html",[3,0.075,4,0.066,5,0.066,7,0.103,8,1.006,9,0.348,10,1.334,17,0.01,19,0.649,21,1.055,22,0.914,23,0.224,24,0.969,26,1.402,36,0.448,38,0.941,49,0.075,50,0.15,51,1.413,52,2.072,59,2.572,65,1.192,77,0.006,78,0.006,120,0.832,132,0.617,141,0.705,194,0.954,195,1.261,255,3.068,334,5.566,416,3.528,420,4.476,430,2.239,451,3.528,452,3.329,453,5.519,454,5.022,455,5.068,456,5.387,457,4.74,458,4.745,459,5.387,460,4.745,461,3.03,462,5.387,463,3.784,464,5.387,465,3.784,466,2.977,467,5.387,468,3.784,469,3.784,470,5.387,471,3.784,472,3.784,473,2.511,474,2.805,475,5.387,476,5.387,477,5.387,478,3.784,479,4.74,480,3.03,481,2.806,482,7.508,483,1.648,484,6.605,485,6.605,486,6.605,487,6.605,488,6.605,489,4.246,490,7.508,491,1.226,492,3.188,493,3.784,494,3.784]],["title/controllers/DBupdateController.html",[0,2.091,495,3.21]],["body/controllers/DBupdateController.html",[0,1.066,2,1.15,3,0.044,4,0.039,5,0.039,7,0.06,8,0.667,9,0.335,10,1.283,16,2.423,17,0.01,19,0.584,21,0.551,22,0.478,23,0.227,24,0.506,25,0.61,26,1.349,27,1.71,36,0.516,38,0.549,49,0.044,50,0.087,52,1.838,57,2.593,59,2.807,65,1.121,68,3.773,69,4.574,77,0.004,78,0.004,132,0.36,136,1.184,141,0.3,148,2.13,167,1.416,236,2.785,246,2.407,250,1.372,307,1.106,327,1.334,334,4.209,342,1.937,364,3.143,370,1.768,381,1.533,451,2.34,483,0.962,491,1.158,492,3.784,495,2.649,496,1.768,497,5.17,498,5.17,499,4.499,500,5.17,501,5.17,502,5.17,503,5.17,504,5.17,505,5.17,506,2.86,507,3.573,508,3.573,509,2.209,510,3.573,511,2.209,512,2.209,513,2.209,514,1.943,515,2.209,516,2.209,517,2.209,518,2.209,519,2.209,520,1.943,521,2.209,522,2.209,523,2.209,524,2.209,525,2.209,526,3.573,527,5.677,528,2.209,529,5.17,530,3.573,531,2.209,532,2.34,533,0.849,534,1.943,535,1.637,536,2.534,537,1.066,538,1.066,539,1.446,540,1.874,541,1.106,542,1.029,543,3.211,544,1.768,545,2.844,546,1.637,547,2.34,548,1.768,549,1.768,550,1.943,551,1.943,552,2.209,553,1.533,554,1.943,555,3.336,556,2.209,557,4.499,558,2.209,559,2.209,560,2.209,561,2.209,562,2.209,563,2.209,564,2.209,565,2.209,566,1.943,567,2.209,568,2.209,569,2.209,570,2.209,571,5.677,572,2.209,573,2.209,574,6.657,575,2.209,576,2.209,577,2.209,578,2.209,579,2.209,580,2.209,581,2.209,582,2.209,583,2.209,584,2.209,585,2.209,586,2.209,587,2.209,588,2.209,589,2.209,590,2.209,591,1.943,592,2.209,593,2.209,594,2.209,595,2.021,596,2.209,597,2.209,598,2.209,599,2.209,600,2.209,601,2.209,602,2.209,603,1.943,604,2.209,605,1.943,606,2.209,607,2.209,608,2.209,609,2.209,610,2.209,611,4.499,612,3.573,613,2.209,614,1.15,615,2.209,616,2.209,617,2.209,618,2.209,619,2.209,620,2.209,621,2.209,622,2.209,623,2.209,624,1.533,625,2.209,626,2.209,627,2.209,628,2.209,629,2.209,630,2.209,631,2.209,632,2.209,633,2.209,634,2.209,635,1.725,636,2.209,637,4.499,638,2.209,639,2.209,640,2.209,641,3.573,642,2.209,643,2.209,644,2.209,645,2.646,646,0.535,647,2.209,648,2.209,649,1.943,650,1.15,651,2.209,652,6.075,653,2.209,654,3.573,655,2.209,656,2.209,657,3.573,658,1.249,659,3.573,660,2.209,661,1.943,662,0.962,663,3.602,664,2.209,665,1.768,666,2.209,667,2.209,668,1.943,669,2.209,670,2.209,671,2.209,672,2.209,673,1.249,674,2.209,675,2.209,676,2.209,677,2.209,678,2.209,679,2.209,680,2.209,681,2.209,682,2.209,683,2.209,684,2.209,685,2.209,686,2.209,687,2.209,688,2.209,689,2.209,690,2.209,691,2.209]],["title/injectables/DataService.html",[194,0.766,327,1.616]],["body/injectables/DataService.html",[3,0.081,4,0.072,5,0.072,7,0.112,9,0.345,17,0.01,19,0.676,21,0.633,22,0.548,23,0.195,24,0.581,36,0.598,38,1.02,49,0.081,50,0.162,52,2.224,65,1.279,77,0.006,78,0.006,120,0.88,132,0.93,194,1.009,195,1.366,327,2.128,455,3.04,458,2.846,460,2.846,483,2.854,491,2.123,492,3.877,536,2.596,614,3.411,624,4.548,635,3.163,692,3.607,693,4.033,694,7.442,695,4.563,696,6.552,697,4.1,698,4.873,699,6.552,700,4.873,701,6.552,702,4.873,703,6.552,704,4.623,705,5.277,706,5.277,707,5.005,708,6.552,709,4.873,710,5.166,711,4.873,712,4.1,713,5.7,714,4.1,715,4.1,716,4.1,717,4.1,718,4.1,719,4.1,720,4.1,721,4.1,722,4.1,723,3.04,724,4.1,725,4.1,726,4.1,727,4.1,728,4.1,729,4.1,730,4.1,731,4.1,732,4.1,733,4.1,734,4.1,735,4.1,736,4.1,737,4.1,738,3.607,739,4.1,740,4.1,741,4.1,742,4.1,743,4.1,744,4.1,745,4.1,746,4.1]],["title/interfaces/FeedEntity.html",[747,1.022,748,1.616]],["body/interfaces/FeedEntity.html",[3,0.106,4,0.093,5,0.093,7,0.146,9,0.215,10,0.824,17,0.01,23,0.203,49,0.171,50,0.211,77,0.008,78,0.008,120,1.049,125,2.404,127,2.404,132,0.871,136,1.447,141,0.73,240,1.079,342,1.553,533,2.053,646,1.969,747,2.018,748,2.791,749,2.182,750,2.893,751,4.596,752,3.942,753,2.537,754,2.251,755,3.019,756,2.777,757,2.537,758,1.936,759,2.251,760,1.936,761,2.251,762,3.745,763,3.404,764,3.019,765,3.019,766,3.019,767,2.779,768,3.404,769,3.019,770,3.019,771,1.936,772,2.488,773,2.537,774,2.779,775,3.019]],["title/interfaces/FeedEntity-1.html",[167,1.431,747,0.853,748,1.348]],["body/interfaces/FeedEntity-1.html",[3,0.065,4,0.057,5,0.057,7,0.09,9,0.195,10,0.506,17,0.01,23,0.145,25,1.972,36,0.511,49,0.151,50,0.13,52,2.235,57,2.533,59,2.447,65,0.521,77,0.005,78,0.005,117,2.263,120,0.749,135,1.855,136,1.273,141,0.662,148,2.273,167,3.126,240,1.379,246,1.093,327,2.158,342,2.209,355,1.778,473,1.528,483,2.115,491,1.874,533,2.623,536,2.533,537,1.584,538,1.584,540,2.096,541,1.643,542,1.528,595,2.746,635,2.792,645,2.518,646,1.731,658,4.293,662,2.972,673,1.855,693,2.632,747,1.746,748,2.547,749,1.34,753,2.386,754,2.438,756,2.363,757,2.386,758,2.096,759,2.048,760,2.096,761,2.438,771,2.096,773,2.386,776,1.855,777,4.541,778,2.694,779,1.778,780,1.707,781,3.421,782,4.007,783,3.782,784,3.179,785,4.275,786,2.792,787,3.449,788,2.344,789,1.941,790,1.584,791,1.584,792,2.873,793,3.782,794,2.873,795,2.873,796,2.873,797,3.782,798,1.941,799,1.941,800,1.941,801,1.941,802,1.941,803,1.855,804,1.941,805,1.855,806,1.941,807,2.344,808,1.941,809,2.873,810,1.941,811,1.855,812,1.584,813,1.941,814,2.115,815,1.941,816,1.855,817,1.941,818,1.941,819,1.941,820,1.574,821,2.873,822,1.941,823,2.873,824,1.941]],["title/interfaces/FeedHeader.html",[747,1.022,753,1.616]],["body/interfaces/FeedHeader.html",[3,0.105,4,0.092,5,0.092,7,0.144,9,0.212,10,0.812,17,0.01,23,0.221,49,0.171,50,0.208,77,0.008,78,0.008,120,1.039,125,2.369,127,2.369,132,0.858,136,1.479,141,0.728,240,1.063,342,1.531,533,2.023,646,1.631,747,2.012,748,2.513,749,2.15,750,2.851,751,3.807,752,3.372,753,2.771,754,3.301,755,4.426,756,3.306,757,2.513,758,1.907,759,2.218,760,1.907,761,2.218,762,3.719,763,3.372,764,2.975,765,2.975,766,2.975,767,2.738,768,3.372,769,2.975,770,2.975,771,1.907,772,2.451,773,2.513,774,2.738,775,2.975]],["title/interfaces/FeedHeader-1.html",[167,1.431,747,0.853,753,1.348]],["body/interfaces/FeedHeader-1.html",[3,0.065,4,0.057,5,0.057,7,0.089,9,0.194,10,0.502,17,0.01,23,0.172,25,1.965,36,0.509,49,0.15,50,0.128,52,2.231,57,2.529,59,2.439,65,0.516,77,0.005,78,0.005,117,2.248,120,0.744,135,1.838,136,1.355,141,0.661,148,2.264,167,3.119,240,1.373,246,1.083,327,2.147,342,2.203,355,1.761,473,1.515,483,2.101,491,1.864,533,2.613,536,2.521,537,1.569,538,1.569,540,2.085,541,1.628,542,1.515,595,2.728,635,2.777,645,2.505,646,1.394,658,4.282,662,2.961,673,1.838,693,2.614,747,1.741,748,2.375,749,1.328,753,2.537,754,3.003,756,2.91,757,2.375,758,2.085,759,2.034,760,2.085,761,2.425,771,2.085,773,2.375,776,1.838,777,4.328,778,2.68,779,1.761,780,1.692,781,4.213,782,3.995,783,3.765,784,3.167,785,4.266,786,2.777,787,3.438,788,2.329,789,1.923,790,1.569,791,1.569,792,2.854,793,3.765,794,2.854,795,2.854,796,2.854,797,3.765,798,1.923,799,1.923,800,1.923,801,1.923,802,1.923,803,1.838,804,1.923,805,1.838,806,1.923,807,2.329,808,1.923,809,2.854,810,1.923,811,1.838,812,1.569,813,1.923,814,2.101,815,1.923,816,1.838,817,1.923,818,1.923,819,1.923,820,1.563,821,2.854,822,1.923,823,2.854,824,1.923]],["title/interfaces/FeedMessage.html",[747,1.022,773,1.616]],["body/interfaces/FeedMessage.html",[3,0.106,4,0.093,5,0.093,7,0.146,9,0.215,10,0.824,17,0.01,23,0.203,49,0.171,50,0.211,77,0.008,78,0.008,120,1.049,125,2.404,127,2.404,132,0.871,136,1.447,141,0.717,240,1.59,342,1.553,533,3.026,646,1.647,747,2.018,748,2.938,749,2.182,750,2.893,751,3.843,752,3.404,753,2.938,754,2.251,755,3.019,756,2.777,757,2.537,758,1.936,759,2.251,760,1.936,761,2.251,762,3.745,763,3.404,764,3.019,765,3.019,766,3.019,767,2.779,768,3.404,769,3.019,770,3.019,771,1.936,772,2.488,773,2.791,774,2.779,775,3.019]],["title/interfaces/FeedMessage-1.html",[167,1.431,747,0.853,773,1.348]],["body/interfaces/FeedMessage-1.html",[3,0.065,4,0.057,5,0.057,7,0.09,9,0.195,10,0.506,17,0.01,23,0.145,25,1.972,36,0.511,49,0.151,50,0.13,52,2.235,57,2.533,59,2.447,65,0.521,77,0.005,78,0.005,117,2.263,120,0.749,135,1.855,136,1.273,141,0.637,148,2.273,167,3.126,240,1.534,246,1.093,327,2.158,342,2.209,355,1.778,473,1.528,483,2.115,491,1.874,533,2.919,536,2.533,537,1.584,538,1.584,540,2.096,541,1.643,542,1.528,595,2.746,635,2.792,645,2.518,646,1.401,658,4.293,662,2.972,673,1.855,693,2.632,747,1.746,748,2.667,749,1.34,753,2.667,754,2.438,756,2.363,757,2.386,758,2.096,759,2.048,760,2.096,761,2.438,771,2.096,773,2.547,776,1.855,777,4.336,778,2.694,779,1.778,780,1.707,781,3.421,782,4.007,783,3.782,784,3.179,785,4.275,786,2.792,787,3.449,788,2.344,789,1.941,790,1.584,791,1.584,792,2.873,793,3.782,794,2.873,795,2.873,796,2.873,797,3.782,798,1.941,799,1.941,800,1.941,801,1.941,802,1.941,803,1.855,804,1.941,805,1.855,806,1.941,807,2.344,808,1.941,809,2.873,810,1.941,811,1.855,812,1.584,813,1.941,814,2.115,815,1.941,816,1.855,817,1.941,818,1.941,819,1.941,820,1.574,821,2.873,822,1.941,823,2.873,824,1.941]],["title/classes/IGenericRepository.html",[50,0.171,275,1.95]],["body/classes/IGenericRepository.html",[3,0.081,4,0.071,5,0.071,7,0.111,8,1.057,10,1.301,17,0.01,19,0.649,21,1.216,22,1.054,23,0.235,24,1.117,25,1.563,26,1.471,27,1.999,36,0.405,49,0.081,50,0.16,58,2.112,65,1.034,77,0.006,78,0.006,118,1.121,132,0.924,271,1.246,275,2.549,276,3.01,277,2.749,278,2.947,280,4.625,281,2.947,282,3.404,283,3.147,284,2.947,286,3.071,294,3.201,300,2.947,302,3.404,304,3.201,306,2.947,307,3.532,310,2.296,418,5.148,489,4.343,553,4.524,650,3.998,825,3.572,826,4.06,827,3.988,828,4.06,829,5.661,830,4.06,831,4.06,832,3.201,833,4.06,834,4.06,835,4.06,836,4.06,837,3.068,838,4.06,839,4.06,840,4.06,841,4.06,842,4.06,843,4.06,844,4.06,845,4.532,846,6.757,847,5.694,848,3.707,849,7.051,850,7.051,851,3.857,852,4.06,853,3.572,854,3.572,855,4.06,856,4.06]],["title/classes/Itinerary.html",[50,0.171,857,2.449]],["body/classes/Itinerary.html",[3,0.052,4,0.046,5,0.046,7,0.071,8,0.763,9,0.365,17,0.01,19,0.63,21,0.631,22,0.673,23,0.233,24,0.579,26,0.488,49,0.123,50,0.244,52,1.704,57,1.504,65,1.085,77,0.005,78,0.005,118,0.722,120,0.631,128,1.625,132,0.427,136,1.454,141,0.735,236,2.85,247,2.977,398,2.048,491,1.325,532,3.725,614,2.128,662,1.14,758,0.949,760,0.949,771,0.949,772,1.219,784,1.219,786,1.263,787,1.263,788,2.746,790,1.263,791,1.263,812,2.98,820,0.848,857,3.865,858,1.625,859,3.949,860,3.949,861,3.949,862,4.476,863,3.949,864,3.949,865,3.493,866,3.493,867,3.493,868,3.273,869,2.838,870,3.865,871,4.088,872,2.616,873,2.616,874,2.616,875,2.616,876,2.616,877,2.616,878,2.616,879,2.616,880,2.616,881,2.616,882,3.949,883,2.616,884,1.713,885,2.419,886,1.713,887,1.625,888,3.217,889,2.838,890,1.816,891,1.816,892,1.816,893,1.816,894,2.838,895,2.838,896,1.816,897,2.838,898,1.816,899,1.816,900,1.816,901,1.816,902,1.816,903,1.816,904,1.816,905,1.816,906,1.816,907,2.838,908,1.816,909,2.838,910,1.816,911,4.204,912,1.816,913,1.816,914,1.816,915,1.816,916,1.816,917,1.816,918,1.816,919,1.816,920,1.816,921,1.816,922,2.838,923,1.816,924,1.816,925,1.816,926,1.816,927,1.816,928,1.816,929,1.816,930,3.533,931,3.493,932,3.493,933,3.493,934,1.548,935,3.295,936,1.816,937,1.816,938,1.816,939,1.816,940,1.816,941,1.816,942,1.816,943,1.625,944,1.816,945,2.838,946,1.816,947,2.838,948,1.816,949,1.816,950,1.713,951,1.816,952,1.816,953,1.816,954,1.816,955,2.838,956,1.816,957,1.816,958,1.816,959,1.816,960,1.816,961,2.838,962,1.816,963,2.838,964,1.816,965,1.816,966,2.838,967,1.816,968,1.816,969,1.816,970,1.816,971,2.838,972,2.838,973,2.838,974,1.816,975,1.816,976,1.816,977,1.816,978,1.816,979,1.816,980,1.816,981,1.816,982,1.816,983,1.816,984,1.816,985,1.816,986,1.816,987,1.816,988,1.816,989,1.816,990,1.816,991,1.816,992,1.816,993,1.816,994,1.816,995,1.816,996,1.816,997,1.816,998,1.816,999,1.816,1000,1.625,1001,1.713,1002,1.816,1003,1.625,1004,1.816,1005,1.816,1006,1.816,1007,1.816,1008,1.816]],["title/injectables/JwtAuthGuard.html",[41,2.69,194,0.766]],["body/injectables/JwtAuthGuard.html",[3,0.132,4,0.115,5,0.115,17,0.01,36,0.554,38,1.647,41,4.815,42,4.336,49,0.132,50,0.262,77,0.009,78,0.009,194,1.372,195,2.205,274,3.085,1009,5.3,1010,5.825,1011,4.596,1012,6.621]],["title/injectables/JwtStrategy.html",[173,3.006,194,0.766]],["body/injectables/JwtStrategy.html",[3,0.113,4,0.099,5,0.099,7,0.156,8,1.323,9,0.31,10,1.189,17,0.01,19,0.572,21,0.88,22,0.762,23,0.17,24,0.808,26,1.065,27,1.762,36,0.576,38,1.418,49,0.113,50,0.225,65,0.905,77,0.008,78,0.008,132,1.257,173,4.917,181,4.228,182,5.017,190,5.017,194,1.254,195,1.9,208,3.374,230,5.017,255,2.33,274,2.657,417,4.565,1011,3.959,1013,5.017,1014,6.232,1015,5.703,1016,7.083,1017,5.703,1018,5.703,1019,3.734,1020,5.017,1021,5.017,1022,5.017,1023,5.017,1024,5.703,1025,5.703,1026,5.703,1027,5.703,1028,5.703,1029,5.703,1030,5.703]],["title/classes/Leg.html",[50,0.171,870,2.449]],["body/classes/Leg.html",[3,0.044,4,0.039,5,0.039,7,0.061,8,0.67,9,0.365,17,0.01,19,0.675,21,0.879,22,0.814,23,0.249,24,0.807,26,0.968,49,0.113,50,0.225,52,1.571,57,1.349,58,0.72,65,1.017,77,0.004,78,0.004,118,0.613,120,0.554,128,1.379,132,0.362,136,1.439,141,0.737,236,2.652,246,0.74,247,2.672,252,1.256,398,1.797,473,1.035,474,1.156,491,1.681,532,3.396,614,3.17,662,0.967,758,1.637,760,1.637,771,0.805,772,2.104,784,1.035,786,1.072,787,1.072,788,2.504,790,1.072,791,1.072,812,3.326,820,0.72,857,2.933,858,1.379,859,3.6,860,3.6,861,3.6,862,2.957,863,3.6,864,3.6,865,1.541,866,1.541,867,1.541,868,2.873,869,1.541,870,3.772,882,3.6,884,1.454,885,2.123,886,1.454,887,1.379,888,3.624,889,3.6,890,1.541,891,1.541,892,1.541,893,1.541,894,2.491,895,2.491,896,1.541,897,2.491,898,1.541,899,1.541,900,1.541,901,1.541,902,1.541,903,1.541,904,1.541,905,1.541,906,1.541,907,2.491,908,1.541,909,2.491,910,1.541,911,4.522,912,1.541,913,1.541,914,1.541,915,1.541,916,1.541,917,1.541,918,1.541,919,1.541,920,1.541,921,1.541,922,2.491,923,1.541,924,1.541,925,1.541,926,1.541,927,1.541,928,1.541,929,1.541,930,3.221,931,3.135,932,3.135,933,3.135,934,2.672,935,4.197,936,3.135,937,3.135,938,3.135,939,3.135,940,3.135,941,3.135,942,2.491,943,1.379,944,1.541,945,2.491,946,1.541,947,2.491,948,1.541,949,1.541,950,1.454,951,1.541,952,1.541,953,1.541,954,1.541,955,2.491,956,1.541,957,1.541,958,1.541,959,1.541,960,1.541,961,2.491,962,1.541,963,2.491,964,1.541,965,1.541,966,2.491,967,1.541,968,1.541,969,1.541,970,1.541,971,2.491,972,2.491,973,2.491,974,1.541,975,1.541,976,2.491,977,1.541,978,1.541,979,2.491,980,1.541,981,1.541,982,2.491,983,1.541,984,1.541,985,1.541,986,1.541,987,1.541,988,1.541,989,1.541,990,1.541,991,1.541,992,1.541,993,1.541,994,1.541,995,1.541,996,1.541,997,1.541,998,1.541,999,1.541,1000,1.379,1001,1.454,1002,1.541,1003,1.379,1004,1.541,1005,1.541,1006,1.541,1007,1.541,1008,1.541,1031,3.588,1032,3.588,1033,3.588,1034,3.588,1035,2.22,1036,2.22,1037,2.22,1038,2.22,1039,2.22,1040,2.22,1041,2.22,1042,2.22,1043,2.22,1044,2.22,1045,2.22,1046,2.22,1047,2.22,1048,2.22,1049,2.22,1050,2.22,1051,2.22,1052,2.22,1053,2.22,1054,2.22,1055,2.22,1056,2.22,1057,2.22,1058,2.22,1059,2.22,1060,2.22]],["title/entities/Line.html",[240,0.875,540,1.57]],["body/entities/Line.html",[3,0.091,4,0.08,5,0.08,7,0.168,9,0.359,16,2.871,17,0.01,19,0.658,22,0.93,23,0.263,36,0.441,49,0.091,50,0.182,77,0.007,78,0.007,113,3.485,120,0.952,136,1.246,141,0.695,240,1.247,242,2.073,246,2.714,254,4.488,255,3.463,256,3.851,258,2.724,266,3.723,269,2.495,270,2.223,271,1.413,492,4.117,540,2.523,646,1.686,1061,4.05,1062,4.117,1063,4.117,1064,6.957,1065,6.121,1066,4.604,1067,4.604,1068,3.343,1069,3.413,1070,4.604,1071,4.604,1072,4.282,1073,6.169,1074,4.939,1075,4.282,1076,4.604,1077,4.05,1078,6.169,1079,4.604,1080,4.604,1081,4.04,1082,4.05]],["title/classes/LineDto.html",[50,0.171,1083,3.466]],["body/classes/LineDto.html",[3,0.116,4,0.102,5,0.102,7,0.16,9,0.362,17,0.01,19,0.674,22,1.042,23,0.249,49,0.116,50,0.231,77,0.008,78,0.008,118,1.614,120,1.111,136,1.363,141,0.714,646,1.889,1062,4.611,1063,4.611,1065,6.856,1083,5.76,1084,5.146,1085,5.849,1086,5.849,1087,5.849,1088,5.849,1089,5.849]],["title/injectables/LineRepository.html",[194,0.766,1090,2.835]],["body/injectables/LineRepository.html",[3,0.087,4,0.076,5,0.076,7,0.12,8,1.113,9,0.316,10,1.241,17,0.01,19,0.661,21,1.241,22,1.075,23,0.24,24,1.14,25,1.209,26,1.502,27,1.955,36,0.545,38,1.089,49,0.087,50,0.173,58,2.198,65,0.695,77,0.007,78,0.007,96,1.972,132,0.973,194,1.056,195,1.459,271,1.344,274,2.779,275,3.78,277,2.515,278,3.104,280,4.37,281,3.104,282,3.516,283,2.879,284,3.104,286,3.172,292,4.359,300,2.279,301,2.373,302,3.516,304,2.476,305,2.72,306,2.279,307,2.987,308,2.373,309,2.279,310,2.476,311,2.373,315,3.232,483,1.907,540,2.64,553,4.708,650,3.104,827,4.118,832,2.476,837,2.373,1090,3.905,1091,3.852,1092,4.379,1093,4.379,1094,5.964,1095,3.852,1096,5.247,1097,3.852,1098,3.04,1099,2.591,1100,3.529,1101,3.852,1102,4.379,1103,4.379,1104,3.04,1105,4.379]],["title/injectables/LineService.html",[194,0.766,698,2.835]],["body/injectables/LineService.html",[3,0.112,4,0.098,5,0.098,7,0.153,8,1.31,9,0.339,10,1.299,17,0.01,19,0.618,21,1.083,22,0.938,23,0.209,24,0.994,26,1.31,27,1.993,36,0.547,38,1.396,49,0.112,50,0.222,51,2.095,65,0.891,77,0.008,78,0.008,132,0.916,194,1.242,195,1.87,277,2.958,326,2.812,331,3.387,455,5.942,483,2.445,540,2.906,541,2.812,698,4.593,1090,5.248,1096,6.171,1106,4.938,1107,5.613,1108,5.613,1109,5.613,1110,4.938,1111,4.162,1112,5.613]],["title/entities/LiveData.html",[240,0.875,1113,2.835]],["body/entities/LiveData.html",[3,0.073,4,0.064,5,0.064,7,0.144,9,0.363,16,2.964,17,0.01,19,0.679,23,0.268,36,0.44,49,0.073,50,0.145,77,0.006,78,0.006,113,1.832,117,1.704,120,0.812,121,4.928,122,4.928,123,5.415,124,5.415,126,5.415,129,2.515,131,5.415,136,1.128,141,0.737,148,1.218,240,1.062,242,1.647,254,4.757,255,3.587,256,4.113,270,1.766,271,1.123,646,1.492,756,2.515,780,1.904,820,1.995,1068,2.849,1113,3.443,1114,3.218,1115,6.155,1116,6.155,1117,6.155,1118,6.155,1119,5.432,1120,3.657,1121,3.657,1122,3.657,1123,3.657,1124,3.657,1125,3.657,1126,3.657,1127,3.657,1128,3.657,1129,3.657,1130,3.657,1131,6.155,1132,3.657,1133,3.657,1134,3.657,1135,3.657,1136,3.111,1137,3.218]],["title/injectables/LiveDataRepository.html",[194,0.766,711,2.835]],["body/injectables/LiveDataRepository.html",[3,0.089,4,0.078,5,0.078,7,0.122,8,1.131,9,0.276,10,1.287,17,0.01,19,0.665,21,1.249,22,1.082,23,0.241,24,1.147,25,1.672,26,1.511,27,1.91,36,0.566,38,1.114,49,0.089,50,0.177,58,2.224,77,0.007,78,0.007,96,2.018,132,0.731,194,1.072,195,1.493,271,1.375,274,2.823,275,3.797,277,2.555,278,3.153,280,4.462,281,3.153,282,3.313,283,2.925,284,3.153,286,3.202,292,4.385,294,3.426,300,2.332,301,2.428,302,3.549,303,3.11,304,2.534,305,2.783,306,2.332,307,3.034,308,2.428,309,2.332,311,2.428,315,2.428,320,2.934,326,2.244,331,2.925,540,1.625,650,3.153,711,3.967,832,2.534,837,2.428,1098,3.11,1099,2.651,1101,3.942,1113,4.814,1138,3.942,1139,4.48,1140,3.942,1141,4.48,1142,4.48,1143,4.48]],["title/controllers/LiveUpdatesController.html",[0,2.091,1144,3.21]],["body/controllers/LiveUpdatesController.html",[0,1.926,2,2.077,3,0.079,4,0.07,5,0.07,7,0.109,8,1.044,9,0.327,10,1.255,16,1.97,17,0.01,19,0.521,21,0.863,22,0.748,23,0.228,24,0.793,25,1.101,26,1.205,27,1.95,36,0.601,38,0.992,49,0.079,50,0.158,51,1.489,52,1.101,57,2.512,59,2.616,65,0.887,68,3.473,69,4.346,77,0.006,78,0.006,109,2.957,117,3.009,141,0.658,148,1.863,236,1.738,327,2.087,342,1.161,357,4.919,381,2.769,466,3.048,491,1.293,533,1.534,538,1.926,540,1.446,542,1.859,566,3.509,645,2.812,662,1.738,693,2.162,704,2.478,748,1.489,752,1.998,753,1.489,757,1.489,762,1.998,763,1.998,768,1.998,773,1.489,778,2.606,779,2.162,780,2.077,805,2.256,807,1.926,884,2.612,1113,4.228,1144,4.146,1145,3.193,1146,5.592,1147,5.592,1148,6.997,1149,3.989,1150,3.989,1151,3.989,1152,3.989,1153,3.989,1154,3.989,1155,3.989,1156,3.193,1157,3.509,1158,3.509,1159,3.989,1160,3.509,1161,3.989,1162,3.989,1163,3.509,1164,3.509,1165,3.509,1166,2.957,1167,3.509,1168,3.989,1169,3.989,1170,3.989,1171,3.989,1172,3.989,1173,3.989,1174,3.989,1175,3.989,1176,3.989,1177,4.919,1178,3.989,1179,5.592,1180,3.989,1181,3.989,1182,3.989,1183,5.592,1184,3.989,1185,5.592,1186,3.989,1187,3.989,1188,3.989,1189,3.509,1190,3.989,1191,3.989,1192,3.989,1193,3.989,1194,3.989,1195,3.989]],["title/injectables/LiveUpdatesService.html",[194,0.766,778,2.018]],["body/injectables/LiveUpdatesService.html",[3,0.075,4,0.066,5,0.066,7,0.103,8,1.003,9,0.302,10,1.157,17,0.01,19,0.582,21,0.966,22,0.837,23,0.215,24,0.887,25,1.727,26,1.003,27,1.697,36,0.574,38,0.937,49,0.075,50,0.149,51,1.406,52,2.129,57,2.462,58,1.221,59,2.337,65,1.083,77,0.006,78,0.006,109,2.793,117,2.502,120,0.829,121,5.01,122,4.299,132,0.615,141,0.718,148,2.085,194,0.951,195,1.255,236,1.641,247,4.036,255,1.54,327,2.546,342,1.096,398,1.887,416,3.517,420,4.467,430,2.229,453,5.505,461,3.016,466,2.339,473,2.502,474,2.795,479,4.724,480,3.016,481,2.793,484,3.314,485,3.314,486,3.314,487,3.314,488,3.314,489,2.131,536,1.493,537,1.819,539,2.467,542,1.756,603,3.314,605,3.314,645,2.339,661,4.724,662,1.641,778,2.502,780,1.961,807,2.593,811,2.131,820,1.221,845,6.001,1164,3.314,1177,6.001,1189,3.314,1196,3.314,1197,5.505,1198,5.37,1199,5.37,1200,5.37,1201,5.37,1202,3.767,1203,5.37,1204,3.767,1205,5.37,1206,3.767,1207,3.767,1208,5.37,1209,3.314,1210,3.767,1211,3.767,1212,3.767,1213,3.767,1214,3.767,1215,3.767,1216,3.767,1217,3.767,1218,3.767,1219,5.37,1220,5.505,1221,2.615,1222,3.767,1223,3.767,1224,3.767,1225,3.767,1226,3.767,1227,3.767,1228,3.767,1229,3.767,1230,3.767,1231,3.767]],["title/classes/LocalAuthGuard.html",[44,3.006,50,0.171]],["body/classes/LocalAuthGuard.html",[3,0.134,4,0.118,5,0.118,17,0.01,36,0.482,44,5.439,49,0.134,50,0.267,77,0.009,78,0.009,118,1.862,274,3.143,1009,5.4,1010,5.934,1011,4.682,1232,5.4,1233,6.745]],["title/injectables/LocalStrategy.html",[174,3.006,194,0.766]],["body/injectables/LocalStrategy.html",[3,0.106,4,0.093,5,0.093,7,0.145,8,1.267,9,0.301,10,1.153,15,3.538,17,0.01,19,0.548,21,1.047,22,0.907,23,0.202,24,0.962,26,0.995,27,1.688,36,0.581,38,1.325,39,4.913,49,0.106,50,0.211,51,1.989,57,1.592,58,1.726,59,1.825,65,0.845,77,0.008,78,0.008,132,0.869,141,0.697,174,4.711,185,4.687,194,1.201,195,1.775,208,4.016,221,3.95,227,5.638,235,4.265,236,2.32,274,2.483,417,4.265,1011,3.698,1014,5.97,1019,3.489,1021,4.687,1022,4.687,1023,4.687,1234,4.687,1235,5.327,1236,5.327,1237,6.786,1238,5.327,1239,4.687,1240,6.786,1241,5.327,1242,5.327,1243,5.327]],["title/interfaces/Long.html",[747,1.022,763,2.169]],["body/interfaces/Long.html",[3,0.105,4,0.092,5,0.092,7,0.144,9,0.212,10,0.812,17,0.01,23,0.221,49,0.171,50,0.208,77,0.008,78,0.008,120,1.039,125,2.369,127,2.369,132,0.858,136,1.479,141,0.715,240,1.063,342,1.531,533,2.023,646,1.631,747,2.012,748,2.513,749,2.15,750,2.851,751,3.807,752,3.372,753,2.513,754,2.218,755,2.975,756,2.751,757,2.513,758,1.907,759,2.218,760,1.907,761,2.218,762,3.719,763,3.719,764,4.426,765,4.426,766,4.426,767,3.865,768,3.372,769,2.975,770,2.975,771,1.907,772,2.451,773,2.513,774,2.738,775,2.975]],["title/interfaces/NavigatorStrategy.html",[423,2.835,747,1.022]],["body/interfaces/NavigatorStrategy.html",[3,0.121,4,0.106,5,0.106,7,0.166,8,1.377,17,0.01,19,0.492,21,0.94,22,0.814,23,0.182,24,0.863,26,1.137,36,0.567,49,0.121,77,0.008,78,0.008,275,3.713,286,3.455,416,5.195,420,5.399,423,4.83,426,4.775,430,3.604,431,4.515,432,5.358,747,1.438,749,2.489,1244,5.358,1245,5.904,1246,5.904,1247,6.09]],["title/entities/NewSchedule.html",[240,0.875,547,2.835]],["body/entities/NewSchedule.html",[3,0.086,4,0.075,5,0.075,7,0.161,9,0.361,16,2.916,17,0.01,19,0.668,23,0.263,36,0.309,49,0.086,50,0.171,77,0.007,78,0.007,120,0.912,129,2.752,136,1.404,141,0.685,240,1.194,242,1.945,252,3.808,254,3.924,255,3.588,256,3.939,258,4.284,266,3.627,269,2.341,270,2.085,271,1.326,540,2.441,547,3.869,646,1.632,814,2.933,820,2.182,1068,3.924,1072,5.025,1075,5.434,1081,2.828,1119,5.434,1136,2.555,1248,3.799,1249,5.924,1250,5.924,1251,5.924,1252,4.319,1253,3.869,1254,4.319,1255,4.319,1256,5.197,1257,4.319,1258,4.319,1259,4.38,1260,4.319,1261,4.319,1262,4.319,1263,4.319,1264,2.998,1265,2.998,1266,2.998]],["title/classes/NewScheduleService.html",[50,0.171,710,3.006]],["body/classes/NewScheduleService.html",[3,0.109,4,0.096,5,0.096,7,0.15,8,1.292,9,0.337,10,1.291,17,0.01,19,0.612,21,1.068,22,0.925,23,0.206,24,0.98,25,1.516,26,1.292,27,1.977,36,0.541,49,0.109,50,0.217,52,1.516,65,1.098,77,0.008,78,0.008,96,2.472,118,1.516,132,0.896,271,1.685,277,2.917,282,3.839,286,3.463,294,3.912,309,2.858,310,3.105,326,2.75,331,3.34,418,3.811,489,3.105,547,3.595,548,4.395,710,4.802,827,3.105,847,4.071,848,3.595,851,4.093,853,4.83,854,4.83,1100,3.249,1267,4.83,1268,5.49,1269,5.49,1270,5.49,1271,5.49,1272,5.49,1273,5.49]],["title/classes/OTPParams.html",[50,0.171,1274,2.835]],["body/classes/OTPParams.html",[3,0.067,4,0.059,5,0.059,7,0.092,8,0.924,9,0.362,17,0.01,19,0.68,21,0.764,22,0.662,23,0.249,24,0.702,26,0.924,36,0.241,49,0.098,50,0.133,52,1.621,57,1.006,65,0.786,77,0.006,78,0.006,113,2.941,118,0.93,120,0.764,132,0.549,141,0.738,167,2.327,236,1.467,248,2.092,255,2.819,426,3.661,473,3.565,474,3.982,645,2.82,747,0.795,767,4.064,784,3.017,814,3.005,930,4.931,934,3.474,1000,4.021,1003,2.092,1019,2.205,1274,3.243,1275,2.696,1276,5.166,1277,5.166,1278,5.166,1279,5.166,1280,5.166,1281,5.166,1282,5.166,1283,5.166,1284,5.166,1285,4.951,1286,5.695,1287,4.356,1288,4.951,1289,3.368,1290,3.368,1291,3.368,1292,3.368,1293,3.368,1294,4.356,1295,4.356,1296,3.368,1297,4.356,1298,3.368,1299,3.368,1300,4.356,1301,3.368,1302,3.368,1303,3.368,1304,3.368,1305,3.368,1306,4.356,1307,3.368,1308,3.368,1309,2.963,1310,2.963,1311,2.338,1312,2.963,1313,2.963,1314,2.963,1315,2.963,1316,2.963,1317,2.963,1318,2.963,1319,2.963,1320,2.963,1321,2.963,1322,4.356,1323,2.963,1324,2.963,1325,2.963,1326,2.963,1327,2.963,1328,2.963,1329,2.963,1330,2.963,1331,2.963,1332,2.963,1333,2.963,1334,2.963,1335,2.963,1336,2.963,1337,2.963,1338,2.963,1339,2.963,1340,4.356,1341,2.963,1342,6.068,1343,2.963,1344,2.963,1345,2.963,1346,2.963]],["title/injectables/OTPService.html",[194,0.766,707,2.69]],["body/injectables/OTPService.html",[3,0.06,4,0.052,5,0.052,7,0.082,8,0.85,9,0.32,10,1.265,17,0.01,19,0.58,21,1.068,22,0.925,23,0.214,24,0.98,25,1.256,26,1.228,27,1.92,36,0.529,38,0.748,49,0.06,50,0.119,51,1.123,52,1.983,57,2.559,59,2.097,65,1.044,77,0.005,78,0.005,120,0.703,128,2.827,132,0.491,141,0.698,194,0.806,195,1.002,236,2.864,241,3.564,244,4.071,247,3.891,248,1.869,250,2.827,312,2.23,342,1.781,350,2.408,351,2.408,352,2.408,356,2.088,370,2.408,382,4.004,398,3.929,416,2.981,420,4.009,426,3.462,430,1.78,454,2.408,461,2.408,473,1.402,474,1.566,480,2.408,481,2.23,491,1.475,539,1.97,635,1.453,645,1.31,668,2.647,707,2.827,723,3.375,816,1.701,845,4.396,851,2.693,857,3.105,862,4.009,870,3.462,888,2.574,911,3.462,935,2.981,950,1.97,1001,4.009,1197,4.83,1209,2.647,1220,2.647,1274,3.596,1347,2.647,1348,4.552,1349,4.552,1350,4.552,1351,4.83,1352,3.623,1353,4.552,1354,4.552,1355,3.008,1356,4.552,1357,3.008,1358,4.552,1359,3.008,1360,3.008,1361,4.552,1362,3.008,1363,4.552,1364,3.008,1365,4.552,1366,3.008,1367,2.647,1368,2.23,1369,3.008,1370,3.008,1371,3.008,1372,3.008,1373,3.008,1374,3.008,1375,4.552,1376,6.122,1377,4.552,1378,4.552,1379,4.552,1380,5.491,1381,4.552,1382,3.008,1383,3.008,1384,3.008,1385,3.008,1386,4.552,1387,3.008,1388,3.008,1389,4.552,1390,3.008,1391,3.008,1392,3.008,1393,3.008,1394,3.008,1395,3.008,1396,3.008,1397,3.008,1398,3.008,1399,3.008,1400,3.008,1401,3.008,1402,4.552,1403,3.008,1404,3.008,1405,3.008,1406,3.008,1407,3.008,1408,3.008,1409,3.008,1410,3.008,1411,3.008,1412,3.008,1413,3.008,1414,3.008,1415,3.008,1416,3.008]],["title/classes/OTPStrategy.html",[50,0.171,1417,3.466]],["body/classes/OTPStrategy.html",[3,0.11,4,0.097,5,0.097,7,0.152,8,1.301,9,0.306,10,1.175,17,0.01,19,0.448,21,0.857,22,0.742,23,0.166,24,0.787,26,1.036,27,1.732,36,0.609,49,0.11,50,0.219,65,0.881,77,0.008,78,0.008,118,1.532,246,1.849,398,2.781,399,4.884,416,4.985,420,5.227,423,5.227,426,4.65,430,3.285,431,4.116,707,3.448,857,3.139,870,3.139,888,3.139,911,3.139,1245,5.576,1246,5.576,1274,3.635,1417,5.576,1418,4.884,1419,5.576,1420,6.094,1421,4.958,1422,5.551,1423,4.444,1424,4.884,1425,5.551]],["title/classes/Plan.html",[50,0.171,398,2.169]],["body/classes/Plan.html",[3,0.055,4,0.049,5,0.049,7,0.076,9,0.364,17,0.01,19,0.583,21,0.43,22,0.574,23,0.215,24,0.395,49,0.126,50,0.251,52,1.445,57,1.564,65,1.11,77,0.005,78,0.005,118,0.769,120,0.662,128,3.252,132,0.454,136,1.427,141,0.74,236,2.923,247,4.138,398,3.362,491,1.391,532,2.81,614,2.234,662,1.213,758,1.01,760,1.01,771,1.01,772,1.298,786,1.344,787,1.344,788,2.072,790,1.344,791,1.344,812,3.067,820,0.902,857,3.955,858,1.73,859,2.979,860,2.979,861,2.979,862,3.428,863,2.979,864,2.979,865,1.933,866,1.933,867,1.933,869,1.933,870,3.326,882,3.634,884,1.824,885,2.539,886,1.824,887,1.73,888,3.326,889,2.979,890,1.933,891,1.933,892,1.933,893,1.933,894,2.979,895,2.979,896,1.933,897,2.979,898,1.933,899,1.933,900,1.933,901,1.933,902,1.933,903,1.933,904,1.933,905,1.933,906,1.933,907,2.979,908,1.933,909,2.979,910,1.933,911,4.418,912,1.933,913,1.933,914,1.933,915,1.933,916,1.933,917,1.933,918,1.933,919,1.933,920,1.933,921,1.933,922,2.979,923,1.933,924,1.933,925,1.933,926,1.933,927,1.933,928,1.933,929,1.933,930,4.169,931,3.634,932,3.634,933,3.634,934,1.648,935,3.428,936,1.933,937,1.933,938,1.933,939,1.933,940,1.933,941,1.933,942,1.933,943,1.73,944,1.933,945,2.979,946,1.933,947,2.979,948,1.933,949,1.933,950,1.824,951,1.933,952,1.933,953,1.933,954,1.933,955,2.979,956,1.933,957,1.933,958,1.933,959,1.933,960,1.933,961,2.979,962,1.933,963,2.979,964,1.933,965,1.933,966,2.979,967,1.933,968,1.933,969,1.933,970,1.933,971,2.979,972,2.979,973,2.979,974,1.933,975,1.933,976,1.933,977,1.933,978,1.933,979,1.933,980,1.933,981,1.933,982,1.933,983,1.933,984,1.933,985,1.933,986,1.933,987,1.933,988,1.933,989,1.933,990,1.933,991,1.933,992,1.933,993,1.933,994,1.933,995,1.933,996,1.933,997,1.933,998,1.933,999,1.933,1000,3.252,1001,3.428,1002,2.979,1003,1.73,1004,1.933,1005,1.933,1006,1.933,1007,1.933,1008,1.933,1426,4.291,1427,2.785,1428,2.785,1429,2.785,1430,2.785,1431,2.785,1432,2.785]],["title/entities/Point.html",[240,0.875,545,2.169]],["body/entities/Point.html",[3,0.095,4,0.084,5,0.084,7,0.194,9,0.357,16,2.844,17,0.01,19,0.652,23,0.261,36,0.453,49,0.095,50,0.19,77,0.007,78,0.007,120,0.979,125,3.198,127,3.198,129,3.211,136,1.267,141,0.678,240,1.281,242,2.16,246,2.844,254,4.461,255,3.415,256,3.897,266,3.176,269,2.6,270,2.316,271,1.473,466,2.762,545,3.176,646,1.721,1082,4.221,1119,4.401,1136,2.839,1259,4.701,1266,3.33,1433,4.221,1434,5.686,1435,4.798,1436,4.798,1437,4.798,1438,4.221,1439,4.798,1440,5.578,1441,4.798,1442,4.798,1443,4.798,1444,4.798,1445,5.076,1446,4.798,1447,4.798]],["title/classes/PointDto.html",[50,0.171,1448,3.466]],["body/classes/PointDto.html",[3,0.116,4,0.102,5,0.102,7,0.16,9,0.362,17,0.01,19,0.675,23,0.249,49,0.116,50,0.232,77,0.008,78,0.008,118,1.618,120,1.112,125,3.513,127,3.513,129,3.188,136,1.364,141,0.714,646,1.891,1434,6.245,1448,5.768,1449,5.158,1450,5.863,1451,5.863,1452,5.863,1453,5.863,1454,5.863]],["title/classes/PointRepository.html",[50,0.171,1455,2.835]],["body/classes/PointRepository.html",[3,0.087,4,0.077,5,0.077,7,0.12,8,1.117,9,0.341,10,1.178,17,0.01,19,0.662,21,1.243,22,1.077,23,0.24,24,1.142,25,1.652,26,1.504,27,2.003,36,0.522,49,0.087,50,0.174,58,2.204,65,0.95,77,0.007,78,0.007,96,1.982,118,1.215,129,2.446,132,0.718,141,0.571,271,1.351,274,2.789,275,3.784,277,2.524,278,3.116,280,4.266,281,3.116,282,3.523,283,2.89,284,3.116,286,3.179,292,4.365,294,3.385,300,2.291,301,2.386,302,3.283,304,2.489,305,2.734,306,2.291,307,2.998,308,2.386,309,2.291,310,2.489,311,2.386,315,3.686,320,2.883,545,3.656,650,3.116,827,2.489,837,2.386,1099,2.605,1100,2.605,1104,3.056,1455,3.919,1456,3.873,1457,4.402,1458,4.402,1459,5.985,1460,5.265,1461,3.873,1462,4.402,1463,3.873,1464,3.873,1465,4.402,1466,4.402,1467,3.873]],["title/injectables/PointService.html",[194,0.766,705,2.835]],["body/injectables/PointService.html",[3,0.109,4,0.096,5,0.096,7,0.15,8,1.292,9,0.337,10,1.291,17,0.01,19,0.612,21,1.169,22,1.013,23,0.226,24,1.073,26,1.292,27,1.977,36,0.541,38,1.366,49,0.109,50,0.217,51,2.05,65,1.098,77,0.008,78,0.008,129,2.244,132,0.896,141,0.636,194,1.224,195,1.829,277,2.917,326,2.75,331,3.34,457,6.086,545,3.983,546,4.071,614,2.858,705,4.53,1455,5.207,1468,4.83,1469,5.49,1470,6.917,1471,5.49,1472,6.917,1473,5.49,1474,4.395,1475,4.83,1476,5.49]],["title/interfaces/Position.html",[747,1.022,762,2.169]],["body/interfaces/Position.html",[3,0.106,4,0.093,5,0.093,7,0.146,9,0.215,10,0.824,17,0.01,23,0.203,49,0.171,50,0.211,77,0.008,78,0.008,120,1.049,125,3.544,127,3.544,132,0.871,136,1.482,141,0.717,240,1.079,342,1.553,533,2.053,646,1.647,747,2.018,748,2.537,749,2.182,750,2.893,751,3.843,752,3.404,753,2.537,754,2.251,755,3.019,756,2.777,757,2.537,758,1.936,759,2.251,760,1.936,761,2.251,762,3.942,763,3.404,764,3.019,765,3.019,766,3.019,767,2.779,768,3.404,769,3.019,770,3.019,771,1.936,772,2.488,773,2.537,774,2.779,775,3.019]],["title/classes/PositionProto.html",[50,0.171,774,2.254]],["body/classes/PositionProto.html",[3,0.104,4,0.091,5,0.091,7,0.143,8,1.254,9,0.298,10,1.144,17,0.01,19,0.542,21,0.809,22,0.7,23,0.156,24,0.742,25,1.446,26,0.978,49,0.171,50,0.207,77,0.008,78,0.008,118,1.446,125,2.359,127,2.359,132,1.209,136,1.442,141,0.715,240,1.058,342,1.524,533,2.014,646,1.627,747,2.01,748,2.506,750,2.839,751,3.797,752,3.363,753,2.506,754,2.209,755,2.962,756,2.744,757,2.506,758,1.899,759,2.209,760,1.899,761,2.209,762,3.712,763,3.363,764,2.962,765,2.962,766,2.962,767,2.727,768,3.363,769,2.962,770,2.962,771,1.899,772,2.441,773,2.917,774,3.495,775,3.797,1477,6.714,1478,5.238,1479,5.238]],["title/entities/Route.html",[240,0.875,246,1.442]],["body/entities/Route.html",[3,0.075,4,0.066,5,0.066,7,0.147,9,0.357,15,1.651,16,2.832,17,0.01,19,0.649,22,0.966,23,0.261,36,0.517,49,0.075,50,0.15,77,0.006,78,0.006,113,4.289,120,0.832,129,1.549,136,1.259,141,0.663,148,2.092,221,2.81,240,1.09,242,1.707,246,1.797,250,3.9,254,4.418,255,3.158,256,3.627,258,2.243,266,3.426,269,2.054,270,1.83,271,1.163,466,3.148,491,1.228,540,2.956,545,3.871,614,3.268,646,1.752,820,1.228,1062,3.715,1063,3.715,1068,2.923,1069,2.81,1074,4.318,1075,4.748,1077,3.334,1081,3.532,1119,3.744,1137,3.334,1264,3.744,1265,3.744,1266,3.744,1311,4.358,1438,3.334,1440,4.745,1445,4.318,1480,3.334,1481,5.017,1482,3.79,1483,3.79,1484,3.79,1485,3.79,1486,4.318,1487,3.79,1488,5.393,1489,7.227,1490,3.79,1491,3.79,1492,3.79,1493,5.393,1494,3.79,1495,4.745,1496,3.79,1497,3.79,1498,3.79,1499,3.79,1500,3.79,1501,3.79]],["title/classes/RouteDto.html",[50,0.171,1502,3.21]],["body/classes/RouteDto.html",[3,0.104,4,0.091,5,0.091,7,0.142,9,0.362,17,0.01,19,0.667,23,0.246,36,0.479,49,0.133,50,0.265,77,0.008,78,0.008,118,1.44,120,1.034,136,1.385,141,0.714,148,2.463,149,3.868,466,3.597,491,2.17,545,3.704,614,4.062,646,1.792,943,3.24,1062,4.376,1063,4.376,1311,5.133,1481,5.133,1502,4.964,1503,4.176,1504,5.216,1505,5.216,1506,5.216,1507,5.216,1508,5.216,1509,5.216,1510,4.589,1511,3.621,1512,4.589,1513,4.589,1514,4.589]],["title/classes/RouteInfoDto.html",[50,0.171,1511,3.006]],["body/classes/RouteInfoDto.html",[3,0.105,4,0.092,5,0.092,7,0.145,9,0.358,17,0.01,19,0.634,21,0.817,22,0.708,23,0.234,24,0.75,36,0.483,49,0.134,50,0.267,77,0.008,78,0.008,118,1.461,120,1.043,132,0.864,136,1.249,141,0.716,148,2.761,149,3.925,466,3.716,491,2.627,545,4.152,614,4.441,646,1.283,943,3.288,1062,3.132,1063,3.132,1311,3.675,1481,3.675,1502,3.925,1503,4.238,1510,4.657,1511,4.692,1512,5.946,1513,4.657,1514,4.657,1515,6.759,1516,5.294,1517,5.294]],["title/classes/RouteRepository.html",[50,0.171,1421,2.69]],["body/classes/RouteRepository.html",[3,0.061,4,0.053,5,0.053,7,0.084,8,0.861,9,0.346,10,1.324,15,1.333,17,0.01,19,0.652,21,1.232,22,1.067,23,0.238,24,1.131,25,0.845,26,1.49,27,2.045,36,0.474,49,0.061,50,0.121,58,2.001,65,1.105,77,0.005,78,0.005,96,1.378,118,0.845,129,2.953,132,0.752,141,0.715,244,4.113,246,2.057,248,1.901,250,1.901,271,0.939,274,2.148,275,3.491,277,1.944,278,2.4,280,3.871,281,2.4,282,2.981,283,2.226,284,2.4,286,2.69,292,3.916,300,1.593,301,1.658,302,2.981,304,1.73,305,1.901,306,1.593,307,2.309,308,1.658,309,1.593,310,1.73,311,1.658,315,3.007,489,3.492,492,1.81,506,4.943,545,1.533,624,3.851,650,2.4,820,0.992,827,4.206,832,2.607,837,1.658,848,4.732,851,3.654,1099,1.81,1100,2.728,1104,2.124,1420,3.691,1421,2.864,1461,2.692,1463,2.692,1464,2.692,1481,2.124,1518,2.692,1519,4.61,1520,4.61,1521,3.418,1522,3.691,1523,4.61,1524,3.06,1525,3.06,1526,4.61,1527,3.06,1528,4.61,1529,3.06,1530,3.418,1531,3.06,1532,4.056,1533,3.06,1534,4.056,1535,3.06,1536,4.61,1537,3.06,1538,3.691,1539,3.06,1540,3.06,1541,3.06,1542,2.692,1543,3.06,1544,2.692,1545,4.578,1546,4.61,1547,6.624,1548,5.547,1549,5.547,1550,5.547,1551,5.547,1552,3.06,1553,3.06,1554,4.88,1555,4.441,1556,5.432,1557,3.06,1558,3.06,1559,4.61,1560,4.056,1561,4.056,1562,4.056,1563,4.056,1564,3.06,1565,4.441,1566,4.88,1567,3.06,1568,3.06,1569,3.06,1570,3.06]],["title/injectables/RouteService.html",[194,0.766,700,2.835]],["body/injectables/RouteService.html",[3,0.087,4,0.076,5,0.076,7,0.12,8,1.113,9,0.357,10,1.213,15,1.907,17,0.01,19,0.661,21,1.241,22,1.075,23,0.24,24,1.14,26,1.502,27,2.15,36,0.485,38,1.089,49,0.087,50,0.173,51,1.635,65,1.209,77,0.007,78,0.007,132,0.714,141,0.73,194,1.056,195,1.459,246,2.426,277,2.515,302,2.114,326,2.194,331,2.879,458,5.055,492,2.591,535,3.247,700,3.905,820,2.469,832,3.373,1111,3.247,1421,4.523,1481,3.04,1521,4.422,1522,4.774,1530,4.422,1532,5.247,1534,5.247,1538,3.506,1571,3.852,1572,5.247,1573,5.964,1574,4.379,1575,4.379,1576,5.964,1577,4.379,1578,4.379,1579,4.379,1580,4.379,1581,4.379,1582,5.964,1583,4.379,1584,3.852,1585,3.852,1586,4.379,1587,4.379,1588,3.852,1589,4.379,1590,4.379]],["title/entities/RouteStop.html",[240,0.875,543,2.69]],["body/entities/RouteStop.html",[3,0.114,4,0.1,5,0.1,7,0.195,9,0.352,16,2.726,17,0.01,19,0.625,23,0.231,36,0.411,49,0.114,50,0.228,77,0.008,78,0.008,120,1.1,129,3.162,136,1.194,141,0.679,240,1.439,242,2.591,255,2.911,256,3.904,266,3.569,270,2.779,271,1.766,543,4.425,646,1.875,820,2.507,1068,4.382,1072,4.945,1136,3.405,1253,4.665,1591,5.063,1592,5.755,1593,6.267,1594,5.755,1595,5.755]],["title/classes/RouteStopRepository.html",[50,0.171,1596,3.006]],["body/classes/RouteStopRepository.html",[3,0.09,4,0.079,5,0.079,7,0.124,8,1.142,9,0.278,10,1.291,17,0.01,19,0.667,21,1.254,22,1.086,23,0.242,24,1.151,25,1.688,26,1.516,27,1.919,36,0.529,49,0.09,50,0.18,58,2.24,77,0.007,78,0.007,96,2.047,118,1.255,132,0.998,271,1.395,274,2.85,275,3.807,277,2.58,278,3.184,280,4.472,281,3.184,282,3.338,283,2.953,284,3.184,286,3.221,292,4.402,293,3.999,294,3.459,300,2.366,301,2.464,302,3.57,303,3.155,304,2.571,305,2.824,306,2.366,307,3.064,308,2.464,309,2.366,311,2.464,315,2.464,320,2.977,543,4.593,650,3.184,832,2.571,837,2.464,1098,3.155,1099,2.69,1596,4.246,1597,3.999,1598,4.545,1599,4.545,1600,6.116,1601,4.545,1602,4.545,1603,4.545]],["title/injectables/RouteStopService.html",[194,0.766,709,2.835]],["body/injectables/RouteStopService.html",[3,0.114,4,0.1,5,0.1,7,0.156,8,1.324,9,0.31,10,1.191,17,0.01,19,0.573,21,1.095,22,0.948,23,0.212,24,1.005,26,1.067,27,1.764,36,0.593,38,1.422,49,0.114,50,0.226,51,2.134,65,0.907,77,0.008,78,0.008,132,0.933,194,1.256,195,1.904,277,2.992,326,2.863,331,3.425,543,5.01,544,4.576,545,2.863,546,4.238,624,3.968,709,4.645,1455,3.743,1474,4.576,1596,5.599,1604,5.028,1605,5.716,1606,7.093,1607,5.716,1608,5.028,1609,5.716]],["title/controllers/SavedController.html",[0,2.091,1610,3.21]],["body/controllers/SavedController.html",[2,1.887,3,0.072,4,0.063,5,0.063,7,0.099,8,0.976,9,0.35,10,1.342,16,2.688,17,0.01,19,0.616,21,1.177,22,1.02,23,0.259,24,1.081,26,1.424,27,2.089,31,6.228,36,0.508,38,0.902,41,2.252,42,2.374,43,2.688,49,0.072,50,0.143,51,1.353,65,1.211,68,4.738,69,4.738,73,5.655,77,0.006,78,0.006,141,0.693,148,1.208,149,2.688,246,1.208,323,4.183,381,2.517,384,3.19,385,6.71,397,3.19,406,3.19,458,3.627,466,3.659,1156,2.903,1423,2.903,1610,3.874,1611,3.19,1612,5.225,1613,5.225,1614,5.225,1615,5.225,1616,5.225,1617,5.225,1618,3.626,1619,3.626,1620,3.626,1621,3.626,1622,3.626,1623,3.626,1624,3.626,1625,3.626,1626,3.626,1627,3.626,1628,3.626,1629,3.626,1630,3.626,1631,3.626,1632,3.626,1633,3.626,1634,3.626,1635,3.626,1636,3.626,1637,3.626,1638,3.421,1639,3.19,1640,3.626,1641,3.626,1642,3.626,1643,6.703,1644,3.626,1645,5.225,1646,3.626,1647,3.626,1648,3.626,1649,3.626,1650,3.626,1651,3.626,1652,3.626,1653,3.626,1654,3.626,1655,3.626,1656,3.626,1657,3.626,1658,3.626,1659,3.626,1660,3.626,1661,3.626,1662,3.626]],["title/injectables/SavedService.html",[194,0.766,1638,2.835]],["body/injectables/SavedService.html",[3,0.081,4,0.071,5,0.071,7,0.111,8,1.056,9,0.354,10,1.005,15,3.745,17,0.01,19,0.649,21,1.24,22,1.074,23,0.24,24,1.139,25,1.798,26,1.471,27,1.62,36,0.504,38,1.008,49,0.081,50,0.16,51,1.513,52,1.119,57,1.211,58,2.283,59,1.388,65,1.034,77,0.006,78,0.006,132,0.661,141,0.755,194,1.001,195,1.35,326,2.03,327,2.63,331,2.73,334,3.005,346,3.245,458,3.925,460,3.925,466,3.5,491,1.314,492,2.398,1019,2.654,1638,3.703,1663,3.566,1664,4.975,1665,4.975,1666,5.655,1667,4.975,1668,4.975,1669,4.377,1670,4.053,1671,5.655,1672,4.053,1673,4.975,1674,4.053,1675,5.655,1676,4.053,1677,5.655,1678,4.053,1679,5.655,1680,4.053,1681,5.655,1682,4.053,1683,4.975,1684,4.053,1685,4.053,1686,3.245,1687,4.053,1688,4.053,1689,4.053,1690,4.053,1691,4.053,1692,4.053,1693,3.566,1694,4.053,1695,4.053,1696,4.053,1697,4.053]],["title/entities/Schedule.html",[240,0.875,536,1.716]],["body/entities/Schedule.html",[3,0.086,4,0.075,5,0.075,7,0.161,9,0.361,16,2.916,17,0.01,19,0.668,23,0.263,36,0.309,49,0.086,50,0.171,77,0.007,78,0.007,120,0.912,129,2.752,136,1.404,141,0.685,240,1.194,242,1.945,252,3.808,254,3.924,255,3.588,256,3.939,258,4.284,266,3.627,269,2.341,270,2.085,271,1.326,536,2.341,540,2.441,646,1.632,814,2.933,820,2.182,1068,3.924,1072,5.025,1075,5.434,1081,2.828,1119,5.434,1136,2.555,1249,5.924,1250,5.924,1251,5.924,1253,3.869,1256,5.197,1259,4.38,1264,2.998,1265,2.998,1266,2.998,1698,3.799,1699,4.319,1700,4.319,1701,4.319,1702,4.319,1703,4.319,1704,4.319,1705,4.319,1706,4.319,1707,4.319]],["title/classes/ScheduleDayDto.html",[50,0.171,1708,3.466]],["body/classes/ScheduleDayDto.html",[3,0.123,4,0.108,5,0.108,7,0.17,9,0.356,17,0.01,19,0.646,23,0.239,49,0.123,50,0.246,77,0.008,78,0.008,118,1.714,120,1.152,141,0.724,1708,5.974,1709,5.464,1710,7.038,1711,8,1712,8,1713,6.211,1714,6.211,1715,6.211]],["title/classes/ScheduleDetailsDto.html",[50,0.171,1716,3.21]],["body/classes/ScheduleDetailsDto.html",[3,0.117,4,0.103,5,0.103,7,0.161,9,0.291,17,0.01,19,0.631,21,0.909,22,0.787,23,0.233,24,0.835,36,0.421,49,0.117,50,0.233,52,2.35,77,0.008,78,0.008,118,1.626,120,1.115,129,3.195,132,0.961,141,0.702,154,5.182,466,3.55,536,3.374,663,6.258,665,5.785,1716,5.358,1717,5.182,1718,7.226,1719,7.226,1720,5.89,1721,5.89,1722,5.89]],["title/classes/ScheduleDto.html",[50,0.171,1723,3.466]],["body/classes/ScheduleDto.html",[3,0.11,4,0.097,5,0.097,7,0.152,9,0.364,17,0.01,19,0.688,23,0.254,49,0.11,50,0.219,77,0.008,78,0.008,118,1.532,120,1.075,141,0.748,1710,6.697,1723,5.576,1724,4.884,1725,7.612,1726,7.612,1727,7.612,1728,7.612,1729,7.612,1730,7.612,1731,5.551,1732,5.551,1733,5.551,1734,5.551,1735,5.551,1736,5.551,1737,5.551]],["title/classes/ScheduleRepository.html",[50,0.171,1738,3.006]],["body/classes/ScheduleRepository.html",[3,0.067,4,0.059,5,0.059,7,0.092,8,0.927,9,0.349,10,1.243,17,0.01,19,0.658,21,1.226,22,1.062,23,0.237,24,1.126,25,1.371,26,1.504,27,2.08,36,0.464,49,0.067,50,0.134,58,1.907,65,1.185,77,0.006,78,0.006,96,1.523,118,0.933,129,2.952,132,0.81,136,1.402,141,0.684,246,1.961,252,1.912,271,1.038,274,2.314,275,3.578,277,2.094,278,2.585,280,3.986,281,2.585,282,3.132,283,2.398,284,2.585,286,2.825,292,4.046,294,2.809,300,1.76,301,1.833,302,2.842,304,1.912,305,2.1,306,1.76,307,2.488,308,1.833,309,1.76,310,1.912,311,1.833,315,3.19,320,2.214,489,2.809,536,2.57,553,4.503,646,0.819,650,2.585,807,2.842,814,3.146,820,2.239,827,3.668,837,1.833,848,3.854,851,3.483,1098,2.347,1099,2.001,1100,2.939,1104,2.347,1140,2.975,1221,4.503,1460,4.369,1467,4.369,1545,4.364,1565,2.707,1738,3.447,1739,2.975,1740,4.369,1741,5.706,1742,4.966,1743,4.369,1744,3.381,1745,3.381,1746,4.966,1747,4.966,1748,3.381,1749,3.381,1750,4.966,1751,3.381,1752,4.369,1753,3.381,1754,3.381,1755,3.381,1756,3.381,1757,3.381,1758,5.886,1759,3.381,1760,3.381,1761,3.381,1762,4.966]],["title/injectables/ScheduleService.html",[194,0.766,704,2.69]],["body/injectables/ScheduleService.html",[3,0.083,4,0.073,5,0.073,7,0.114,8,1.08,9,0.355,10,1.197,17,0.01,19,0.654,21,1.197,22,1.037,23,0.231,24,1.099,26,1.484,27,2.137,36,0.474,38,1.042,49,0.083,50,0.166,51,1.564,65,1.262,77,0.006,78,0.006,129,2.708,132,0.683,136,1.448,141,0.712,194,1.024,195,1.395,246,2.381,282,3.451,326,2.098,331,2.793,536,2.832,537,2.022,635,2.022,646,1.015,704,3.593,723,4.289,807,3.451,814,3.267,820,2.316,1111,3.106,1221,4.6,1475,3.685,1738,4.961,1740,5.089,1741,6.287,1743,5.089,1752,5.089,1763,3.685,1764,5.785,1765,5.089,1766,4.189,1767,4.189,1768,5.785,1769,4.189,1770,4.189,1771,5.785,1772,4.189,1773,4.189,1774,5.785,1775,4.189,1776,5.089,1777,4.189,1778,3.685,1779,3.685,1780,4.189,1781,4.189,1782,4.189,1783,4.189]],["title/classes/SingleRouteStrategy.html",[50,0.171,1784,3.466]],["body/classes/SingleRouteStrategy.html",[3,0.106,4,0.093,5,0.093,7,0.145,8,1.265,9,0.3,10,1.152,17,0.01,19,0.429,21,0.821,22,0.711,23,0.159,24,0.753,26,0.993,27,1.686,36,0.58,49,0.106,50,0.21,57,2.48,59,1.821,65,0.844,77,0.008,78,0.008,118,1.467,141,0.66,244,5.532,246,2.258,248,4.21,271,1.632,286,2.316,423,5.145,426,4.59,431,3.941,491,1.723,492,3.146,1245,5.426,1246,5.426,1419,5.426,1420,5.973,1421,4.881,1423,4.256,1424,4.677,1784,5.426,1785,4.677,1786,5.316,1787,5.316,1788,5.316,1789,5.316,1790,5.316,1791,5.316,1792,5.316,1793,6.777,1794,5.962,1795,5.316,1796,5.316]],["title/classes/Step.html",[50,0.171,888,2.449]],["body/classes/Step.html",[3,0.055,4,0.049,5,0.049,7,0.076,9,0.365,17,0.01,19,0.583,21,0.43,22,0.574,23,0.215,24,0.395,49,0.126,50,0.251,52,1.446,57,1.565,65,1.11,77,0.005,78,0.005,118,0.77,120,0.663,128,1.732,132,0.455,136,1.442,141,0.739,236,2.925,247,3.1,398,2.151,491,1.392,532,2.812,614,2.236,662,1.214,758,1.011,760,1.011,771,1.011,772,1.299,786,1.346,787,1.346,788,2.074,790,1.346,791,1.346,812,3.069,820,0.903,857,3.328,858,1.732,859,2.981,860,2.981,861,2.981,862,3.43,863,2.981,864,2.981,865,1.935,866,1.935,867,1.935,869,1.935,870,3.328,882,3.636,884,1.826,885,2.541,886,1.826,887,1.732,888,4.085,889,4.085,890,3.636,891,3.636,892,3.636,893,3.636,894,4.085,895,4.085,896,2.981,897,2.981,898,1.935,899,1.935,900,1.935,901,1.935,902,1.935,903,1.935,904,1.935,905,1.935,906,1.935,907,2.981,908,1.935,909,2.981,910,1.935,911,4.279,912,1.935,913,1.935,914,1.935,915,1.935,916,1.935,917,1.935,918,1.935,919,1.935,920,1.935,921,1.935,922,2.981,923,1.935,924,1.935,925,1.935,926,1.935,927,1.935,928,1.935,929,1.935,930,3.656,931,3.636,932,3.636,933,3.636,934,1.65,935,3.43,936,1.935,937,1.935,938,1.935,939,1.935,940,1.935,941,1.935,942,1.935,943,1.732,944,1.935,945,2.981,946,1.935,947,2.981,948,1.935,949,1.935,950,1.826,951,1.935,952,1.935,953,1.935,954,1.935,955,2.981,956,1.935,957,1.935,958,1.935,959,1.935,960,1.935,961,2.981,962,1.935,963,2.981,964,1.935,965,1.935,966,2.981,967,1.935,968,1.935,969,1.935,970,1.935,971,2.981,972,2.981,973,2.981,974,1.935,975,1.935,976,1.935,977,1.935,978,1.935,979,1.935,980,1.935,981,1.935,982,1.935,983,1.935,984,1.935,985,1.935,986,1.935,987,1.935,988,1.935,989,1.935,990,1.935,991,1.935,992,1.935,993,1.935,994,1.935,995,1.935,996,1.935,997,1.935,998,1.935,999,1.935,1000,1.732,1001,1.826,1002,1.935,1003,1.732,1004,1.935,1005,1.935,1006,1.935,1007,1.935,1008,1.935,1797,4.295,1798,2.788,1799,2.788,1800,2.788,1801,2.788,1802,2.788,1803,2.788]],["title/entities/Stop.html",[148,1.442,240,0.875]],["body/entities/Stop.html",[3,0.093,4,0.082,5,0.082,7,0.171,9,0.359,16,2.884,17,0.01,19,0.661,23,0.265,36,0.335,49,0.093,50,0.185,77,0.007,78,0.007,113,4.217,120,0.964,125,3.162,127,3.162,136,1.047,141,0.725,148,2.081,240,1.262,242,2.112,254,4.608,255,3.277,256,4.105,258,2.775,266,3.129,269,2.542,270,2.264,271,1.44,466,3.059,483,3.059,646,1.702,1062,4.155,1063,4.155,1068,3.385,1069,3.477,1074,5,1075,4.336,1264,3.256,1265,3.256,1495,5.495,1804,4.126,1805,4.69,1806,4.69,1807,4.69,1808,4.69,1809,4.69,1810,4.69,1811,4.69]],["title/classes/StopDto.html",[50,0.171,1812,3.466]],["body/classes/StopDto.html",[3,0.11,4,0.097,5,0.097,7,0.152,9,0.364,17,0.01,19,0.688,23,0.254,49,0.11,50,0.219,77,0.008,78,0.008,118,1.532,120,1.075,125,3.428,127,3.428,136,1.338,141,0.734,466,3.316,646,1.845,1062,4.504,1063,4.504,1434,6.094,1812,5.576,1813,4.884,1814,5.551,1815,5.551,1816,5.551,1817,5.551,1818,5.551,1819,5.551,1820,5.551]],["title/classes/StopRepository.html",[50,0.171,1821,3.006]],["body/classes/StopRepository.html",[3,0.066,4,0.058,5,0.058,7,0.09,8,0.914,9,0.352,10,1.31,15,1.444,17,0.01,19,0.656,21,1.221,22,1.057,23,0.236,24,1.121,25,0.915,26,1.497,27,2.057,36,0.49,49,0.066,50,0.131,58,2.082,65,1.138,77,0.005,78,0.005,96,1.492,118,0.915,125,1.492,127,1.492,132,0.541,141,0.673,148,2.14,271,1.017,274,2.28,275,3.561,277,2.064,278,2.547,280,3.733,281,2.547,282,3.102,283,2.363,284,2.547,286,2.798,292,4.02,300,1.725,301,1.796,302,3.102,304,2.767,306,1.725,307,2.451,308,1.796,309,1.725,310,1.874,311,1.796,315,3.482,466,2.798,483,2.798,489,3.29,491,1.074,506,2.653,540,1.202,624,3.397,650,2.547,827,4.306,832,2.767,837,1.796,848,3.81,851,3.442,1062,1.961,1063,1.961,1095,2.916,1097,2.916,1099,1.961,1100,2.896,1104,2.301,1221,4.038,1521,3.628,1530,3.628,1542,2.916,1544,2.916,1545,4.313,1554,6.028,1555,5.486,1556,2.916,1560,2.916,1561,2.916,1562,2.916,1563,2.916,1565,2.653,1566,4.305,1821,3.397,1822,2.916,1823,3.918,1824,5.651,1825,4.305,1826,3.314,1827,3.314,1828,4.894,1829,3.314,1830,3.314,1831,4.305,1832,3.314,1833,3.314,1834,3.314,1835,4.305,1836,4.894,1837,3.314,1838,3.314,1839,3.314,1840,3.314,1841,3.314,1842,3.314,1843,3.314,1844,3.314,1845,5.817,1846,3.314,1847,3.314,1848,3.314,1849,3.314,1850,3.314,1851,3.314,1852,5.817,1853,3.314,1854,3.314,1855,4.894,1856,3.314,1857,3.314,1858,2.916,1859,3.314]],["title/injectables/StopService.html",[194,0.766,702,2.835]],["body/injectables/StopService.html",[3,0.084,4,0.074,5,0.074,7,0.116,8,1.088,9,0.358,10,1.311,15,1.843,17,0.01,19,0.666,21,1.23,22,1.066,23,0.238,24,1.13,26,1.516,27,2.112,36,0.476,38,1.052,49,0.084,50,0.167,51,1.579,58,1.371,65,1.235,77,0.007,78,0.007,129,1.729,132,0.69,141,0.726,148,2.391,194,1.031,195,1.409,277,2.457,283,2.813,302,2.043,326,2.12,331,2.813,460,4.982,466,3.279,483,2.537,491,1.371,542,1.972,702,3.815,832,3.294,1111,3.137,1521,4.319,1530,4.319,1585,3.722,1588,3.722,1821,4.982,1823,4.663,1824,6.314,1825,5.125,1835,5.125,1860,3.722,1861,4.231,1862,4.231,1863,5.825,1864,4.231,1865,5.825,1866,4.231,1867,4.231,1868,4.231,1869,4.231,1870,4.231,1871,5.825,1872,4.231,1873,3.722,1874,4.231,1875,4.231,1876,4.231,1877,4.231,1878,4.231]],["title/interfaces/StopTimeEvent.html",[747,1.022,782,2.347]],["body/interfaces/StopTimeEvent.html",[3,0.065,4,0.057,5,0.057,7,0.089,9,0.195,10,0.505,17,0.01,23,0.145,24,0.687,25,1.97,36,0.51,49,0.151,50,0.129,52,2.234,57,2.532,59,2.445,65,0.519,77,0.005,78,0.005,117,2.258,120,0.748,135,1.85,136,1.357,141,0.637,148,2.27,167,3.124,240,1.377,246,1.09,327,2.155,342,2.207,355,1.773,473,1.524,483,2.111,491,1.871,533,2.62,536,2.529,537,1.579,538,1.579,540,2.093,541,1.639,542,1.524,595,2.741,635,2.787,645,2.515,646,1.399,658,4.29,662,2.969,673,1.85,693,2.627,747,1.744,748,2.383,749,1.337,753,2.383,754,2.435,756,2.359,757,2.383,758,2.093,759,2.044,760,2.093,761,2.435,771,2.093,773,2.383,776,1.85,777,4.334,778,2.69,779,1.773,780,1.703,781,3.416,782,4.111,783,4.371,784,3.535,785,4.272,786,2.787,787,3.446,788,2.34,789,1.936,790,1.579,791,1.579,792,2.868,793,3.777,794,2.868,795,2.868,796,2.868,797,3.777,798,1.936,799,1.936,800,1.936,801,1.936,802,1.936,803,1.85,804,1.936,805,1.85,806,1.936,807,2.34,808,1.936,809,2.868,810,1.936,811,1.85,812,1.579,813,1.936,814,2.111,815,1.936,816,1.85,817,1.936,818,1.936,819,1.936,820,1.571,821,2.868,822,1.936,823,2.868,824,1.936]],["title/interfaces/StopTimeUpdate.html",[747,1.022,785,2.347]],["body/interfaces/StopTimeUpdate.html",[3,0.064,4,0.056,5,0.056,7,0.088,9,0.192,10,0.496,17,0.01,23,0.189,24,0.678,25,1.957,36,0.507,49,0.15,50,0.127,52,2.226,57,2.525,59,2.429,65,0.51,77,0.005,78,0.005,117,2.228,120,0.738,135,1.817,136,1.316,141,0.659,148,2.253,167,3.11,240,1.367,246,1.07,327,2.132,342,2.196,355,1.741,473,1.497,483,2.083,491,1.851,533,2.601,536,2.507,537,1.551,538,1.551,540,2.071,541,1.609,542,1.497,595,2.704,635,2.758,645,2.488,646,1.384,658,4.267,662,3.287,673,1.817,693,2.592,747,1.734,748,2.362,749,1.313,753,2.362,754,2.409,756,2.334,757,2.362,758,2.071,759,2.017,760,2.071,761,2.409,771,2.571,773,2.362,776,1.817,777,4.316,778,2.662,779,1.741,780,1.672,781,3.38,782,4.316,783,3.744,784,3.152,785,4.316,786,3.423,787,3.723,788,2.309,789,1.901,790,1.551,791,1.551,792,2.829,793,3.744,794,2.829,795,2.829,796,2.829,797,3.744,798,1.901,799,1.901,800,1.901,801,1.901,802,1.901,803,1.817,804,1.901,805,1.817,806,1.901,807,2.309,808,1.901,809,2.829,810,1.901,811,1.817,812,1.551,813,1.901,814,2.083,815,1.901,816,1.817,817,1.901,818,1.901,819,1.901,820,1.55,821,2.829,822,1.901,823,2.829,824,1.901]],["title/controllers/TransitController.html",[0,2.091,1879,3.21]],["body/controllers/TransitController.html",[0,1.792,2,1.932,3,0.074,4,0.065,5,0.065,7,0.101,8,0.992,9,0.351,10,1.151,16,2.706,17,0.01,19,0.62,21,1.107,22,0.959,23,0.258,24,1.016,25,1.713,26,1.434,27,2.097,36,0.58,38,0.923,49,0.074,50,0.147,51,1.385,57,1.588,59,1.82,65,1.219,68,4.771,69,5.238,77,0.006,78,0.006,141,0.697,148,1.236,236,2.314,246,1.236,327,1.983,381,2.577,398,1.859,455,5.023,460,4.703,466,3.422,514,3.265,520,3.265,533,1.427,535,2.752,536,2.105,537,1.792,538,1.792,540,1.346,541,1.859,542,1.73,554,3.265,591,3.265,646,1.288,663,2.971,723,3.939,803,2.099,1156,2.971,1157,3.265,1158,3.265,1367,3.265,1511,2.577,1522,4.254,1572,4.674,1693,3.265,1716,2.752,1823,4.254,1831,3.265,1879,3.939,1880,3.265,1881,3.712,1882,5.313,1883,3.712,1884,3.712,1885,3.712,1886,3.712,1887,3.712,1888,3.712,1889,3.712,1890,3.712,1891,3.712,1892,3.712,1893,3.712,1894,3.712,1895,3.712,1896,3.712,1897,3.712,1898,3.712,1899,3.712,1900,3.712,1901,3.712,1902,3.712,1903,3.712,1904,3.712,1905,3.712,1906,3.712,1907,3.712,1908,3.712,1909,3.712,1910,3.712,1911,3.712,1912,3.712,1913,3.712,1914,3.712,1915,3.712,1916,3.712,1917,3.712,1918,3.712,1919,3.712,1920,3.712,1921,3.712,1922,3.712,1923,3.712,1924,3.712]],["title/classes/TransitGateWay.html",[50,0.171,101,2.69]],["body/classes/TransitGateWay.html",[3,0.1,4,0.088,5,0.088,7,0.137,8,1.221,9,0.343,16,1.772,17,0.01,19,0.644,21,1.122,22,0.971,23,0.23,24,1.03,26,1.357,36,0.519,49,0.1,50,0.199,52,2.006,58,2.355,77,0.007,78,0.007,101,4.062,118,1.388,120,1.009,132,1.186,136,1.371,213,4.025,356,5.537,474,3.783,1419,5.235,1925,4.424,1926,7.266,1927,7.193,1928,6.539,1929,6.539,1930,6.539,1931,6.539,1932,7.266,1933,6.539,1934,8.325,1935,5.028,1936,6.539,1937,6.539,1938,5.028,1939,6.539,1940,5.028,1941,4.424,1942,5.028,1943,5.028,1944,5.028,1945,4.424,1946,5.028,1947,5.028,1948,5.028,1949,5.028,1950,5.028,1951,5.028,1952,5.028,1953,5.028,1954,5.028]],["title/modules/TransitModule.html",[79,2.562,86,2.835]],["body/modules/TransitModule.html",[2,2.616,3,0.068,4,0.06,5,0.06,17,0.01,36,0.639,38,0.855,49,0.068,50,0.136,77,0.006,78,0.006,79,2.974,81,2.135,82,3.122,86,5.834,88,3.489,89,2.386,90,2.386,92,2.548,95,2.752,96,1.548,101,3.122,116,3.726,148,1.674,176,4.024,246,1.674,327,3.052,342,1.462,414,2.548,430,2.034,451,4.757,495,4.405,534,3.024,535,2.548,536,1.992,537,1.659,538,1.659,539,2.251,540,1.822,541,1.722,542,1.602,543,3.122,544,2.752,545,2.518,546,2.548,547,2.251,548,2.752,698,4.757,700,4.757,702,4.757,704,4.513,705,4.757,706,4.757,707,4.513,709,4.757,710,3.489,711,4.757,738,3.024,778,3.385,779,1.863,1090,4.757,1110,3.024,1113,3.291,1144,4.405,1163,3.024,1165,3.024,1352,4.299,1368,2.548,1421,3.122,1455,3.291,1474,2.752,1584,3.024,1596,3.489,1608,3.024,1738,3.489,1778,3.024,1821,3.489,1873,3.024,1879,4.405,1955,3.024,1956,3.024,1957,3.024,1958,5.043,1959,3.437,1960,3.437,1961,3.437,1962,3.437,1963,5.026,1964,3.437,1965,3.437,1966,3.437,1967,3.437,1968,3.437,1969,3.437,1970,3.437,1971,3.437,1972,2.752,1973,3.437,1974,3.437,1975,3.437]],["title/entities/Trip.html",[240,0.875,342,1.26]],["body/entities/Trip.html",[3,0.086,4,0.075,5,0.075,7,0.161,9,0.361,16,2.916,17,0.01,19,0.668,23,0.267,36,0.309,49,0.086,50,0.171,77,0.007,78,0.007,113,3.627,120,0.912,129,2.752,136,1.429,141,0.657,240,1.194,242,1.945,252,3.808,254,4.618,255,3.544,256,3.779,258,4.632,266,4.268,269,2.341,270,2.085,271,1.326,342,1.719,646,1.632,784,3.138,820,2.346,1081,2.828,1266,2.998,1445,3.457,1486,3.457,1976,3.799,1977,5.924,1978,5.924,1979,5.924,1980,6.733,1981,4.319,1982,4.319,1983,4.319,1984,4.319,1985,4.319,1986,4.319,1987,4.319,1988,4.319,1989,4.319,1990,4.319]],["title/classes/Trip-1.html",[50,0.143,167,1.431,342,1.051]],["body/classes/Trip-1.html",[3,0.05,4,0.044,5,0.044,7,0.069,8,0.74,9,0.224,10,0.757,17,0.01,19,0.639,21,0.757,22,0.656,23,0.234,24,0.695,25,2.029,26,0.74,36,0.46,49,0.139,50,0.099,52,2.399,57,2.427,58,0.815,59,2.203,65,0.399,77,0.004,78,0.004,117,2.593,118,0.694,120,0.612,132,0.41,135,2.773,136,1.278,141,0.617,148,2.017,167,3.193,240,1.41,246,0.837,327,2.401,342,2.217,355,1.363,473,3.425,474,3.737,483,1.726,491,1.589,533,2.682,536,2.549,537,1.214,538,1.214,540,1.778,541,1.259,542,1.172,595,2.241,635,2.368,645,2.424,646,1.349,658,4.475,662,3.039,665,2.013,673,1.422,693,3.282,695,3.172,747,1.59,748,2.26,753,2.26,754,2.347,756,2.274,757,2.26,758,2.018,759,2.068,760,2.018,761,2.347,771,2.018,773,2.26,776,1.422,777,4.289,778,2.998,779,1.363,780,1.309,781,3.293,782,3.891,783,3.806,784,3.137,785,4.242,786,2.687,787,3.466,788,2.368,789,2.902,790,1.913,791,1.913,792,2.902,793,3.806,794,2.902,795,3.293,796,2.902,797,3.806,798,2.345,799,1.488,800,2.902,801,1.488,802,2.345,803,1.422,804,1.488,805,1.422,806,1.488,807,1.913,808,1.488,809,2.345,810,1.488,811,1.422,812,1.214,813,1.488,814,2.136,815,1.488,816,1.422,817,1.488,818,1.488,819,2.345,820,1.804,821,3.293,822,1.488,823,2.345,824,1.488,1991,3.962,1992,3.962,1993,3.962,1994,2.514,1995,2.514,1996,2.212,1997,2.514,1998,2.514,1999,2.514,2000,2.514,2001,2.514,2002,2.514,2003,2.514,2004,2.514,2005,2.514,2006,2.514,2007,2.514,2008,2.514]],["title/interfaces/TripDescriptor.html",[747,1.022,757,1.616]],["body/interfaces/TripDescriptor.html",[3,0.103,4,0.09,5,0.09,7,0.142,9,0.209,10,0.8,17,0.01,23,0.232,49,0.171,50,0.205,77,0.007,78,0.007,120,1.029,125,2.334,127,2.334,132,0.846,136,1.461,141,0.742,240,1.048,342,1.508,533,1.993,646,1.616,747,2.006,748,2.49,749,2.119,750,2.81,751,3.772,752,3.341,753,2.49,754,2.186,755,2.932,756,2.725,757,2.752,758,2.822,759,3.283,760,2.822,761,3.283,762,3.694,763,3.341,764,2.932,765,2.932,766,2.932,767,2.699,768,3.341,769,2.932,770,2.932,771,1.88,772,2.416,773,2.49,774,2.699,775,2.932]],["title/interfaces/TripDescriptor-1.html",[167,1.431,747,0.853,757,1.348]],["body/interfaces/TripDescriptor-1.html",[3,0.063,4,0.055,5,0.055,7,0.087,9,0.191,10,0.49,17,0.01,23,0.201,24,0.892,25,1.949,36,0.505,49,0.149,50,0.126,52,2.22,57,2.521,59,2.418,65,0.504,77,0.005,78,0.005,117,2.209,120,0.732,135,1.796,136,1.312,141,0.7,148,2.242,167,3.101,240,1.36,246,1.058,327,2.118,342,2.188,355,1.721,473,1.48,483,2.065,491,1.838,533,2.588,536,2.493,537,1.533,538,1.533,540,2.057,541,1.591,542,1.48,595,2.681,635,2.739,645,2.471,646,1.375,658,4.253,662,2.932,673,1.796,693,2.569,747,1.728,748,2.348,749,1.298,753,2.348,754,2.392,756,2.318,757,2.513,758,2.56,759,2.839,760,2.56,761,2.978,771,2.057,773,2.348,776,1.796,777,4.305,778,2.644,779,1.721,780,1.653,781,3.357,782,3.965,783,3.722,784,3.137,785,4.242,786,2.739,787,3.409,788,3.25,789,1.879,790,1.533,791,1.533,792,2.805,793,3.722,794,2.805,795,2.805,796,2.805,797,3.722,798,1.879,799,1.879,800,1.879,801,1.879,802,1.879,803,1.796,804,1.879,805,1.796,806,1.879,807,2.289,808,1.879,809,2.805,810,1.879,811,1.796,812,1.533,813,1.879,814,2.065,815,1.879,816,1.796,817,1.879,818,1.879,819,1.879,820,1.536,821,2.805,822,1.879,823,2.805,824,1.879]],["title/injectables/TripRepository.html",[194,0.766,1352,2.562]],["body/injectables/TripRepository.html",[3,0.056,4,0.049,5,0.049,7,0.077,8,0.811,9,0.348,10,1.27,17,0.01,19,0.648,21,1.225,22,1.061,23,0.237,24,1.125,25,1.199,26,1.482,27,2.015,36,0.457,38,0.704,49,0.056,50,0.112,57,1.772,58,2.073,59,0.969,65,0.941,77,0.005,78,0.005,96,1.274,129,1.156,132,0.461,136,1.465,141,0.71,148,1.976,194,0.769,195,0.942,250,3.974,252,4.582,271,0.868,274,2.024,275,3.421,277,1.832,278,2.261,280,3.777,281,2.261,282,2.552,283,2.097,284,2.261,286,2.583,292,3.811,294,2.456,295,2.489,300,1.472,301,1.533,302,2.863,303,1.964,306,1.472,307,3.523,308,1.533,309,1.472,310,1.6,311,1.533,315,2.354,317,3.821,320,1.852,342,1.862,356,1.964,418,1.964,474,4.082,489,2.99,645,1.232,650,2.752,814,2.303,820,2.601,827,4.104,837,1.533,846,2.489,847,2.097,848,2.844,851,3.509,1099,1.674,1100,2.57,1351,3.821,1352,2.57,1538,3.477,1545,3.22,1858,2.489,1977,3.821,1978,3.821,1979,2.489,2009,2.489,2010,3.821,2011,3.821,2012,4.343,2013,3.821,2014,3.821,2015,3.821,2016,2.829,2017,2.829,2018,3.821,2019,2.829,2020,3.821,2021,2.829,2022,3.821,2023,2.829,2024,3.821,2025,2.829,2026,4.343,2027,2.829,2028,3.821,2029,2.829,2030,3.821,2031,2.829,2032,3.821,2033,2.829,2034,2.829,2035,2.829,2036,2.829,2037,4.343,2038,2.829,2039,2.829,2040,2.829,2041,2.829,2042,2.829,2043,4.343,2044,2.829,2045,2.829,2046,2.829,2047,2.829,2048,2.829,2049,2.829]],["title/injectables/TripService.html",[194,0.766,706,2.835]],["body/injectables/TripService.html",[3,0.074,4,0.065,5,0.065,7,0.102,8,0.998,9,0.354,10,1.312,17,0.01,19,0.647,21,1.237,22,1.071,23,0.239,24,1.136,26,1.47,27,2.022,36,0.446,38,0.931,49,0.074,50,0.148,51,1.398,58,1.733,65,1.08,77,0.006,78,0.006,129,1.53,132,0.611,136,1.493,141,0.724,194,0.946,195,1.247,250,4.469,252,4.453,283,2.582,326,1.876,331,2.582,342,1.979,356,2.6,474,4.326,539,2.452,635,1.808,706,3.502,814,2.963,820,2.693,1352,4.025,1368,2.776,1765,4.704,1776,4.704,1779,3.295,2010,4.704,2011,4.704,2013,4.704,2014,4.704,2015,4.704,2018,4.704,2020,4.704,2022,4.704,2024,4.704,2028,4.704,2030,4.704,2032,4.704,2050,3.295,2051,3.745,2052,3.745,2053,3.745,2054,3.745,2055,3.745,2056,3.745,2057,3.745,2058,3.745,2059,3.745,2060,3.745,2061,3.745,2062,3.745,2063,3.745,2064,3.745,2065,3.745,2066,3.745]],["title/interfaces/TripState.html",[426,2.449,747,1.022]],["body/interfaces/TripState.html",[3,0.083,4,0.073,5,0.073,7,0.114,9,0.347,17,0.01,23,0.237,36,0.298,49,0.115,50,0.165,52,1.15,57,1.245,65,0.915,77,0.006,78,0.006,113,2.888,120,0.89,141,0.75,167,2.619,236,1.815,248,4.43,255,2.701,426,3.738,645,2.879,747,0.984,749,1.703,767,4.132,784,3.489,814,3.261,930,5.164,934,2.466,1000,4.65,1003,2.589,1019,2.729,1274,2.729,1275,3.337,1276,3.667,1277,3.667,1278,3.667,1279,3.667,1280,3.667,1281,3.667,1282,3.667,1283,3.667,1284,3.667,1286,3.667,1287,3.667,1294,3.667,1295,3.667,1297,3.667,1300,3.667,1306,3.667,1309,3.667,1310,6.274,1311,4.95,1312,6.274,1313,3.667,1314,3.667,1315,3.667,1316,3.667,1317,3.667,1318,3.667,1319,3.667,1320,3.667,1321,3.667,1322,5.072,1323,3.667,1324,3.667,1325,3.667,1326,3.667,1327,3.667,1328,3.667,1329,3.667,1330,3.667,1331,3.667,1332,3.667,1333,3.667,1334,3.667,1335,3.667,1336,3.667,1337,3.667,1338,3.667,1339,3.667,1340,5.072,1341,3.667,1342,6.586,1343,3.667,1344,3.667,1345,3.667,1346,3.667]],["title/interfaces/TripUpdate.html",[747,1.022,777,2.347]],["body/interfaces/TripUpdate.html",[3,0.065,4,0.057,5,0.057,7,0.09,9,0.195,10,0.506,17,0.01,23,0.145,25,1.972,36,0.511,49,0.151,50,0.13,52,2.235,57,2.533,59,2.447,65,0.521,77,0.005,78,0.005,117,2.263,120,0.749,135,1.855,136,1.273,141,0.637,148,2.273,167,3.126,240,1.379,246,1.093,327,2.158,342,2.328,355,1.778,473,1.528,483,2.115,491,1.874,533,2.623,536,2.533,537,1.584,538,1.584,540,2.096,541,1.643,542,1.528,595,2.746,635,2.792,645,2.518,646,1.401,658,4.293,662,2.972,673,1.855,693,2.632,747,1.746,748,2.386,749,1.34,753,2.386,754,2.438,756,2.363,757,2.667,758,2.096,759,2.048,760,2.096,761,2.438,771,2.096,773,2.386,776,1.855,777,4.389,778,2.694,779,1.778,780,1.707,781,3.421,782,4.007,783,3.782,784,3.179,785,4.51,786,2.792,787,3.449,788,2.344,789,1.941,790,1.584,791,1.584,792,2.873,793,3.782,794,2.873,795,2.873,796,2.873,797,3.782,798,1.941,799,1.941,800,1.941,801,1.941,802,1.941,803,1.855,804,1.941,805,1.855,806,1.941,807,2.344,808,1.941,809,2.873,810,1.941,811,1.855,812,1.584,813,1.941,814,2.115,815,1.941,816,1.855,817,1.941,818,1.941,819,1.941,820,1.574,821,2.873,822,1.941,823,2.873,824,1.941]],["title/injectables/TripUpdatesListener.html",[194,0.766,1958,3.006]],["body/injectables/TripUpdatesListener.html",[3,0.088,4,0.077,5,0.077,7,0.121,8,1.121,9,0.317,10,1.298,16,2.116,17,0.01,19,0.591,21,1.129,22,0.978,23,0.218,24,1.037,26,1.273,36,0.564,38,1.101,49,0.088,50,0.175,51,1.652,52,1.882,57,2.356,58,1.434,59,2.057,77,0.007,78,0.007,101,4.543,106,3.281,107,3.281,113,3.664,132,0.722,136,1.007,141,0.372,167,1.754,194,1.063,195,1.474,241,4.636,312,3.281,342,1.984,344,5.839,350,3.543,351,3.543,352,3.543,368,3.893,378,5.284,491,1.434,539,2.898,649,3.893,807,2.9,1221,3.072,1958,4.17,1972,3.543,2067,3.893,2068,6.007,2069,6.007,2070,6.007,2071,4.425,2072,4.425,2073,6.007,2074,6.007,2075,6.007,2076,4.425,2077,6.819,2078,6.007,2079,6.007,2080,4.425,2081,6.007,2082,4.425,2083,4.425,2084,4.425,2085,4.425,2086,6.007,2087,4.425,2088,4.425,2089,4.425,2090,4.425,2091,4.425,2092,4.425,2093,6.007,2094,6.007,2095,4.425,2096,6.819,2097,4.425,2098,4.425]],["title/classes/UpdateTrips.html",[50,0.171,344,3.006]],["body/classes/UpdateTrips.html",[3,0.112,4,0.098,5,0.098,7,0.153,9,0.308,17,0.01,19,0.647,21,0.866,22,0.75,23,0.167,24,0.796,25,2.112,36,0.547,49,0.112,50,0.222,52,2.112,65,1.214,77,0.008,78,0.008,118,1.549,132,1.144,136,1.344,241,4.471,312,4.162,324,6.125,327,3.079,331,3.694,339,5.615,344,4.869,355,3.042,474,3.983,538,2.71,695,5.615,1352,3.321,1368,4.162,2099,4.938,2100,7.651,2101,5.613,2102,5.613,2103,5.613,2104,5.613,2105,5.613,2106,5.613,2107,5.613,2108,5.613,2109,5.613,2110,5.613]],["title/entities/User.html",[15,1.886,240,0.875]],["body/entities/User.html",[3,0.102,4,0.089,5,0.089,7,0.2,9,0.352,15,2.882,16,2.73,17,0.01,19,0.626,22,1.073,23,0.258,36,0.473,49,0.102,50,0.262,77,0.007,78,0.007,113,3.314,120,1.021,136,1.109,141,0.69,208,4.337,227,5.088,240,1.337,242,2.306,253,5.254,254,3.586,255,3.358,256,3.967,258,3.03,266,3.314,269,2.775,270,2.472,271,1.572,446,6.816,447,4.505,448,4.099,450,4.505,1068,3.586,1069,3.796,1081,3.353,1136,3.03,1253,3.353,1264,3.555,1265,3.555,1486,5.297,2111,4.505,2112,5.121,2113,5.121,2114,5.121,2115,5.121,2116,5.121,2117,5.121,2118,5.121,2119,5.121,2120,5.121,2121,5.121]],["title/controllers/UserController.html",[0,2.091,2122,3.466]],["body/controllers/UserController.html",[0,2.334,2,2.517,3,0.096,4,0.084,5,0.084,7,0.132,8,1.19,9,0.341,10,1.248,11,4.725,12,5.606,13,5.102,14,4.253,15,3.523,16,2.512,17,0.01,18,4.253,19,0.576,21,1.1,22,0.953,23,0.235,24,1.01,25,1.759,26,1.331,27,2.012,28,4.253,29,4.253,31,5.619,32,4.253,33,4.253,34,4.253,36,0.578,37,4.253,38,1.202,39,3.771,40,4.253,41,3.003,42,3.166,43,4.725,44,3.356,47,2.734,49,0.096,50,0.191,51,1.805,53,4.253,54,4.253,55,5.606,56,4.253,57,1.445,58,1.567,59,1.656,61,3.87,62,4.253,63,4.253,65,1.131,66,4.253,67,4.253,68,3.003,69,3.003,70,4.253,71,4.253,72,4.253,73,3.584,74,4.253,75,4.253,76,4.253,77,0.007,78,0.007,1232,3.87,2122,5.102,2123,4.253,2124,4.834,2125,4.834,2126,4.834,2127,3.87,2128,4.253,2129,4.834,2130,4.834]],["title/modules/UserModule.html",[79,2.562,87,2.835]],["body/modules/UserModule.html",[2,3.288,3,0.095,4,0.083,5,0.083,15,2.078,17,0.01,36,0.628,38,1.186,47,4.895,49,0.095,50,0.189,77,0.007,78,0.007,79,3.738,81,2.963,82,3.924,86,5.277,87,5.794,88,4.385,89,3.311,90,3.311,92,4.683,95,3.819,96,2.148,101,2.963,116,4.683,176,5.057,241,3.423,272,5.277,321,5.277,341,4.197,347,3.819,379,5.251,400,4.197,1610,5.251,1638,5.277,1639,4.197,1669,5.006,1686,3.819,1972,3.819,2127,3.819,2128,4.197,2131,4.197,2132,4.197,2133,4.77,2134,4.197,2135,4.77,2136,4.77,2137,4.77,2138,4.136,2139,4.197,2140,4.77,2141,4.385,2142,4.77,2143,4.77]],["title/injectables/UserRepository.html",[194,0.766,1669,2.69]],["body/injectables/UserRepository.html",[3,0.058,4,0.051,5,0.051,7,0.08,8,0.83,9,0.348,10,1.258,15,2.625,17,0.01,19,0.658,21,1.246,22,1.08,23,0.241,24,1.145,25,1.227,26,1.508,27,1.937,36,0.508,38,0.726,49,0.058,50,0.115,58,2.304,59,1.523,65,0.956,77,0.005,78,0.005,96,1.314,132,0.726,141,0.743,194,0.787,195,0.972,208,2.631,221,2.163,253,5.606,271,0.895,274,2.072,275,3.449,276,3.297,277,1.875,278,2.315,280,3.987,281,2.315,282,2.602,283,2.147,284,2.315,286,2.625,292,3.853,294,1.65,300,1.519,301,1.581,302,2.602,303,2.025,306,1.519,307,2.228,308,1.581,309,1.519,311,1.581,315,2.41,418,4.503,466,2.978,489,4.02,553,4.183,650,2.315,827,3.408,832,1.65,837,2.41,847,4.81,851,4.206,1098,3.087,1100,2.631,1664,3.912,1665,3.912,1667,3.912,1668,3.912,1669,2.762,1673,3.912,1683,3.912,2138,1.91,2141,2.025,2144,2.567,2145,4.447,2146,4.447,2147,4.447,2148,2.917,2149,2.917,2150,4.447,2151,4.447,2152,2.917,2153,6.014,2154,2.917,2155,4.447,2156,2.917,2157,4.447,2158,2.917,2159,4.447,2160,4.447,2161,2.917,2162,2.917,2163,4.447,2164,2.917,2165,2.917,2166,2.917,2167,2.917,2168,2.917,2169,2.917,2170,2.917,2171,2.917,2172,2.917,2173,6.026,2174,4.447,2175,4.741,2176,4.447,2177,6.487,2178,5.388,2179,2.917,2180,2.917,2181,2.917,2182,2.917,2183,2.917]],["title/entities/UserRoute.html",[240,0.875,2141,3.006]],["body/entities/UserRoute.html",[3,0.114,4,0.1,5,0.1,7,0.195,9,0.352,16,2.726,17,0.01,19,0.625,23,0.231,36,0.411,49,0.114,50,0.228,77,0.008,78,0.008,120,1.1,136,1.194,141,0.679,240,1.439,242,2.591,253,5.067,255,2.911,256,3.904,266,3.569,270,2.779,271,1.766,646,1.875,1068,4.382,1072,4.945,1136,3.405,1253,4.665,1593,6.267,2141,4.945,2153,6.807,2184,5.063,2185,5.755,2186,5.755,2187,5.755]],["title/injectables/UserService.html",[47,2.449,194,0.766]],["body/injectables/UserService.html",[3,0.109,4,0.096,5,0.096,7,0.15,8,1.293,9,0.337,11,5.136,15,3.572,17,0.01,19,0.612,21,1.17,22,1.014,23,0.226,24,1.075,26,1.293,27,1.723,36,0.569,38,1.369,47,3.917,49,0.109,50,0.218,51,2.054,58,1.783,65,0.873,77,0.008,78,0.008,132,0.898,141,0.636,194,1.226,195,1.833,197,6.094,204,6.094,206,6.094,208,3.256,326,2.756,331,3.345,1669,4.943,1686,4.405,2127,4.405,2138,3.603,2139,4.841,2188,4.841,2189,5.502,2190,5.502,2191,5.502,2192,5.502,2193,5.502]],["title/entities/UserStop.html",[240,0.875,2138,2.835]],["body/entities/UserStop.html",[3,0.114,4,0.1,5,0.1,7,0.194,9,0.352,16,2.723,17,0.01,19,0.624,23,0.231,36,0.41,49,0.114,50,0.227,77,0.008,78,0.008,120,1.098,136,1.193,141,0.678,240,1.437,242,2.586,253,5.061,255,2.907,256,3.901,266,3.563,269,3.112,270,2.772,271,1.762,646,1.873,1068,4.378,1136,3.397,1253,4.658,1259,5.274,2138,4.658,2175,6.8,2194,5.051,2195,5.742,2196,7.114,2197,5.742,2198,5.742]],["title/interfaces/VehicleDescriptor.html",[747,1.022,768,2.169]],["body/interfaces/VehicleDescriptor.html",[3,0.106,4,0.093,5,0.093,7,0.146,9,0.215,10,0.824,17,0.01,23,0.203,49,0.171,50,0.211,77,0.008,78,0.008,120,1.049,125,2.404,127,2.404,132,0.871,136,1.447,141,0.738,240,1.079,342,1.553,533,2.053,646,1.969,747,2.018,748,2.537,749,2.182,750,2.893,751,3.843,752,3.404,753,2.537,754,2.251,755,3.019,756,2.777,757,2.537,758,1.936,759,2.251,760,1.936,761,2.251,762,3.745,763,3.404,764,3.019,765,3.019,766,3.019,767,2.779,768,3.745,769,4.451,770,3.019,771,1.936,772,2.488,773,2.537,774,2.779,775,3.019]],["title/interfaces/VehiclePosition.html",[747,1.022,752,2.169]],["body/interfaces/VehiclePosition.html",[3,0.099,4,0.087,5,0.087,7,0.136,9,0.2,10,0.767,17,0.01,23,0.248,49,0.169,50,0.196,77,0.007,78,0.007,120,1.001,125,2.237,127,2.237,132,0.811,136,1.468,141,0.721,240,1.004,342,2.229,533,1.91,646,1.572,747,1.988,748,2.422,749,2.03,750,2.693,751,4.494,752,3.619,753,2.422,754,2.095,755,2.81,756,3.247,757,2.859,758,1.802,759,2.095,760,1.802,761,2.095,762,4.218,763,3.837,764,2.81,765,2.81,766,2.81,767,2.586,768,3.837,769,2.81,770,4.332,771,2.777,772,3.569,773,2.422,774,2.586,775,2.81]],["title/classes/Vertex.html",[50,0.171,911,2.449]],["body/classes/Vertex.html",[3,0.052,4,0.046,5,0.046,7,0.072,8,0.768,9,0.365,17,0.01,19,0.623,21,0.635,22,0.828,23,0.23,24,0.93,26,0.493,49,0.123,50,0.245,52,1.71,57,1.512,65,1.088,77,0.005,78,0.005,118,0.728,120,0.635,128,1.639,132,0.43,136,1.437,141,0.741,236,2.859,247,2.993,398,2.061,491,1.334,532,2.695,614,2.142,662,2.204,758,0.957,760,0.957,771,1.834,772,1.229,784,1.229,786,2.443,787,2.443,788,1.987,790,1.274,791,1.274,812,2.991,820,1.639,857,3.232,858,1.639,859,2.857,860,2.857,861,2.857,862,3.313,863,2.857,864,2.857,865,1.831,866,1.831,867,1.831,868,3.294,869,1.831,870,3.232,882,3.967,884,1.728,885,2.435,886,1.728,887,1.639,888,3.232,889,2.857,890,1.831,891,1.831,892,1.831,893,1.831,894,3.967,895,3.967,896,1.831,897,2.857,898,1.831,899,1.831,900,1.831,901,1.831,902,1.831,903,1.831,904,1.831,905,1.831,906,1.831,907,2.857,908,1.831,909,2.857,910,1.831,911,4.421,912,3.512,913,3.512,914,2.857,915,1.831,916,1.831,917,1.831,918,1.831,919,1.831,920,1.831,921,1.831,922,2.857,923,1.831,924,1.831,925,1.831,926,1.831,927,1.831,928,1.831,929,1.831,930,3.55,931,3.512,932,3.512,933,3.512,934,1.561,935,3.313,936,1.831,937,1.831,938,1.831,939,1.831,940,1.831,941,1.831,942,1.831,943,1.639,944,1.831,945,2.857,946,1.831,947,2.857,948,1.831,949,1.831,950,1.728,951,1.831,952,1.831,953,1.831,954,1.831,955,2.857,956,1.831,957,1.831,958,1.831,959,1.831,960,1.831,961,2.857,962,1.831,963,2.857,964,1.831,965,1.831,966,2.857,967,1.831,968,1.831,969,1.831,970,1.831,971,2.857,972,2.857,973,2.857,974,1.831,975,1.831,976,1.831,977,1.831,978,1.831,979,1.831,980,1.831,981,1.831,982,1.831,983,1.831,984,1.831,985,1.831,986,1.831,987,1.831,988,1.831,989,1.831,990,1.831,991,1.831,992,1.831,993,1.831,994,1.831,995,1.831,996,1.831,997,1.831,998,1.831,999,1.831,1000,1.639,1001,1.728,1002,1.831,1003,1.639,1004,1.831,1005,1.831,1006,1.831,1007,1.831,1008,1.831,1794,2.321,2199,4.115,2200,2.638,2201,2.638,2202,2.638,2203,2.638,2204,2.638,2205,2.638,2206,2.638,2207,2.638,2208,2.638,2209,2.638]],["title/coverage.html",[2210,4.738]],["body/coverage.html",[0,3.253,1,1.868,5,0.044,6,2.216,15,1.097,17,0.01,23,0.075,39,1.491,41,1.565,42,1.65,44,1.749,47,1.425,50,0.341,77,0.004,78,0.004,98,2.017,101,1.565,117,1.174,119,2.216,148,0.839,173,1.749,174,1.749,181,1.868,194,1.486,196,2.216,236,1.097,240,1.563,241,1.365,243,2.216,246,0.839,272,1.65,273,2.216,275,1.134,321,1.65,322,2.216,327,0.94,342,1.429,344,1.749,379,1.868,380,2.216,398,1.262,414,1.868,415,2.216,423,1.65,426,1.425,437,2.017,438,2.216,451,1.65,452,2.216,495,1.868,496,3.177,536,0.998,540,0.913,543,1.565,545,1.262,547,1.65,549,2.017,555,1.868,645,3.969,692,2.216,698,1.65,700,1.65,702,1.65,704,1.565,705,1.65,706,1.65,707,1.565,709,1.65,710,1.749,711,1.65,747,1.904,748,1.481,750,3.893,752,1.262,753,1.481,757,1.481,762,1.262,763,1.262,768,1.262,773,1.481,774,1.311,776,3.948,777,1.365,778,1.174,782,1.365,785,1.365,825,2.216,857,1.425,858,3.999,870,1.425,885,1.491,888,1.425,911,1.425,1009,3.177,1013,2.216,1061,2.216,1083,2.017,1084,2.216,1090,1.65,1091,2.216,1106,2.216,1113,1.65,1114,2.216,1138,2.216,1144,1.868,1145,3.177,1166,2.942,1196,2.216,1232,2.017,1234,2.216,1244,2.216,1248,2.216,1267,2.216,1274,1.65,1275,3.177,1347,2.216,1352,1.491,1417,2.017,1418,2.216,1421,1.565,1433,2.216,1448,2.017,1449,2.216,1455,1.65,1456,2.216,1468,2.216,1480,2.216,1502,1.868,1503,3.177,1511,1.749,1518,2.216,1571,2.216,1591,2.216,1596,1.749,1597,2.216,1604,2.216,1610,1.868,1611,2.216,1638,1.65,1663,2.216,1669,1.565,1698,2.216,1708,2.017,1709,2.216,1716,1.868,1717,2.216,1723,2.017,1724,2.216,1738,1.749,1739,2.216,1763,2.216,1784,2.017,1785,2.216,1804,2.216,1812,2.017,1813,2.216,1821,1.749,1822,2.216,1860,2.216,1879,1.868,1880,2.216,1925,2.216,1958,1.749,1976,3.491,2009,2.216,2050,2.216,2067,2.216,2099,2.216,2111,2.216,2122,2.017,2123,2.216,2138,1.65,2141,1.749,2144,2.216,2184,2.216,2188,2.216,2194,2.216,2210,2.017,2211,2.519,2212,2.519,2213,2.519,2214,7.831,2215,3.969,2216,8.494,2217,7.625,2218,3.491,2219,7.354,2220,5.394,2221,3.969,2222,2.216,2223,2.017,2224,2.216,2225,2.216,2226,2.216,2227,2.519,2228,7.354,2229,3.969,2230,5.571,2231,3.969,2232,2.519,2233,6.738,2234,5.571,2235,2.519,2236,6.738,2237,5.571,2238,6.061,2239,2.519,2240,2.519,2241,2.519,2242,2.519]],["title/dependencies.html",[82,3.236,2243,3.177]],["body/dependencies.html",[17,0.01,38,1.345,50,0.271,77,0.008,78,0.008,82,3.359,94,4.757,96,2.435,106,4.009,107,4.009,109,4.009,178,4.329,271,1.66,430,3.2,448,4.329,481,4.009,555,4.009,885,3.2,887,4.256,1011,3.754,1019,4.925,1020,4.757,1160,4.757,1166,5.08,1239,4.757,1941,4.757,1945,6.028,2244,5.408,2245,6.851,2246,5.408,2247,5.408,2248,5.408,2249,7.521,2250,6.851,2251,6.851,2252,5.408,2253,5.408,2254,5.408,2255,5.408,2256,5.408,2257,5.408,2258,5.408,2259,5.408,2260,5.408,2261,5.408,2262,4.757,2263,4.757,2264,5.408,2265,5.408,2266,5.408,2267,5.408,2268,5.408,2269,5.408,2270,5.408,2271,5.408,2272,5.408,2273,5.408,2274,5.408,2275,5.408,2276,5.408,2277,5.408,2278,5.408,2279,5.408,2280,5.408,2281,5.408,2282,5.408,2283,5.408,2284,5.408,2285,5.408,2286,5.408]],["title/miscellaneous/functions.html",[2287,2.678,2288,4.583]],["body/miscellaneous/functions.html",[7,0.187,17,0.009,77,0.009,78,0.009,2220,5.474,2222,7.326,2223,6.667,2287,5.069,2288,6.015,2289,6.948]],["title/index.html",[7,0.099,2290,3.611,2291,3.611]],["body/index.html",[4,0.098,17,0.01,77,0.008,78,0.008,248,3.487,286,2.445,934,4.15,1555,4.494,1927,4.938,2210,4.494,2223,5.615,2292,5.613,2293,5.613,2294,7.014,2295,5.613,2296,5.613,2297,5.613,2298,5.613,2299,5.613,2300,4.938,2301,7.651,2302,5.613,2303,5.613,2304,5.613,2305,8.536,2306,5.613,2307,5.613,2308,5.613,2309,8.414,2310,5.613,2311,5.613,2312,5.613,2313,5.613,2314,5.613,2315,7.014,2316,5.613,2317,5.613,2318,5.613,2319,7.014,2320,7.014,2321,5.613,2322,5.613,2323,5.613,2324,5.613,2325,5.613,2326,4.938,2327,5.613,2328,5.613,2329,5.613,2330,5.613,2331,5.613,2332,5.613,2333,5.613,2334,5.613,2335,5.613,2336,4.938,2337,5.613,2338,5.613,2339,5.613,2340,5.613,2341,5.613,2342,5.613,2343,4.938]],["title/modules.html",[81,3.676]],["body/modules.html",[17,0.009,77,0.009,78,0.009,80,4.948,81,4.145,85,4.633,86,4.37,87,4.37,2326,7.474,2344,8.496,2345,8.496,2346,8.496]],["title/overview.html",[2347,5.206]],["body/overview.html",[2,2.295,17,0.01,39,4.768,47,4.557,77,0.007,78,0.007,80,6.079,81,2.739,82,3.722,83,3.879,84,3.879,85,5.935,86,5.931,87,5.743,88,4.16,89,3.061,90,3.061,118,1.217,169,3.879,171,3.879,172,3.879,173,4.725,174,4.725,195,1.469,242,1.986,272,4.457,321,4.457,327,3.008,451,4.457,698,4.457,700,4.457,702,4.457,704,4.228,705,4.457,706,4.457,707,4.228,709,4.457,711,4.457,749,1.802,778,3.172,1090,4.457,1352,4.027,1638,4.457,1669,4.228,1955,3.879,1956,3.879,1957,3.879,1958,4.725,2131,3.879,2132,3.879,2134,3.879,2347,3.879,2348,4.41,2349,4.41,2350,4.41,2351,4.41,2352,4.41,2353,4.41]],["title/properties.html",[120,0.804,2243,3.177]],["body/properties.html",[17,0.01,77,0.009,78,0.009,120,1.058,2300,6.031,2336,6.031,2343,6.031,2354,6.856,2355,6.856,2356,6.856]],["title/miscellaneous/variables.html",[2287,2.678,2357,4.583]],["body/miscellaneous/variables.html",[7,0.143,17,0.01,23,0.233,77,0.008,78,0.008,98,5.382,113,3.368,181,4.984,189,4.618,227,3.644,242,2.364,454,4.202,473,4.04,474,4.513,496,4.202,549,5.382,550,4.618,551,4.618,555,4.984,858,3.261,885,4.389,886,3.437,887,3.261,1145,4.202,1166,5.798,1167,5.914,1996,5.914,2218,4.618,2220,4.202,2224,5.914,2225,5.914,2226,5.914,2262,4.618,2263,4.618,2287,3.892,2289,7.112,2357,4.618,2358,6.723,2359,5.249,2360,5.249,2361,5.249,2362,5.249,2363,5.249,2364,5.249,2365,5.249,2366,5.249,2367,5.249,2368,5.249,2369,5.249,2370,5.249,2371,5.249,2372,5.249,2373,5.249,2374,5.249,2375,5.249,2376,5.249,2377,5.249,2378,5.249,2379,5.249,2380,5.249,2381,5.249,2382,5.249,2383,5.249,2384,5.249]]],"invertedIndex":[["",{"_index":17,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"classes/ArrivalDto.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"entities/Booking.html":{},"injectables/BookingRepository.html":{},"injectables/BookingService.html":{},"controllers/BookingsController.html":{},"classes/Context.html":{},"classes/CreateUserDto.html":{},"injectables/DBUpdateService.html":{},"controllers/DBupdateController.html":{},"injectables/DataService.html":{},"interfaces/FeedEntity.html":{},"interfaces/FeedEntity-1.html":{},"interfaces/FeedHeader.html":{},"interfaces/FeedHeader-1.html":{},"interfaces/FeedMessage.html":{},"interfaces/FeedMessage-1.html":{},"classes/IGenericRepository.html":{},"classes/Itinerary.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/Leg.html":{},"entities/Line.html":{},"classes/LineDto.html":{},"injectables/LineRepository.html":{},"injectables/LineService.html":{},"entities/LiveData.html":{},"injectables/LiveDataRepository.html":{},"controllers/LiveUpdatesController.html":{},"injectables/LiveUpdatesService.html":{},"classes/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"interfaces/Long.html":{},"interfaces/NavigatorStrategy.html":{},"entities/NewSchedule.html":{},"classes/NewScheduleService.html":{},"classes/OTPParams.html":{},"injectables/OTPService.html":{},"classes/OTPStrategy.html":{},"classes/Plan.html":{},"entities/Point.html":{},"classes/PointDto.html":{},"classes/PointRepository.html":{},"injectables/PointService.html":{},"interfaces/Position.html":{},"classes/PositionProto.html":{},"entities/Route.html":{},"classes/RouteDto.html":{},"classes/RouteInfoDto.html":{},"classes/RouteRepository.html":{},"injectables/RouteService.html":{},"entities/RouteStop.html":{},"classes/RouteStopRepository.html":{},"injectables/RouteStopService.html":{},"controllers/SavedController.html":{},"injectables/SavedService.html":{},"entities/Schedule.html":{},"classes/ScheduleDayDto.html":{},"classes/ScheduleDetailsDto.html":{},"classes/ScheduleDto.html":{},"classes/ScheduleRepository.html":{},"injectables/ScheduleService.html":{},"classes/SingleRouteStrategy.html":{},"classes/Step.html":{},"entities/Stop.html":{},"classes/StopDto.html":{},"classes/StopRepository.html":{},"injectables/StopService.html":{},"interfaces/StopTimeEvent.html":{},"interfaces/StopTimeUpdate.html":{},"controllers/TransitController.html":{},"classes/TransitGateWay.html":{},"modules/TransitModule.html":{},"entities/Trip.html":{},"classes/Trip-1.html":{},"interfaces/TripDescriptor.html":{},"interfaces/TripDescriptor-1.html":{},"injectables/TripRepository.html":{},"injectables/TripService.html":{},"interfaces/TripState.html":{},"interfaces/TripUpdate.html":{},"injectables/TripUpdatesListener.html":{},"classes/UpdateTrips.html":{},"entities/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserRepository.html":{},"entities/UserRoute.html":{},"injectables/UserService.html":{},"entities/UserStop.html":{},"interfaces/VehicleDescriptor.html":{},"interfaces/VehiclePosition.html":{},"classes/Vertex.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":645,"title":{},"body":{"controllers/DBupdateController.html":{},"interfaces/FeedEntity-1.html":{},"interfaces/FeedHeader-1.html":{},"interfaces/FeedMessage-1.html":{},"controllers/LiveUpdatesController.html":{},"injectables/LiveUpdatesService.html":{},"classes/OTPParams.html":{},"injectables/OTPService.html":{},"interfaces/StopTimeEvent.html":{},"interfaces/StopTimeUpdate.html":{},"classes/Trip-1.html":{},"interfaces/TripDescriptor-1.html":{},"injectables/TripRepository.html":{},"interfaces/TripState.html":{},"interfaces/TripUpdate.html":{},"coverage.html":{}}}],["0.0.1",{"_index":2355,"title":{},"body":{"properties.html":{}}}],["0.0.6",{"_index":2264,"title":{},"body":{"dependencies.html":{}}}],["0.1.0",{"_index":2244,"title":{},"body":{"dependencies.html":{}}}],["0.1.13",{"_index":2280,"title":{},"body":{"dependencies.html":{}}}],["0.13.2",{"_index":2258,"title":{},"body":{"dependencies.html":{}}}],["0.3.11",{"_index":2286,"title":{},"body":{"dependencies.html":{}}}],["0.5.1",{"_index":2257,"title":{},"body":{"dependencies.html":{}}}],["0.6.0",{"_index":2268,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":2216,"title":{},"body":{"coverage.html":{}}}],["0/10",{"_index":2237,"title":{},"body":{"coverage.html":{}}}],["0/11",{"_index":2227,"title":{},"body":{"coverage.html":{}}}],["0/12",{"_index":2235,"title":{},"body":{"coverage.html":{}}}],["0/13",{"_index":2230,"title":{},"body":{"coverage.html":{}}}],["0/14",{"_index":2229,"title":{},"body":{"coverage.html":{}}}],["0/15",{"_index":2231,"title":{},"body":{"coverage.html":{}}}],["0/16",{"_index":2232,"title":{},"body":{"coverage.html":{}}}],["0/17",{"_index":2240,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":2234,"title":{},"body":{"coverage.html":{}}}],["0/28",{"_index":2239,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":2217,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":2214,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":2238,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":2233,"title":{},"body":{"coverage.html":{}}}],["0/7",{"_index":2215,"title":{},"body":{"coverage.html":{}}}],["0/8",{"_index":2236,"title":{},"body":{"coverage.html":{}}}],["0/9",{"_index":2228,"title":{},"body":{"coverage.html":{}}}],["09",{"_index":1371,"title":{},"body":{"injectables/OTPService.html":{}}}],["1",{"_index":167,"title":{"interfaces/FeedEntity-1.html":{},"interfaces/FeedHeader-1.html":{},"interfaces/FeedMessage-1.html":{},"classes/Trip-1.html":{},"interfaces/TripDescriptor-1.html":{}},"body":{"classes/ArrivalDto.html":{},"injectables/BookingService.html":{},"controllers/DBupdateController.html":{},"interfaces/FeedEntity-1.html":{},"interfaces/FeedHeader-1.html":{},"interfaces/FeedMessage-1.html":{},"classes/OTPParams.html":{},"interfaces/StopTimeEvent.html":{},"interfaces/StopTimeUpdate.html":{},"classes/Trip-1.html":{},"interfaces/TripDescriptor-1.html":{},"interfaces/TripState.html":{},"interfaces/TripUpdate.html":{},"injectables/TripUpdatesListener.html":{}}}],["1.0.0",{"_index":2270,"title":{},"body":{"dependencies.html":{}}}],["1.0.3",{"_index":2259,"title":{},"body":{"dependencies.html":{}}}],["1.1.3",{"_index":2267,"title":{},"body":{"dependencies.html":{}}}],["1.3.1",{"_index":2248,"title":{},"body":{"dependencies.html":{}}}],["10",{"_index":985,"title":{},"body":{"classes/Itinerary.html":{},"classes/Leg.html":{},"classes/Plan.html":{},"classes/Step.html":{},"classes/Vertex.html":{}}}],["1000}).catch(e",{"_index":854,"title":{},"body":{"classes/IGenericRepository.html":{},"classes/NewScheduleService.html":{}}}],["13",{"_index":2350,"title":{},"body":{"overview.html":{}}}],["17",{"_index":2353,"title":{},"body":{"overview.html":{}}}],["1__16",{"_index":1300,"title":{},"body":{"classes/OTPParams.html":{},"interfaces/TripState.html":{}}}],["2",{"_index":658,"title":{},"body":{"controllers/DBupdateController.html":{},"interfaces/FeedEntity-1.html":{},"interfaces/FeedHeader-1.html":{},"interfaces/FeedMessage-1.html":{},"interfaces/StopTimeEvent.html":{},"interfaces/StopTimeUpdate.html":{},"classes/Trip-1.html":{},"interfaces/TripDescriptor-1.html":{},"interfaces/TripUpdate.html":{}}}],["2.1.0",{"_index":2252,"title":{},"body":{"dependencies.html":{}}}],["2.2.0",{"_index":2246,"title":{},"body":{"dependencies.html":{}}}],["2.88.2",{"_index":2281,"title":{},"body":{"dependencies.html":{}}}],["2023&mode=car&arriveby=false&wheelchair=false&showintermediatestops=true&debugitineraryfilter=false&locale=en",{"_index":1372,"title":{},"body":{"injectables/OTPService.html":{}}}],["24",{"_index":2351,"title":{},"body":{"overview.html":{}}}],["3.0.2",{"_index":2283,"title":{},"body":{"dependencies.html":{}}}],["3.15.6",{"_index":2255,"title":{},"body":{"dependencies.html":{}}}],["3.21.2",{"_index":2260,"title":{},"body":{"dependencies.html":{}}}],["32",{"_index":2352,"title":{},"body":{"overview.html":{}}}],["36000s",{"_index":193,"title":{},"body":{"modules/AuthModule.html":{}}}],["4",{"_index":2348,"title":{},"body":{"overview.html":{}}}],["4.0.0",{"_index":2269,"title":{},"body":{"dependencies.html":{}}}],["4.5.1",{"_index":2285,"title":{},"body":{"dependencies.html":{}}}],["4828.032",{"_index":1295,"title":{},"body":{"classes/OTPParams.html":{},"interfaces/TripState.html":{}}}],["5.0.0",{"_index":2277,"title":{},"body":{"dependencies.html":{}}}],["50",{"_index":671,"title":{},"body":{"controllers/DBupdateController.html":{}}}],["59",{"_index":660,"title":{},"body":{"controllers/DBupdateController.html":{}}}],["60",{"_index":661,"title":{},"body":{"controllers/DBupdateController.html":{},"injectables/LiveUpdatesService.html":{}}}],["7",{"_index":2349,"title":{},"body":{"overview.html":{}}}],["7.1.2",{"_index":2274,"title":{},"body":{"dependencies.html":{}}}],["7.2.0",{"_index":2284,"title":{},"body":{"dependencies.html":{}}}],["8.8.0",{"_index":2272,"title":{},"body":{"dependencies.html":{}}}],["9.0.0",{"_index":2249,"title":{},"body":{"dependencies.html":{}}}],["9.0.1",{"_index":2253,"title":{},"body":{"dependencies.html":{}}}],["9.0.11",{"_index":2251,"title":{},"body":{"dependencies.html":{}}}],["9.2.1",{"_index":2245,"title":{},"body":{"dependencies.html":{}}}],["absolutedirection",{"_index":892,"title":{},"body":{"classes/Itinerary.html":{},"classes/Leg.html":{},"classes/Plan.html":{},"classes/Step.html":{},"classes/Vertex.html":{}}}],["abstract",{"_index":844,"title":{},"body":{"classes/IGenericRepository.html":{}}}],["access_token",{"_index":233,"title":{},"body":{"injectables/AuthService.html":{}}}],["accessors",{"_index":695,"title":{},"body":{"injectables/DataService.html":{},"classes/Trip-1.html":{},"classes/UpdateTrips.html":{}}}],["action",{"_index":1208,"title":{},"body":{"injectables/LiveUpdatesService.html":{}}}],["addroute",{"_index":1613,"title":{},"body":{"controllers/SavedController.html":{}}}],["addroute(@request",{"_index":1649,"title":{},"body":{"controllers/SavedController.html":{}}}],["addroute(req",{"_index":1618,"title":{},"body":{"controllers/SavedController.html":{}}}],["addstop",{"_index":1614,"title":{},"body":{"controllers/SavedController.html":{}}}],["addstop(@request",{"_index":1642,"title":{},"body":{"controllers/SavedController.html":{}}}],["addstop(req",{"_index":1621,"title":{},"body":{"controllers/SavedController.html":{}}}],["agencyname",{"_index":936,"title":{},"body":{"classes/Itinerary.html":{},"classes/Leg.html":{},"classes/Plan.html":{},"classes/Step.html":{},"classes/Vertex.html":{}}}],["agencytimezoneoffset",{"_index":937,"title":{},"body":{"classes/Itinerary.html":{},"classes/Leg.html":{},"classes/Plan.html":{},"classes/Step.html":{},"classes/Vertex.html":{}}}],["already",{"_index":362,"title":{},"body":{"injectables/BookingService.html":{}}}],["amazing",{"_index":2327,"title":{},"body":{"index.html":{}}}],["andwhere({trip_id",{"_index":2042,"title":{},"body":{"injectables/TripRepository.html":{}}}],["apidateformat",{"_index":1285,"title":{},"body":{"classes/OTPParams.html":{}}}],["apidateformat(date",{"_index":1306,"title":{},"body":{"classes/OTPParams.html":{},"interfaces/TripState.html":{}}}],["app",{"_index":2307,"title":{},"body":{"index.html":{}}}],["app.controller",{"_index":104,"title":{},"body":{"modules/AppModule.html":{}}}],["appcontroller",{"_index":1,"title":{"controllers/AppController.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"coverage.html":{}}}],["application/json",{"_index":69,"title":{},"body":{"controllers/AppController.html":{},"controllers/BookingsController.html":{},"controllers/DBupdateController.html":{},"controllers/LiveUpdatesController.html":{},"controllers/SavedController.html":{},"controllers/TransitController.html":{},"controllers/UserController.html":{}}}],["application/json')@get('/deleteroute/:code",{"_index":1627,"title":{},"body":{"controllers/SavedController.html":{}}}],["application/json')@get('/deletestop/:code",{"_index":1624,"title":{},"body":{"controllers/SavedController.html":{}}}],["application/json')@get('/get",{"_index":392,"title":{},"body":{"controllers/BookingsController.html":{}}}],["application/json')@get('/getroutes",{"_index":1633,"title":{},"body":{"controllers/SavedController.html":{}}}],["application/json')@get('/getsavedinfo",{"_index":1636,"title":{},"body":{"controllers/SavedController.html":{}}}],["application/json')@get('/getstops",{"_index":1630,"title":{},"body":{"controllers/SavedController.html":{}}}],["application/json')@get('/saveroute/:code",{"_index":1619,"title":{},"body":{"controllers/SavedController.html":{}}}],["application/json')@get('/savestop/:code",{"_index":1622,"title":{},"body":{"controllers/SavedController.html":{}}}],["application/json')@post('/delete",{"_index":386,"title":{},"body":{"controllers/BookingsController.html":{}}}],["application/json')@post('/getplan",{"_index":389,"title":{},"body":{"controllers/BookingsController.html":{}}}],["application/json')@post('/new",{"_index":395,"title":{},"body":{"controllers/BookingsController.html":{}}}],["application/json')@post('login')@usepipes(validationpipe",{"_index":34,"title":{},"body":{"controllers/AppController.html":{},"controllers/UserController.html":{}}}],["applications",{"_index":2299,"title":{},"body":{"index.html":{}}}],["appmodule",{"_index":80,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["arr",{"_index":135,"title":{},"body":{"classes/ArrivalDto.html":{},"interfaces/FeedEntity-1.html":{},"interfaces/FeedHeader-1.html":{},"interfaces/FeedMessage-1.html":{},"interfaces/StopTimeEvent.html":{},"interfaces/StopTimeUpdate.html":{},"classes/Trip-1.html":{},"interfaces/TripDescriptor-1.html":{},"interfaces/TripUpdate.html":{}}}],["arr.departuremins",{"_index":151,"title":{},"body":{"classes/ArrivalDto.html":{}}}],["arr.departureseconds",{"_index":153,"title":{},"body":{"classes/ArrivalDto.html":{}}}],["arr.latitude",{"_index":163,"title":{},"body":{"classes/ArrivalDto.html":{}}}],["arr.linecode",{"_index":161,"title":{},"body":{"classes/ArrivalDto.html":{}}}],["arr.longitude",{"_index":165,"title":{},"body":{"classes/ArrivalDto.html":{}}}],["arr.routecode",{"_index":155,"title":{},"body":{"classes/ArrivalDto.html":{}}}],["arr.routename",{"_index":159,"title":{},"body":{"classes/ArrivalDto.html":{}}}],["arr.vehiclecode",{"_index":157,"title":{},"body":{"classes/ArrivalDto.html":{}}}],["array",{"_index":1074,"title":{},"body":{"entities/Line.html":{},"entities/Route.html":{},"entities/Stop.html":{}}}],["arrival",{"_index":662,"title":{},"body":{"controllers/DBupdateController.html":{},"interfaces/FeedEntity-1.html":{},"interfaces/FeedHeader-1.html":{},"interfaces/FeedMessage-1.html":{},"classes/Itinerary.html":{},"classes/Leg.html":{},"controllers/LiveUpdatesController.html":{},"injectables/LiveUpdatesService.html":{},"classes/Plan.html":{},"classes/Step.html":{},"interfaces/StopTimeEvent.html":{},"interfaces/StopTimeUpdate.html":{},"classes/Trip-1.html":{},"interfaces/TripDescriptor-1.html":{},"interfaces/TripUpdate.html":{},"classes/Vertex.html":{}}}],["arrival.arrivalmins",{"_index":1230,"title":{},"body":{"injectables/LiveUpdatesService.html":{}}}],["arrival.arrivalseconds",{"_index":1231,"title":{},"body":{"injectables/LiveUpdatesService.html":{}}}],["arrival.latitude",{"_index":1222,"title":{},"body":{"injectables/LiveUpdatesService.html":{}}}],["arrival.longitude",{"_index":1219,"title":{},"body":{"injectables/LiveUpdatesService.html":{}}}],["arrivaldelay",{"_index":859,"title":{},"body":{"classes/Itinerary.html":{},"classes/Leg.html":{},"classes/Plan.html":{},"classes/Step.html":{},"classes/Vertex.html":{}}}],["arrivaldto",{"_index":117,"title":{"classes/ArrivalDto.html":{}},"body":{"classes/ArrivalDto.html":{},"interfaces/FeedEntity-1.html":{},"interfaces/FeedHeader-1.html":{},"interfaces/FeedMessage-1.html":{},"entities/LiveData.html":{},"controllers/LiveUpdatesController.html":{},"injectables/LiveUpdatesService.html":{},"interfaces/StopTimeEvent.html":{},"interfaces/StopTimeUpdate.html":{},"classes/Trip-1.html":{},"interfaces/TripDescriptor-1.html":{},"interfaces/TripUpdate.html":{},"coverage.html":{}}}],["arrivaldto(e",{"_index":1180,"title":{},"body":{"controllers/LiveUpdatesController.html":{}}}],["arrivaldto(v",{"_index":1216,"title":{},"body":{"injectables/LiveUpdatesService.html":{}}}],["arrivalmins",{"_index":121,"title":{},"body":{"classes/ArrivalDto.html":{},"entities/LiveData.html":{},"injectables/LiveUpdatesService.html":{}}}],["arrivals",{"_index":1177,"title":{},"body":{"controllers/LiveUpdatesController.html":{},"injectables/LiveUpdatesService.html":{}}}],["arrivals.push(arrival",{"_index":1181,"title":{},"body":{"controllers/LiveUpdatesController.html":{}}}],["arrivalseconds",{"_index":122,"title":{},"body":{"classes/ArrivalDto.html":{},"entities/LiveData.html":{},"injectables/LiveUpdatesService.html":{}}}],["arrivalspromise",{"_index":1175,"title":{},"body":{"controllers/LiveUpdatesController.html":{}}}],["arrivalspromise.data",{"_index":1179,"title":{},"body":{"controllers/LiveUpdatesController.html":{}}}],["arriveby",{"_index":1000,"title":{},"body":{"classes/Itinerary.html":{},"classes/Leg.html":{},"classes/OTPParams.html":{},"classes/Plan.html":{},"classes/Step.html":{},"interfaces/TripState.html":{},"classes/Vertex.html":{}}}],["arriveby=${this.arriveby",{"_index":1328,"title":{},"body":{"classes/OTPParams.html":{},"interfaces/TripState.html":{}}}],["asc",{"_index":2046,"title":{},"body":{"injectables/TripRepository.html":{}}}],["async",{"_index":10,"title":{},"body":{"controllers/AppController.html":{},"injectables/AuthService.html":{},"injectables/BookingRepository.html":{},"injectables/BookingService.html":{},"controllers/BookingsController.html":{},"injectables/DBUpdateService.html":{},"controllers/DBupdateController.html":{},"interfaces/FeedEntity.html":{},"interfaces/FeedEntity-1.html":{},"interfaces/FeedHeader.html":{},"interfaces/FeedHeader-1.html":{},"interfaces/FeedMessage.html":{},"interfaces/FeedMessage-1.html":{},"classes/IGenericRepository.html":{},"injectables/JwtStrategy.html":{},"injectables/LineRepository.html":{},"injectables/LineService.html":{},"injectables/LiveDataRepository.html":{},"controllers/LiveUpdatesController.html":{},"injectables/LiveUpdatesService.html":{},"injectables/LocalStrategy.html":{},"interfaces/Long.html":{},"classes/NewScheduleService.html":{},"injectables/OTPService.html":{},"classes/OTPStrategy.html":{},"classes/PointRepository.html":{},"injectables/PointService.html":{},"interfaces/Position.html":{},"classes/PositionProto.html":{},"classes/RouteRepository.html":{},"injectables/RouteService.html":{},"classes/RouteStopRepository.html":{},"injectables/RouteStopService.html":{},"controllers/SavedController.html":{},"injectables/SavedService.html":{},"classes/ScheduleRepository.html":{},"injectables/ScheduleService.html":{},"classes/SingleRouteStrategy.html":{},"classes/StopRepository.html":{},"injectables/StopService.html":{},"interfaces/StopTimeEvent.html":{},"interfaces/StopTimeUpdate.html":{},"controllers/TransitController.html":{},"classes/Trip-1.html":{},"interfaces/TripDescriptor.html":{},"interfaces/TripDescriptor-1.html":{},"injectables/TripRepository.html":{},"injectables/TripService.html":{},"interfaces/TripUpdate.html":{},"injectables/TripUpdatesListener.html":{},"controllers/UserController.html":{},"injectables/UserRepository.html":{},"interfaces/VehicleDescriptor.html":{},"interfaces/VehiclePosition.html":{}}}],["auth",{"_index":53,"title":{},"body":{"controllers/AppController.html":{},"controllers/UserController.html":{}}}],["auth.guard",{"_index":43,"title":{},"body":{"controllers/AppController.html":{},"controllers/BookingsController.html":{},"controllers/SavedController.html":{},"controllers/UserController.html":{}}}],["auth.guard.ts",{"_index":1009,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"classes/LocalAuthGuard.html":{},"coverage.html":{}}}],["auth.service",{"_index":185,"title":{},"body":{"modules/AuthModule.html":{},"injectables/LocalStrategy.html":{}}}],["auth/auth.module",{"_index":103,"title":{},"body":{"modules/AppModule.html":{}}}],["auth/local",{"_index":45,"title":{},"body":{"controllers/AppController.html":{}}}],["authguard",{"_index":1010,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"classes/LocalAuthGuard.html":{}}}],["authguard('jwt",{"_index":1012,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["authguard('local",{"_index":1233,"title":{},"body":{"classes/LocalAuthGuard.html":{}}}],["authmodule",{"_index":85,"title":{"modules/AuthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules.html":{},"overview.html":{}}}],["author",{"_index":2336,"title":{},"body":{"index.html":{},"properties.html":{}}}],["authorization",{"_index":486,"title":{},"body":{"injectables/DBUpdateService.html":{},"injectables/LiveUpdatesService.html":{}}}],["authservice",{"_index":39,"title":{"injectables/AuthService.html":{}},"body":{"controllers/AppController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/LocalStrategy.html":{},"controllers/UserController.html":{},"coverage.html":{},"overview.html":{}}}],["autoloadentities",{"_index":2374,"title":{},"body":{"miscellaneous/variables.html":{}}}],["available",{"_index":373,"title":{},"body":{"injectables/BookingService.html":{}}}],["await",{"_index":59,"title":{},"body":{"controllers/AppController.html":{},"injectables/AuthService.html":{},"injectables/BookingService.html":{},"injectables/DBUpdateService.html":{},"controllers/DBupdateController.html":{},"interfaces/FeedEntity-1.html":{},"interfaces/FeedHeader-1.html":{},"interfaces/FeedMessage-1.html":{},"controllers/LiveUpdatesController.html":{},"injectables/LiveUpdatesService.html":{},"injectables/LocalStrategy.html":{},"injectables/OTPService.html":{},"injectables/SavedService.html":{},"classes/SingleRouteStrategy.html":{},"interfaces/StopTimeEvent.html":{},"interfaces/StopTimeUpdate.html":{},"controllers/TransitController.html":{},"classes/Trip-1.html":{},"interfaces/TripDescriptor-1.html":{},"injectables/TripRepository.html":{},"interfaces/TripUpdate.html":{},"injectables/TripUpdatesListener.html":{},"controllers/UserController.html":{},"injectables/UserRepository.html":{}}}],["b.trip_id",{"_index":378,"title":{},"body":{"injectables/BookingService.html":{},"injectables/TripUpdatesListener.html":{}}}],["backers",{"_index":2328,"title":{},"body":{"index.html":{}}}],["bearer",{"_index":487,"title":{},"body":{"injectables/DBUpdateService.html":{},"injectables/LiveUpdatesService.html":{}}}],["bigint",{"_index":266,"title":{},"body":{"entities/Booking.html":{},"entities/Line.html":{},"entities/NewSchedule.html":{},"entities/Point.html":{},"entities/Route.html":{},"entities/RouteStop.html":{},"entities/Schedule.html":{},"entities/Stop.html":{},"entities/Trip.html":{},"entities/User.html":{},"entities/UserRoute.html":{},"entities/UserStop.html":{}}}],["bindings",{"_index":2263,"title":{},"body":{"dependencies.html":{},"miscellaneous/variables.html":{}}}],["body",{"_index":1900,"title":{},"body":{"controllers/TransitController.html":{}}}],["body,controller,get,post,useguards,usepipes,validationpipe,request,header",{"_index":37,"title":{},"body":{"controllers/AppController.html":{},"controllers/UserController.html":{}}}],["booked",{"_index":363,"title":{},"body":{"injectables/BookingService.html":{}}}],["booking",{"_index":241,"title":{"entities/Booking.html":{}},"body":{"entities/Booking.html":{},"injectables/BookingRepository.html":{},"injectables/BookingService.html":{},"controllers/BookingsController.html":{},"injectables/OTPService.html":{},"injectables/TripUpdatesListener.html":{},"classes/UpdateTrips.html":{},"modules/UserModule.html":{},"coverage.html":{}}}],["booking.endstop",{"_index":352,"title":{},"body":{"injectables/BookingService.html":{},"injectables/OTPService.html":{},"injectables/TripUpdatesListener.html":{}}}],["booking.startstop",{"_index":351,"title":{},"body":{"injectables/BookingService.html":{},"injectables/OTPService.html":{},"injectables/TripUpdatesListener.html":{}}}],["booking.stopcodes",{"_index":368,"title":{},"body":{"injectables/BookingService.html":{},"injectables/TripUpdatesListener.html":{}}}],["booking.stopcodes.map(v",{"_index":365,"title":{},"body":{"injectables/BookingService.html":{}}}],["booking.trip_id",{"_index":350,"title":{},"body":{"injectables/BookingService.html":{},"injectables/OTPService.html":{},"injectables/TripUpdatesListener.html":{}}}],["booking.user_id",{"_index":359,"title":{},"body":{"injectables/BookingService.html":{}}}],["bookingcreated",{"_index":2068,"title":{},"body":{"injectables/TripUpdatesListener.html":{}}}],["bookingcreated(event",{"_index":2074,"title":{},"body":{"injectables/TripUpdatesListener.html":{}}}],["bookingdeleted",{"_index":2069,"title":{},"body":{"injectables/TripUpdatesListener.html":{}}}],["bookingdeleted(event",{"_index":2078,"title":{},"body":{"injectables/TripUpdatesListener.html":{}}}],["bookingrepo",{"_index":288,"title":{},"body":{"injectables/BookingRepository.html":{}}}],["bookingrepository",{"_index":272,"title":{"injectables/BookingRepository.html":{}},"body":{"injectables/BookingRepository.html":{},"injectables/BookingService.html":{},"modules/UserModule.html":{},"coverage.html":{},"overview.html":{}}}],["bookings",{"_index":339,"title":{},"body":{"injectables/BookingService.html":{},"controllers/BookingsController.html":{},"classes/UpdateTrips.html":{}}}],["bookings.map(b",{"_index":377,"title":{},"body":{"injectables/BookingService.html":{}}}],["bookingscontroller",{"_index":379,"title":{"controllers/BookingsController.html":{}},"body":{"controllers/BookingsController.html":{},"modules/UserModule.html":{},"coverage.html":{}}}],["bookingservice",{"_index":321,"title":{"injectables/BookingService.html":{}},"body":{"injectables/BookingService.html":{},"controllers/BookingsController.html":{},"modules/UserModule.html":{},"coverage.html":{},"overview.html":{}}}],["boolean",{"_index":767,"title":{},"body":{"interfaces/FeedEntity.html":{},"interfaces/FeedHeader.html":{},"interfaces/FeedMessage.html":{},"interfaces/Long.html":{},"classes/OTPParams.html":{},"interfaces/Position.html":{},"classes/PositionProto.html":{},"interfaces/TripDescriptor.html":{},"interfaces/TripState.html":{},"interfaces/VehicleDescriptor.html":{},"interfaces/VehiclePosition.html":{}}}],["bootstrap",{"_index":2222,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["browse",{"_index":2346,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":2344,"title":{},"body":{"modules.html":{}}}],["buffers",{"_index":2276,"title":{},"body":{"dependencies.html":{}}}],["builder/querypartialentity",{"_index":843,"title":{},"body":{"classes/IGenericRepository.html":{}}}],["building",{"_index":2295,"title":{},"body":{"index.html":{}}}],["buildqueryparams",{"_index":1286,"title":{},"body":{"classes/OTPParams.html":{},"interfaces/TripState.html":{}}}],["buildroute",{"_index":1245,"title":{},"body":{"interfaces/NavigatorStrategy.html":{},"classes/OTPStrategy.html":{},"classes/SingleRouteStrategy.html":{}}}],["buildroute(tripstate",{"_index":1246,"title":{},"body":{"interfaces/NavigatorStrategy.html":{},"classes/OTPStrategy.html":{},"classes/SingleRouteStrategy.html":{}}}],["bus",{"_index":1187,"title":{},"body":{"controllers/LiveUpdatesController.html":{}}}],["buses",{"_index":1185,"title":{},"body":{"controllers/LiveUpdatesController.html":{}}}],["cascade",{"_index":1489,"title":{},"body":{"entities/Route.html":{}}}],["catch(e",{"_index":489,"title":{},"body":{"injectables/DBUpdateService.html":{},"classes/IGenericRepository.html":{},"injectables/LiveUpdatesService.html":{},"classes/NewScheduleService.html":{},"classes/RouteRepository.html":{},"classes/ScheduleRepository.html":{},"classes/StopRepository.html":{},"injectables/TripRepository.html":{},"injectables/UserRepository.html":{}}}],["chunk",{"_index":853,"title":{},"body":{"classes/IGenericRepository.html":{},"classes/NewScheduleService.html":{}}}],["class",{"_index":50,"title":{"classes/ArrivalDto.html":{},"classes/Context.html":{},"classes/CreateUserDto.html":{},"classes/IGenericRepository.html":{},"classes/Itinerary.html":{},"classes/Leg.html":{},"classes/LineDto.html":{},"classes/LocalAuthGuard.html":{},"classes/NewScheduleService.html":{},"classes/OTPParams.html":{},"classes/OTPStrategy.html":{},"classes/Plan.html":{},"classes/PointDto.html":{},"classes/PointRepository.html":{},"classes/PositionProto.html":{},"classes/RouteDto.html":{},"classes/RouteInfoDto.html":{},"classes/RouteRepository.html":{},"classes/RouteStopRepository.html":{},"classes/ScheduleDayDto.html":{},"classes/ScheduleDetailsDto.html":{},"classes/ScheduleDto.html":{},"classes/ScheduleRepository.html":{},"classes/SingleRouteStrategy.html":{},"classes/Step.html":{},"classes/StopDto.html":{},"classes/StopRepository.html":{},"classes/TransitGateWay.html":{},"classes/Trip-1.html":{},"classes/UpdateTrips.html":{},"classes/Vertex.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"classes/ArrivalDto.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"entities/Booking.html":{},"injectables/BookingRepository.html":{},"injectables/BookingService.html":{},"controllers/BookingsController.html":{},"classes/Context.html":{},"classes/CreateUserDto.html":{},"injectables/DBUpdateService.html":{},"controllers/DBupdateController.html":{},"injectables/DataService.html":{},"interfaces/FeedEntity.html":{},"interfaces/FeedEntity-1.html":{},"interfaces/FeedHeader.html":{},"interfaces/FeedHeader-1.html":{},"interfaces/FeedMessage.html":{},"interfaces/FeedMessage-1.html":{},"classes/IGenericRepository.html":{},"classes/Itinerary.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/Leg.html":{},"entities/Line.html":{},"classes/LineDto.html":{},"injectables/LineRepository.html":{},"injectables/LineService.html":{},"entities/LiveData.html":{},"injectables/LiveDataRepository.html":{},"controllers/LiveUpdatesController.html":{},"injectables/LiveUpdatesService.html":{},"classes/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"interfaces/Long.html":{},"entities/NewSchedule.html":{},"classes/NewScheduleService.html":{},"classes/OTPParams.html":{},"injectables/OTPService.html":{},"classes/OTPStrategy.html":{},"classes/Plan.html":{},"entities/Point.html":{},"classes/PointDto.html":{},"classes/PointRepository.html":{},"injectables/PointService.html":{},"interfaces/Position.html":{},"classes/PositionProto.html":{},"entities/Route.html":{},"classes/RouteDto.html":{},"classes/RouteInfoDto.html":{},"classes/RouteRepository.html":{},"injectables/RouteService.html":{},"entities/RouteStop.html":{},"classes/RouteStopRepository.html":{},"injectables/RouteStopService.html":{},"controllers/SavedController.html":{},"injectables/SavedService.html":{},"entities/Schedule.html":{},"classes/ScheduleDayDto.html":{},"classes/ScheduleDetailsDto.html":{},"classes/ScheduleDto.html":{},"classes/ScheduleRepository.html":{},"injectables/ScheduleService.html":{},"classes/SingleRouteStrategy.html":{},"classes/Step.html":{},"entities/Stop.html":{},"classes/StopDto.html":{},"classes/StopRepository.html":{},"injectables/StopService.html":{},"interfaces/StopTimeEvent.html":{},"interfaces/StopTimeUpdate.html":{},"controllers/TransitController.html":{},"classes/TransitGateWay.html":{},"modules/TransitModule.html":{},"entities/Trip.html":{},"classes/Trip-1.html":{},"interfaces/TripDescriptor.html":{},"interfaces/TripDescriptor-1.html":{},"injectables/TripRepository.html":{},"injectables/TripService.html":{},"interfaces/TripState.html":{},"interfaces/TripUpdate.html":{},"injectables/TripUpdatesListener.html":{},"classes/UpdateTrips.html":{},"entities/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserRepository.html":{},"entities/UserRoute.html":{},"injectables/UserService.html":{},"entities/UserStop.html":{},"interfaces/VehicleDescriptor.html":{},"interfaces/VehiclePosition.html":{},"classes/Vertex.html":{},"coverage.html":{},"dependencies.html":{}}}],["classes",{"_index":118,"title":{},"body":{"classes/ArrivalDto.html":{},"classes/Context.html":{},"classes/CreateUserDto.html":{},"classes/IGenericRepository.html":{},"classes/Itinerary.html":{},"classes/Leg.html":{},"classes/LineDto.html":{},"classes/LocalAuthGuard.html":{},"classes/NewScheduleService.html":{},"classes/OTPParams.html":{},"classes/OTPStrategy.html":{},"classes/Plan.html":{},"classes/PointDto.html":{},"classes/PointRepository.html":{},"classes/PositionProto.html":{},"classes/RouteDto.html":{},"classes/RouteInfoDto.html":{},"classes/RouteRepository.html":{},"classes/RouteStopRepository.html":{},"classes/ScheduleDayDto.html":{},"classes/ScheduleDetailsDto.html":{},"classes/ScheduleDto.html":{},"classes/ScheduleRepository.html":{},"classes/SingleRouteStrategy.html":{},"classes/Step.html":{},"classes/StopDto.html":{},"classes/StopRepository.html":{},"classes/TransitGateWay.html":{},"classes/Trip-1.html":{},"classes/UpdateTrips.html":{},"classes/Vertex.html":{},"overview.html":{}}}],["client",{"_index":1936,"title":{},"body":{"classes/TransitGateWay.html":{}}}],["client.join(client.id",{"_index":1950,"title":{},"body":{"classes/TransitGateWay.html":{}}}],["client.leave(client.id",{"_index":1954,"title":{},"body":{"classes/TransitGateWay.html":{}}}],["cluster_appmodule",{"_index":83,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":84,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_authmodule",{"_index":169,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_exports",{"_index":171,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_imports",{"_index":170,"title":{},"body":{"modules/AuthModule.html":{}}}],["cluster_authmodule_providers",{"_index":172,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_transitmodule",{"_index":1955,"title":{},"body":{"modules/TransitModule.html":{},"overview.html":{}}}],["cluster_transitmodule_exports",{"_index":1956,"title":{},"body":{"modules/TransitModule.html":{},"overview.html":{}}}],["cluster_transitmodule_providers",{"_index":1957,"title":{},"body":{"modules/TransitModule.html":{},"overview.html":{}}}],["cluster_usermodule",{"_index":2131,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["cluster_usermodule_exports",{"_index":2134,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["cluster_usermodule_imports",{"_index":2133,"title":{},"body":{"modules/UserModule.html":{}}}],["cluster_usermodule_providers",{"_index":2132,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["code",{"_index":466,"title":{},"body":{"injectables/DBUpdateService.html":{},"controllers/LiveUpdatesController.html":{},"injectables/LiveUpdatesService.html":{},"entities/Point.html":{},"entities/Route.html":{},"classes/RouteDto.html":{},"classes/RouteInfoDto.html":{},"controllers/SavedController.html":{},"injectables/SavedService.html":{},"classes/ScheduleDetailsDto.html":{},"entities/Stop.html":{},"classes/StopDto.html":{},"classes/StopRepository.html":{},"injectables/StopService.html":{},"controllers/TransitController.html":{},"injectables/UserRepository.html":{}}}],["codes",{"_index":1538,"title":{},"body":{"classes/RouteRepository.html":{},"injectables/RouteService.html":{},"injectables/TripRepository.html":{}}}],["column",{"_index":270,"title":{},"body":{"entities/Booking.html":{},"entities/Line.html":{},"entities/LiveData.html":{},"entities/NewSchedule.html":{},"entities/Point.html":{},"entities/Route.html":{},"entities/RouteStop.html":{},"entities/Schedule.html":{},"entities/Stop.html":{},"entities/Trip.html":{},"entities/User.html":{},"entities/UserRoute.html":{},"entities/UserStop.html":{}}}],["column('simple",{"_index":1495,"title":{},"body":{"entities/Route.html":{},"entities/Stop.html":{}}}],["column({nullable",{"_index":254,"title":{},"body":{"entities/Booking.html":{},"entities/Line.html":{},"entities/LiveData.html":{},"entities/NewSchedule.html":{},"entities/Point.html":{},"entities/Route.html":{},"entities/Schedule.html":{},"entities/Stop.html":{},"entities/Trip.html":{},"entities/User.html":{}}}],["column({type",{"_index":1072,"title":{},"body":{"entities/Line.html":{},"entities/NewSchedule.html":{},"entities/RouteStop.html":{},"entities/Schedule.html":{},"entities/UserRoute.html":{}}}],["configmodule",{"_index":93,"title":{},"body":{"modules/AppModule.html":{}}}],["configmodule.forroot({isglobal",{"_index":112,"title":{},"body":{"modules/AppModule.html":{}}}],["configurations/config",{"_index":99,"title":{},"body":{"modules/AppModule.html":{}}}],["connection",{"_index":1952,"title":{},"body":{"classes/TransitGateWay.html":{}}}],["console.log(e",{"_index":851,"title":{},"body":{"classes/IGenericRepository.html":{},"classes/NewScheduleService.html":{},"injectables/OTPService.html":{},"classes/RouteRepository.html":{},"classes/ScheduleRepository.html":{},"classes/StopRepository.html":{},"injectables/TripRepository.html":{},"injectables/UserRepository.html":{}}}],["console.log(e.code",{"_index":490,"title":{},"body":{"injectables/DBUpdateService.html":{}}}],["console.log(e.detail",{"_index":849,"title":{},"body":{"classes/IGenericRepository.html":{}}}],["const",{"_index":57,"title":{},"body":{"controllers/AppController.html":{},"injectables/AuthService.html":{},"injectables/BookingService.html":{},"controllers/DBupdateController.html":{},"interfaces/FeedEntity-1.html":{},"interfaces/FeedHeader-1.html":{},"interfaces/FeedMessage-1.html":{},"classes/Itinerary.html":{},"classes/Leg.html":{},"controllers/LiveUpdatesController.html":{},"injectables/LiveUpdatesService.html":{},"injectables/LocalStrategy.html":{},"classes/OTPParams.html":{},"injectables/OTPService.html":{},"classes/Plan.html":{},"injectables/SavedService.html":{},"classes/SingleRouteStrategy.html":{},"classes/Step.html":{},"interfaces/StopTimeEvent.html":{},"interfaces/StopTimeUpdate.html":{},"controllers/TransitController.html":{},"classes/Trip-1.html":{},"interfaces/TripDescriptor-1.html":{},"injectables/TripRepository.html":{},"interfaces/TripState.html":{},"interfaces/TripUpdate.html":{},"injectables/TripUpdatesListener.html":{},"controllers/UserController.html":{},"classes/Vertex.html":{}}}],["constructor",{"_index":132,"title":{},"body":{"classes/ArrivalDto.html":{},"injectables/AuthService.html":{},"injectables/BookingRepository.html":{},"injectables/BookingService.html":{},"injectables/DBUpdateService.html":{},"controllers/DBupdateController.html":{},"injectables/DataService.html":{},"interfaces/FeedEntity.html":{},"interfaces/FeedHeader.html":{},"interfaces/FeedMessage.html":{},"classes/IGenericRepository.html":{},"classes/Itinerary.html":{},"injectables/JwtStrategy.html":{},"classes/Leg.html":{},"injectables/LineRepository.html":{},"injectables/LineService.html":{},"injectables/LiveDataRepository.html":{},"injectables/LiveUpdatesService.html":{},"injectables/LocalStrategy.html":{},"interfaces/Long.html":{},"classes/NewScheduleService.html":{},"classes/OTPParams.html":{},"injectables/OTPService.html":{},"classes/Plan.html":{},"classes/PointRepository.html":{},"injectables/PointService.html":{},"interfaces/Position.html":{},"classes/PositionProto.html":{},"classes/RouteInfoDto.html":{},"classes/RouteRepository.html":{},"injectables/RouteService.html":{},"classes/RouteStopRepository.html":{},"injectables/RouteStopService.html":{},"injectables/SavedService.html":{},"classes/ScheduleDetailsDto.html":{},"classes/ScheduleRepository.html":{},"injectables/ScheduleService.html":{},"classes/Step.html":{},"classes/StopRepository.html":{},"injectables/StopService.html":{},"classes/TransitGateWay.html":{},"classes/Trip-1.html":{},"interfaces/TripDescriptor.html":{},"injectables/TripRepository.html":{},"injectables/TripService.html":{},"injectables/TripUpdatesListener.html":{},"classes/UpdateTrips.html":{},"injectables/UserRepository.html":{},"injectables/UserService.html":{},"interfaces/VehicleDescriptor.html":{},"interfaces/VehiclePosition.html":{},"classes/Vertex.html":{}}}],["constructor(@injectrepository(booking",{"_index":313,"title":{},"body":{"injectables/BookingRepository.html":{}}}],["constructor(@injectrepository(livedata",{"_index":1142,"title":{},"body":{"injectables/LiveDataRepository.html":{}}}],["constructor(@injectrepository(newschedule",{"_index":1271,"title":{},"body":{"classes/NewScheduleService.html":{}}}],["constructor(@injectrepository(point",{"_index":1465,"title":{},"body":{"classes/PointRepository.html":{}}}],["constructor(@injectrepository(stop",{"_index":1840,"title":{},"body":{"classes/StopRepository.html":{}}}],["constructor(@injectrepository(trip",{"_index":2035,"title":{},"body":{"injectables/TripRepository.html":{}}}],["constructor(arr",{"_index":133,"title":{},"body":{"classes/ArrivalDto.html":{}}}],["constructor(authservice",{"_index":1235,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["constructor(bookingrepo",{"_index":285,"title":{},"body":{"injectables/BookingRepository.html":{}}}],["constructor(bookings",{"_index":2101,"title":{},"body":{"classes/UpdateTrips.html":{}}}],["constructor(entityrepository",{"_index":826,"title":{},"body":{"classes/IGenericRepository.html":{}}}],["constructor(http",{"_index":461,"title":{},"body":{"injectables/DBUpdateService.html":{},"injectables/LiveUpdatesService.html":{},"injectables/OTPService.html":{}}}],["constructor(init",{"_index":1287,"title":{},"body":{"classes/OTPParams.html":{},"interfaces/TripState.html":{}}}],["constructor(io",{"_index":2071,"title":{},"body":{"injectables/TripUpdatesListener.html":{}}}],["constructor(it",{"_index":869,"title":{},"body":{"classes/Itinerary.html":{},"classes/Leg.html":{},"classes/Plan.html":{},"classes/Step.html":{},"classes/Vertex.html":{}}}],["constructor(leg",{"_index":942,"title":{},"body":{"classes/Itinerary.html":{},"classes/Leg.html":{},"classes/Plan.html":{},"classes/Step.html":{},"classes/Vertex.html":{}}}],["constructor(linerepo",{"_index":1092,"title":{},"body":{"injectables/LineRepository.html":{}}}],["constructor(linesservice",{"_index":697,"title":{},"body":{"injectables/DataService.html":{}}}],["constructor(live",{"_index":798,"title":{},"body":{"interfaces/FeedEntity-1.html":{},"interfaces/FeedHeader-1.html":{},"interfaces/FeedMessage-1.html":{},"interfaces/StopTimeEvent.html":{},"interfaces/StopTimeUpdate.html":{},"classes/Trip-1.html":{},"interfaces/TripDescriptor-1.html":{},"interfaces/TripUpdate.html":{}}}],["constructor(plan",{"_index":1002,"title":{},"body":{"classes/Itinerary.html":{},"classes/Leg.html":{},"classes/Plan.html":{},"classes/Step.html":{},"classes/Vertex.html":{}}}],["constructor(pointrepo",{"_index":1457,"title":{},"body":{"classes/PointRepository.html":{}}}],["constructor(private",{"_index":51,"title":{},"body":{"controllers/AppController.html":{},"injectables/AuthService.html":{},"controllers/BookingsController.html":{},"injectables/DBUpdateService.html":{},"injectables/LineService.html":{},"controllers/LiveUpdatesController.html":{},"injectables/LiveUpdatesService.html":{},"injectables/LocalStrategy.html":{},"injectables/OTPService.html":{},"injectables/PointService.html":{},"injectables/RouteService.html":{},"injectables/RouteStopService.html":{},"controllers/SavedController.html":{},"injectables/SavedService.html":{},"injectables/ScheduleService.html":{},"injectables/StopService.html":{},"controllers/TransitController.html":{},"injectables/TripService.html":{},"injectables/TripUpdatesListener.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["constructor(repo",{"_index":326,"title":{},"body":{"injectables/BookingService.html":{},"injectables/LineService.html":{},"injectables/LiveDataRepository.html":{},"classes/NewScheduleService.html":{},"injectables/PointService.html":{},"injectables/RouteService.html":{},"injectables/RouteStopService.html":{},"injectables/SavedService.html":{},"injectables/ScheduleService.html":{},"injectables/StopService.html":{},"injectables/TripService.html":{},"injectables/UserService.html":{}}}],["constructor(routerepo",{"_index":1524,"title":{},"body":{"classes/RouteRepository.html":{}}}],["constructor(rsrepo",{"_index":1598,"title":{},"body":{"classes/RouteStopRepository.html":{}}}],["constructor(sch",{"_index":1718,"title":{},"body":{"classes/ScheduleDetailsDto.html":{}}}],["constructor(schedulerepo",{"_index":1744,"title":{},"body":{"classes/ScheduleRepository.html":{}}}],["constructor(step",{"_index":896,"title":{},"body":{"classes/Itinerary.html":{},"classes/Leg.html":{},"classes/Plan.html":{},"classes/Step.html":{},"classes/Vertex.html":{}}}],["constructor(stoprepo",{"_index":1826,"title":{},"body":{"classes/StopRepository.html":{}}}],["constructor(stops",{"_index":1512,"title":{},"body":{"classes/RouteDto.html":{},"classes/RouteInfoDto.html":{}}}],["constructor(triprepo",{"_index":2016,"title":{},"body":{"injectables/TripRepository.html":{}}}],["constructor(userrepo",{"_index":2148,"title":{},"body":{"injectables/UserRepository.html":{}}}],["constructor(usersservice",{"_index":200,"title":{},"body":{"injectables/AuthService.html":{}}}],["constructor(v",{"_index":914,"title":{},"body":{"classes/Itinerary.html":{},"classes/Leg.html":{},"classes/Plan.html":{},"classes/Step.html":{},"classes/Vertex.html":{}}}],["context",{"_index":414,"title":{"classes/Context.html":{}},"body":{"classes/Context.html":{},"modules/TransitModule.html":{},"coverage.html":{}}}],["continue",{"_index":1220,"title":{},"body":{"injectables/LiveUpdatesService.html":{},"injectables/OTPService.html":{}}}],["controller",{"_index":0,"title":{"controllers/AppController.html":{},"controllers/BookingsController.html":{},"controllers/DBupdateController.html":{},"controllers/LiveUpdatesController.html":{},"controllers/SavedController.html":{},"controllers/TransitController.html":{},"controllers/UserController.html":{}},"body":{"controllers/AppController.html":{},"controllers/DBupdateController.html":{},"controllers/LiveUpdatesController.html":{},"controllers/TransitController.html":{},"controllers/UserController.html":{},"coverage.html":{}}}],["controller('bookings",{"_index":401,"title":{},"body":{"controllers/BookingsController.html":{}}}],["controller('live",{"_index":1168,"title":{},"body":{"controllers/LiveUpdatesController.html":{}}}],["controller('saved",{"_index":1640,"title":{},"body":{"controllers/SavedController.html":{}}}],["controller('transitapi",{"_index":1903,"title":{},"body":{"controllers/TransitController.html":{}}}],["controller('update",{"_index":552,"title":{},"body":{"controllers/DBupdateController.html":{}}}],["controller,post,header,useguards,request",{"_index":397,"title":{},"body":{"controllers/BookingsController.html":{},"controllers/SavedController.html":{}}}],["controllers",{"_index":2,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/BookingsController.html":{},"controllers/DBupdateController.html":{},"controllers/LiveUpdatesController.html":{},"controllers/SavedController.html":{},"controllers/TransitController.html":{},"modules/TransitModule.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["controllers/bookings.controller",{"_index":2136,"title":{},"body":{"modules/UserModule.html":{}}}],["controllers/db.update.controller",{"_index":1961,"title":{},"body":{"modules/TransitModule.html":{}}}],["controllers/live.updates.controller",{"_index":1962,"title":{},"body":{"modules/TransitModule.html":{}}}],["controllers/saved.controller",{"_index":2140,"title":{},"body":{"modules/UserModule.html":{}}}],["controllers/transit.controller",{"_index":1960,"title":{},"body":{"modules/TransitModule.html":{}}}],["coverage",{"_index":2210,"title":{"coverage.html":{}},"body":{"coverage.html":{},"index.html":{}}}],["createdatecolumn",{"_index":1131,"title":{},"body":{"entities/LiveData.html":{}}}],["createproto",{"_index":1477,"title":{},"body":{"classes/PositionProto.html":{}}}],["createproto(data",{"_index":775,"title":{},"body":{"interfaces/FeedEntity.html":{},"interfaces/FeedHeader.html":{},"interfaces/FeedMessage.html":{},"interfaces/Long.html":{},"interfaces/Position.html":{},"classes/PositionProto.html":{},"interfaces/TripDescriptor.html":{},"interfaces/VehicleDescriptor.html":{},"interfaces/VehiclePosition.html":{}}}],["createquerybuilder",{"_index":847,"title":{},"body":{"classes/IGenericRepository.html":{},"classes/NewScheduleService.html":{},"injectables/TripRepository.html":{},"injectables/UserRepository.html":{}}}],["createtmessage",{"_index":1991,"title":{},"body":{"classes/Trip-1.html":{}}}],["createtmessage(sch",{"_index":819,"title":{},"body":{"interfaces/FeedEntity-1.html":{},"interfaces/FeedHeader-1.html":{},"interfaces/FeedMessage-1.html":{},"interfaces/StopTimeEvent.html":{},"interfaces/StopTimeUpdate.html":{},"classes/Trip-1.html":{},"interfaces/TripDescriptor-1.html":{},"interfaces/TripUpdate.html":{}}}],["createuser",{"_index":11,"title":{},"body":{"controllers/AppController.html":{},"injectables/AuthService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["createuser(@body",{"_index":56,"title":{},"body":{"controllers/AppController.html":{},"controllers/UserController.html":{}}}],["createuser(data",{"_index":14,"title":{},"body":{"controllers/AppController.html":{},"controllers/UserController.html":{}}}],["createuser(user",{"_index":204,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UserService.html":{}}}],["createuserdto",{"_index":437,"title":{"classes/CreateUserDto.html":{}},"body":{"classes/CreateUserDto.html":{},"coverage.html":{}}}],["credentials",{"_index":228,"title":{},"body":{"injectables/AuthService.html":{}}}],["currentstopsequence",{"_index":770,"title":{},"body":{"interfaces/FeedEntity.html":{},"interfaces/FeedHeader.html":{},"interfaces/FeedMessage.html":{},"interfaces/Long.html":{},"interfaces/Position.html":{},"classes/PositionProto.html":{},"interfaces/TripDescriptor.html":{},"interfaces/VehicleDescriptor.html":{},"interfaces/VehiclePosition.html":{}}}],["data",{"_index":25,"title":{},"body":{"controllers/AppController.html":{},"injectables/BookingRepository.html":{},"injectables/BookingService.html":{},"controllers/BookingsController.html":{},"controllers/DBupdateController.html":{},"interfaces/FeedEntity-1.html":{},"interfaces/FeedHeader-1.html":{},"interfaces/FeedMessage-1.html":{},"classes/IGenericRepository.html":{},"injectables/LineRepository.html":{},"injectables/LiveDataRepository.html":{},"controllers/LiveUpdatesController.html":{},"injectables/LiveUpdatesService.html":{},"classes/NewScheduleService.html":{},"injectables/OTPService.html":{},"classes/PointRepository.html":{},"classes/PositionProto.html":{},"classes/RouteRepository.html":{},"classes/RouteStopRepository.html":{},"injectables/SavedService.html":{},"classes/ScheduleRepository.html":{},"classes/StopRepository.html":{},"interfaces/StopTimeEvent.html":{},"interfaces/StopTimeUpdate.html":{},"controllers/TransitController.html":{},"classes/Trip-1.html":{},"interfaces/TripDescriptor-1.html":{},"injectables/TripRepository.html":{},"interfaces/TripUpdate.html":{},"classes/UpdateTrips.html":{},"controllers/UserController.html":{},"injectables/UserRepository.html":{}}}],["data.plan",{"_index":1375,"title":{},"body":{"injectables/OTPService.html":{}}}],["data.service",{"_index":1207,"title":{},"body":{"injectables/LiveUpdatesService.html":{}}}],["data.vehiclelng",{"_index":1193,"title":{},"body":{"controllers/LiveUpdatesController.html":{}}}],["data.vehicles",{"_index":817,"title":{},"body":{"interfaces/FeedEntity-1.html":{},"interfaces/FeedHeader-1.html":{},"interfaces/FeedMessage-1.html":{},"interfaces/StopTimeEvent.html":{},"interfaces/StopTimeUpdate.html":{},"classes/Trip-1.html":{},"interfaces/TripDescriptor-1.html":{},"interfaces/TripUpdate.html":{}}}],["database",{"_index":2371,"title":{},"body":{"miscellaneous/variables.html":{}}}],["dataservice",{"_index":327,"title":{"injectables/DataService.html":{}},"body":{"injectables/BookingService.html":{},"controllers/BookingsController.html":{},"controllers/DBupdateController.html":{},"injectables/DataService.html":{},"interfaces/FeedEntity-1.html":{},"interfaces/FeedHeader-1.html":{},"interfaces/FeedMessage-1.html":{},"controllers/LiveUpdatesController.html":{},"injectables/LiveUpdatesService.html":{},"injectables/SavedService.html":{},"interfaces/StopTimeEvent.html":{},"interfaces/StopTimeUpdate.html":{},"controllers/TransitController.html":{},"modules/TransitModule.html":{},"classes/Trip-1.html":{},"interfaces/TripDescriptor-1.html":{},"interfaces/TripUpdate.html":{},"classes/UpdateTrips.html":{},"coverage.html":{},"overview.html":{}}}],["datasource",{"_index":827,"title":{},"body":{"classes/IGenericRepository.html":{},"injectables/LineRepository.html":{},"classes/NewScheduleService.html":{},"classes/PointRepository.html":{},"classes/RouteRepository.html":{},"classes/ScheduleRepository.html":{},"classes/StopRepository.html":{},"injectables/TripRepository.html":{},"injectables/UserRepository.html":{}}}],["date",{"_index":930,"title":{},"body":{"classes/Itinerary.html":{},"classes/Leg.html":{},"classes/OTPParams.html":{},"classes/Plan.html":{},"classes/Step.html":{},"interfaces/TripState.html":{},"classes/Vertex.html":{}}}],["date(date",{"_index":1339,"title":{},"body":{"classes/OTPParams.html":{},"interfaces/TripState.html":{}}}],["date(plan.date).tolocalestring",{"_index":1004,"title":{},"body":{"classes/Itinerary.html":{},"classes/Leg.html":{},"classes/Plan.html":{},"classes/Step.html":{},"classes/Vertex.html":{}}}],["date(time).tolocaletimestring().split",{"_index":931,"title":{},"body":{"classes/Itinerary.html":{},"classes/Leg.html":{},"classes/Plan.html":{},"classes/Step.html":{},"classes/Vertex.html":{}}}],["date.now",{"_index":823,"title":{},"body":{"interfaces/FeedEntity-1.html":{},"interfaces/FeedHeader-1.html":{},"interfaces/FeedMessage-1.html":{},"interfaces/StopTimeEvent.html":{},"interfaces/StopTimeUpdate.html":{},"classes/Trip-1.html":{},"interfaces/TripDescriptor-1.html":{},"interfaces/TripUpdate.html":{}}}],["date=${this.date",{"_index":1327,"title":{},"body":{"classes/OTPParams.html":{},"interfaces/TripState.html":{}}}],["date[0",{"_index":932,"title":{},"body":{"classes/Itinerary.html":{},"classes/Leg.html":{},"classes/Plan.html":{},"classes/Step.html":{},"classes/Vertex.html":{}}}],["date[1",{"_index":933,"title":{},"body":{"classes/Itinerary.html":{},"classes/Leg.html":{},"classes/Plan.html":{},"classes/Step.html":{},"classes/Vertex.html":{}}}],["day",{"_index":814,"title":{},"body":{"interfaces/FeedEntity-1.html":{},"interfaces/FeedHeader-1.html":{},"interfaces/FeedMessage-1.html":{},"entities/NewSchedule.html":{},"classes/OTPParams.html":{},"entities/Schedule.html":{},"classes/ScheduleRepository.html":{},"injectables/ScheduleService.html":{},"interfaces/StopTimeEvent.html":{},"interfaces/StopTimeUpdate.html":{},"classes/Trip-1.html":{},"interfaces/TripDescriptor-1.html":{},"injectables/TripRepository.html":{},"injectables/TripService.html":{},"interfaces/TripState.html":{},"interfaces/TripUpdate.html":{}}}],["day.length",{"_index":1346,"title":{},"body":{"classes/OTPParams.html":{},"interfaces/TripState.html":{}}}],["db",{"_index":553,"title":{},"body":{"controllers/DBupdateController.html":{},"classes/IGenericRepository.html":{},"injectables/LineRepository.html":{},"classes/ScheduleRepository.html":{},"injectables/UserRepository.html":{}}}],["dbconnectionproperties",{"_index":98,"title":{},"body":{"modules/AppModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["dbupdatecontroller",{"_index":495,"title":{"controllers/DBupdateController.html":{}},"body":{"controllers/DBupdateController.html":{},"modules/TransitModule.html":{},"coverage.html":{}}}],["dbupdateservice",{"_index":451,"title":{"injectables/DBUpdateService.html":{}},"body":{"injectables/DBUpdateService.html":{},"controllers/DBupdateController.html":{},"modules/TransitModule.html":{},"coverage.html":{},"overview.html":{}}}],["debarkation",{"_index":1977,"title":{},"body":{"entities/Trip.html":{},"injectables/TripRepository.html":{}}}],["debugitineraryfilter",{"_index":1276,"title":{},"body":{"classes/OTPParams.html":{},"interfaces/TripState.html":{}}}],["debugitineraryfilter=${this.debugitineraryfilter",{"_index":1335,"title":{},"body":{"classes/OTPParams.html":{},"interfaces/TripState.html":{}}}],["decorators",{"_index":16,"title":{},"body":{"controllers/AppController.html":{},"entities/Booking.html":{},"controllers/BookingsController.html":{},"classes/CreateUserDto.html":{},"controllers/DBupdateController.html":{},"entities/Line.html":{},"entities/LiveData.html":{},"controllers/LiveUpdatesController.html":{},"entities/NewSchedule.html":{},"entities/Point.html":{},"entities/Route.html":{},"entities/RouteStop.html":{},"controllers/SavedController.html":{},"entities/Schedule.html":{},"entities/Stop.html":{},"controllers/TransitController.html":{},"classes/TransitGateWay.html":{},"entities/Trip.html":{},"injectables/TripUpdatesListener.html":{},"entities/User.html":{},"controllers/UserController.html":{},"entities/UserRoute.html":{},"entities/UserStop.html":{}}}],["default",{"_index":473,"title":{},"body":{"injectables/DBUpdateService.html":{},"interfaces/FeedEntity-1.html":{},"interfaces/FeedHeader-1.html":{},"interfaces/FeedMessage-1.html":{},"classes/Leg.html":{},"injectables/LiveUpdatesService.html":{},"classes/OTPParams.html":{},"injectables/OTPService.html":{},"interfaces/StopTimeEvent.html":{},"interfaces/StopTimeUpdate.html":{},"classes/Trip-1.html":{},"interfaces/TripDescriptor-1.html":{},"interfaces/TripUpdate.html":{},"miscellaneous/variables.html":{}}}],["defaulttrip",{"_index":789,"title":{},"body":{"interfaces/FeedEntity-1.html":{},"interfaces/FeedHeader-1.html":{},"interfaces/FeedMessage-1.html":{},"interfaces/StopTimeEvent.html":{},"interfaces/StopTimeUpdate.html":{},"classes/Trip-1.html":{},"interfaces/TripDescriptor-1.html":{},"interfaces/TripUpdate.html":{}}}],["defined",{"_index":19,"title":{},"body":{"controllers/AppController.html":{},"classes/ArrivalDto.html":{},"injectables/AuthService.html":{},"entities/Booking.html":{},"injectables/BookingRepository.html":{},"injectables/BookingService.html":{},"controllers/BookingsController.html":{},"classes/Context.html":{},"classes/CreateUserDto.html":{},"injectables/DBUpdateService.html":{},"controllers/DBupdateController.html":{},"injectables/DataService.html":{},"classes/IGenericRepository.html":{},"classes/Itinerary.html":{},"injectables/JwtStrategy.html":{},"classes/Leg.html":{},"entities/Line.html":{},"classes/LineDto.html":{},"injectables/LineRepository.html":{},"injectables/LineService.html":{},"entities/LiveData.html":{},"injectables/LiveDataRepository.html":{},"controllers/LiveUpdatesController.html":{},"injectables/LiveUpdatesService.html":{},"injectables/LocalStrategy.html":{},"interfaces/NavigatorStrategy.html":{},"entities/NewSchedule.html":{},"classes/NewScheduleService.html":{},"classes/OTPParams.html":{},"injectables/OTPService.html":{},"classes/OTPStrategy.html":{},"classes/Plan.html":{},"entities/Point.html":{},"classes/PointDto.html":{},"classes/PointRepository.html":{},"injectables/PointService.html":{},"classes/PositionProto.html":{},"entities/Route.html":{},"classes/RouteDto.html":{},"classes/RouteInfoDto.html":{},"classes/RouteRepository.html":{},"injectables/RouteService.html":{},"entities/RouteStop.html":{},"classes/RouteStopRepository.html":{},"injectables/RouteStopService.html":{},"controllers/SavedController.html":{},"injectables/SavedService.html":{},"entities/Schedule.html":{},"classes/ScheduleDayDto.html":{},"classes/ScheduleDetailsDto.html":{},"classes/ScheduleDto.html":{},"classes/ScheduleRepository.html":{},"injectables/ScheduleService.html":{},"classes/SingleRouteStrategy.html":{},"classes/Step.html":{},"entities/Stop.html":{},"classes/StopDto.html":{},"classes/StopRepository.html":{},"injectables/StopService.html":{},"controllers/TransitController.html":{},"classes/TransitGateWay.html":{},"entities/Trip.html":{},"classes/Trip-1.html":{},"injectables/TripRepository.html":{},"injectables/TripService.html":{},"injectables/TripUpdatesListener.html":{},"classes/UpdateTrips.html":{},"entities/User.html":{},"controllers/UserController.html":{},"injectables/UserRepository.html":{},"entities/UserRoute.html":{},"injectables/UserService.html":{},"entities/UserStop.html":{},"classes/Vertex.html":{}}}],["delay",{"_index":783,"title":{},"body":{"interfaces/FeedEntity-1.html":{},"interfaces/FeedHeader-1.html":{},"interfaces/FeedMessage-1.html":{},"interfaces/StopTimeEvent.html":{},"interfaces/StopTimeUpdate.html":{},"classes/Trip-1.html":{},"interfaces/TripDescriptor-1.html":{},"interfaces/TripUpdate.html":{}}}],["delete",{"_index":276,"title":{},"body":{"injectables/BookingRepository.html":{},"controllers/BookingsController.html":{},"classes/IGenericRepository.html":{},"injectables/UserRepository.html":{}}}],["delete(user_id",{"_index":289,"title":{},"body":{"injectables/BookingRepository.html":{}}}],["deletebooking",{"_index":323,"title":{},"body":{"injectables/BookingService.html":{},"controllers/BookingsController.html":{},"controllers/SavedController.html":{}}}],["deletebooking(@request",{"_index":406,"title":{},"body":{"controllers/BookingsController.html":{},"controllers/SavedController.html":{}}}],["deletebooking(booking",{"_index":332,"title":{},"body":{"injectables/BookingService.html":{}}}],["deletebooking(req",{"_index":384,"title":{},"body":{"controllers/BookingsController.html":{},"controllers/SavedController.html":{}}}],["deleteline",{"_index":1615,"title":{},"body":{"controllers/SavedController.html":{}}}],["deleteline(@request",{"_index":1652,"title":{},"body":{"controllers/SavedController.html":{}}}],["deleteline(req",{"_index":1626,"title":{},"body":{"controllers/SavedController.html":{}}}],["deleteone",{"_index":281,"title":{},"body":{"injectables/BookingRepository.html":{},"classes/IGenericRepository.html":{},"injectables/LineRepository.html":{},"injectables/LiveDataRepository.html":{},"classes/PointRepository.html":{},"classes/RouteRepository.html":{},"classes/RouteStopRepository.html":{},"classes/ScheduleRepository.html":{},"classes/StopRepository.html":{},"injectables/TripRepository.html":{},"injectables/UserRepository.html":{}}}],["deleteone(spec",{"_index":300,"title":{},"body":{"injectables/BookingRepository.html":{},"classes/IGenericRepository.html":{},"injectables/LineRepository.html":{},"injectables/LiveDataRepository.html":{},"classes/PointRepository.html":{},"classes/RouteRepository.html":{},"classes/RouteStopRepository.html":{},"classes/ScheduleRepository.html":{},"classes/StopRepository.html":{},"injectables/TripRepository.html":{},"injectables/UserRepository.html":{}}}],["deleteroute",{"_index":1664,"title":{},"body":{"injectables/SavedService.html":{},"injectables/UserRepository.html":{}}}],["deleteroute(route_code",{"_index":2151,"title":{},"body":{"injectables/UserRepository.html":{}}}],["deleteroute(user",{"_index":1671,"title":{},"body":{"injectables/SavedService.html":{}}}],["deletestop",{"_index":1665,"title":{},"body":{"injectables/SavedService.html":{},"injectables/UserRepository.html":{}}}],["deletestop(code",{"_index":1673,"title":{},"body":{"injectables/SavedService.html":{},"injectables/UserRepository.html":{}}}],["depart",{"_index":1321,"title":{},"body":{"classes/OTPParams.html":{},"interfaces/TripState.html":{}}}],["departure",{"_index":787,"title":{},"body":{"interfaces/FeedEntity-1.html":{},"interfaces/FeedHeader-1.html":{},"interfaces/FeedMessage-1.html":{},"classes/Itinerary.html":{},"classes/Leg.html":{},"classes/Plan.html":{},"classes/Step.html":{},"interfaces/StopTimeEvent.html":{},"interfaces/StopTimeUpdate.html":{},"classes/Trip-1.html":{},"interfaces/TripDescriptor-1.html":{},"interfaces/TripUpdate.html":{},"classes/Vertex.html":{}}}],["departuredelay",{"_index":860,"title":{},"body":{"classes/Itinerary.html":{},"classes/Leg.html":{},"classes/Plan.html":{},"classes/Step.html":{},"classes/Vertex.html":{}}}],["departuremins",{"_index":123,"title":{},"body":{"classes/ArrivalDto.html":{},"entities/LiveData.html":{}}}],["departureseconds",{"_index":124,"title":{},"body":{"classes/ArrivalDto.html":{},"entities/LiveData.html":{}}}],["dependencies",{"_index":82,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/TransitModule.html":{},"modules/UserModule.html":{},"dependencies.html":{},"overview.html":{}}}],["desc",{"_index":1062,"title":{},"body":{"entities/Line.html":{},"classes/LineDto.html":{},"entities/Route.html":{},"classes/RouteDto.html":{},"classes/RouteInfoDto.html":{},"entities/Stop.html":{},"classes/StopDto.html":{},"classes/StopRepository.html":{}}}],["desc_eng",{"_index":1063,"title":{},"body":{"entities/Line.html":{},"classes/LineDto.html":{},"entities/Route.html":{},"classes/RouteDto.html":{},"classes/RouteInfoDto.html":{},"entities/Stop.html":{},"classes/StopDto.html":{},"classes/StopRepository.html":{}}}],["description",{"_index":2300,"title":{},"body":{"index.html":{},"properties.html":{}}}],["destination",{"_index":1310,"title":{},"body":{"classes/OTPParams.html":{},"interfaces/TripState.html":{}}}],["development",{"_index":2308,"title":{},"body":{"index.html":{}}}],["direction",{"_index":1311,"title":{},"body":{"classes/OTPParams.html":{},"entities/Route.html":{},"classes/RouteDto.html":{},"classes/RouteInfoDto.html":{},"interfaces/TripState.html":{}}}],["directionid",{"_index":761,"title":{},"body":{"interfaces/FeedEntity.html":{},"interfaces/FeedEntity-1.html":{},"interfaces/FeedHeader.html":{},"interfaces/FeedHeader-1.html":{},"interfaces/FeedMessage.html":{},"interfaces/FeedMessage-1.html":{},"interfaces/Long.html":{},"interfaces/Position.html":{},"classes/PositionProto.html":{},"interfaces/StopTimeEvent.html":{},"interfaces/StopTimeUpdate.html":{},"classes/Trip-1.html":{},"interfaces/TripDescriptor.html":{},"interfaces/TripDescriptor-1.html":{},"interfaces/TripUpdate.html":{},"interfaces/VehicleDescriptor.html":{},"interfaces/VehiclePosition.html":{}}}],["distance",{"_index":889,"title":{},"body":{"classes/Itinerary.html":{},"classes/Leg.html":{},"classes/Plan.html":{},"classes/Step.html":{},"classes/Vertex.html":{}}}],["distinct",{"_index":1565,"title":{},"body":{"classes/RouteRepository.html":{},"classes/ScheduleRepository.html":{},"classes/StopRepository.html":{}}}],["documentation",{"_index":2211,"title":{},"body":{"coverage.html":{}}}],["duration",{"_index":532,"title":{},"body":{"controllers/DBupdateController.html":{},"classes/Itinerary.html":{},"classes/Leg.html":{},"classes/Plan.html":{},"classes/Step.html":{},"classes/Vertex.html":{}}}],["e",{"_index":807,"title":{},"body":{"interfaces/FeedEntity-1.html":{},"interfaces/FeedHeader-1.html":{},"interfaces/FeedMessage-1.html":{},"controllers/LiveUpdatesController.html":{},"injectables/LiveUpdatesService.html":{},"classes/ScheduleRepository.html":{},"injectables/ScheduleService.html":{},"interfaces/StopTimeEvent.html":{},"interfaces/StopTimeUpdate.html":{},"classes/Trip-1.html":{},"interfaces/TripDescriptor-1.html":{},"interfaces/TripUpdate.html":{},"injectables/TripUpdatesListener.html":{}}}],["e2e",{"_index":2316,"title":{},"body":{"index.html":{}}}],["each",{"_index":809,"title":{},"body":{"interfaces/FeedEntity-1.html":{},"interfaces/FeedHeader-1.html":{},"interfaces/FeedMessage-1.html":{},"interfaces/StopTimeEvent.html":{},"interfaces/StopTimeUpdate.html":{},"classes/Trip-1.html":{},"interfaces/TripDescriptor-1.html":{},"interfaces/TripUpdate.html":{}}}],["edit",{"_index":868,"title":{},"body":{"classes/Itinerary.html":{},"classes/Leg.html":{},"classes/Vertex.html":{}}}],["edit(time",{"_index":882,"title":{},"body":{"classes/Itinerary.html":{},"classes/Leg.html":{},"classes/Plan.html":{},"classes/Step.html":{},"classes/Vertex.html":{}}}],["efficient",{"_index":2296,"title":{},"body":{"index.html":{}}}],["email",{"_index":208,"title":{},"body":{"injectables/AuthService.html":{},"injectables/BookingService.html":{},"classes/CreateUserDto.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"entities/User.html":{},"injectables/UserRepository.html":{},"injectables/UserService.html":{}}}],["embarkation",{"_index":1978,"title":{},"body":{"entities/Trip.html":{},"injectables/TripRepository.html":{}}}],["emitter",{"_index":107,"title":{},"body":{"modules/AppModule.html":{},"injectables/BookingService.html":{},"injectables/TripUpdatesListener.html":{},"dependencies.html":{}}}],["en",{"_index":1294,"title":{},"body":{"classes/OTPParams.html":{},"interfaces/TripState.html":{}}}],["encoding",{"_index":2383,"title":{},"body":{"miscellaneous/variables.html":{}}}],["end",{"_index":244,"title":{},"body":{"entities/Booking.html":{},"injectables/OTPService.html":{},"classes/RouteRepository.html":{},"classes/SingleRouteStrategy.html":{}}}],["endindex",{"_index":1795,"title":{},"body":{"classes/SingleRouteStrategy.html":{}}}],["endstop",{"_index":245,"title":{},"body":{"entities/Booking.html":{},"injectables/BookingRepository.html":{}}}],["endtime",{"_index":861,"title":{},"body":{"classes/Itinerary.html":{},"classes/Leg.html":{},"classes/Plan.html":{},"classes/Step.html":{},"classes/Vertex.html":{}}}],["entities",{"_index":242,"title":{},"body":{"entities/Booking.html":{},"entities/Line.html":{},"entities/LiveData.html":{},"entities/NewSchedule.html":{},"entities/Point.html":{},"entities/Route.html":{},"entities/RouteStop.html":{},"entities/Schedule.html":{},"entities/Stop.html":{},"entities/Trip.html":{},"entities/User.html":{},"entities/UserRoute.html":{},"entities/UserStop.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["entities/booking.entity",{"_index":347,"title":{},"body":{"injectables/BookingService.html":{},"controllers/BookingsController.html":{},"modules/UserModule.html":{}}}],["entities/line.entity",{"_index":541,"title":{},"body":{"controllers/DBupdateController.html":{},"interfaces/FeedEntity-1.html":{},"interfaces/FeedHeader-1.html":{},"interfaces/FeedMessage-1.html":{},"injectables/LineService.html":{},"interfaces/StopTimeEvent.html":{},"interfaces/StopTimeUpdate.html":{},"controllers/TransitController.html":{},"modules/TransitModule.html":{},"classes/Trip-1.html":{},"interfaces/TripDescriptor-1.html":{},"interfaces/TripUpdate.html":{}}}],["entities/live.data",{"_index":1165,"title":{},"body":{"controllers/LiveUpdatesController.html":{},"modules/TransitModule.html":{}}}],["entities/newschedule.entity",{"_index":548,"title":{},"body":{"controllers/DBupdateController.html":{},"classes/NewScheduleService.html":{},"modules/TransitModule.html":{}}}],["entities/point.entity",{"_index":546,"title":{},"body":{"controllers/DBupdateController.html":{},"injectables/PointService.html":{},"injectables/RouteStopService.html":{},"modules/TransitModule.html":{}}}],["entities/route.entity",{"_index":535,"title":{},"body":{"controllers/DBupdateController.html":{},"injectables/RouteService.html":{},"controllers/TransitController.html":{},"modules/TransitModule.html":{}}}],["entities/routestops.entity",{"_index":544,"title":{},"body":{"controllers/DBupdateController.html":{},"injectables/RouteStopService.html":{},"modules/TransitModule.html":{}}}],["entities/schedule.entity",{"_index":537,"title":{},"body":{"controllers/DBupdateController.html":{},"interfaces/FeedEntity-1.html":{},"interfaces/FeedHeader-1.html":{},"interfaces/FeedMessage-1.html":{},"injectables/LiveUpdatesService.html":{},"injectables/ScheduleService.html":{},"interfaces/StopTimeEvent.html":{},"interfaces/StopTimeUpdate.html":{},"controllers/TransitController.html":{},"modules/TransitModule.html":{},"classes/Trip-1.html":{},"interfaces/TripDescriptor-1.html":{},"interfaces/TripUpdate.html":{}}}],["entities/stop.entity",{"_index":542,"title":{},"body":{"controllers/DBupdateController.html":{},"interfaces/FeedEntity-1.html":{},"interfaces/FeedHeader-1.html":{},"interfaces/FeedMessage-1.html":{},"controllers/LiveUpdatesController.html":{},"injectables/LiveUpdatesService.html":{},"injectables/StopService.html":{},"interfaces/StopTimeEvent.html":{},"interfaces/StopTimeUpdate.html":{},"controllers/TransitController.html":{},"modules/TransitModule.html":{},"classes/Trip-1.html":{},"interfaces/TripDescriptor-1.html":{},"interfaces/TripUpdate.html":{}}}],["entities/trip.entity",{"_index":539,"title":{},"body":{"controllers/DBupdateController.html":{},"injectables/LiveUpdatesService.html":{},"injectables/OTPService.html":{},"modules/TransitModule.html":{},"injectables/TripService.html":{},"injectables/TripUpdatesListener.html":{}}}],["entities/user.entity",{"_index":2127,"title":{},"body":{"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["entities/userroute.entity",{"_index":2142,"title":{},"body":{"modules/UserModule.html":{}}}],["entities/userstop.entity",{"_index":2139,"title":{},"body":{"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["entity",{"_index":240,"title":{"entities/Booking.html":{},"entities/Line.html":{},"entities/LiveData.html":{},"entities/NewSchedule.html":{},"entities/Point.html":{},"entities/Route.html":{},"entities/RouteStop.html":{},"entities/Schedule.html":{},"entities/Stop.html":{},"entities/Trip.html":{},"entities/User.html":{},"entities/UserRoute.html":{},"entities/UserStop.html":{}},"body":{"entities/Booking.html":{},"interfaces/FeedEntity.html":{},"interfaces/FeedEntity-1.html":{},"interfaces/FeedHeader.html":{},"interfaces/FeedHeader-1.html":{},"interfaces/FeedMessage.html":{},"interfaces/FeedMessage-1.html":{},"entities/Line.html":{},"entities/LiveData.html":{},"interfaces/Long.html":{},"entities/NewSchedule.html":{},"entities/Point.html":{},"interfaces/Position.html":{},"classes/PositionProto.html":{},"entities/Route.html":{},"entities/RouteStop.html":{},"entities/Schedule.html":{},"entities/Stop.html":{},"interfaces/StopTimeEvent.html":{},"interfaces/StopTimeUpdate.html":{},"entities/Trip.html":{},"classes/Trip-1.html":{},"interfaces/TripDescriptor.html":{},"interfaces/TripDescriptor-1.html":{},"interfaces/TripUpdate.html":{},"entities/User.html":{},"entities/UserRoute.html":{},"entities/UserStop.html":{},"interfaces/VehicleDescriptor.html":{},"interfaces/VehiclePosition.html":{},"coverage.html":{}}}],["entityrepository",{"_index":829,"title":{},"body":{"classes/IGenericRepository.html":{}}}],["error",{"_index":239,"title":{},"body":{"injectables/AuthService.html":{},"injectables/BookingService.html":{}}}],["established",{"_index":1953,"title":{},"body":{"classes/TransitGateWay.html":{}}}],["event",{"_index":2077,"title":{},"body":{"injectables/TripUpdatesListener.html":{}}}],["event.getbookings",{"_index":2085,"title":{},"body":{"injectables/TripUpdatesListener.html":{}}}],["event.getbookings.map(b",{"_index":2094,"title":{},"body":{"injectables/TripUpdatesListener.html":{}}}],["event.getbookings[0",{"_index":2087,"title":{},"body":{"injectables/TripUpdatesListener.html":{}}}],["event.getvalue",{"_index":2096,"title":{},"body":{"injectables/TripUpdatesListener.html":{}}}],["event.repo.trips.get(+booking.trip_id",{"_index":2088,"title":{},"body":{"injectables/TripUpdatesListener.html":{}}}],["event.repo.trips.updatedebarkation(booking.trip_id",{"_index":2097,"title":{},"body":{"injectables/TripUpdatesListener.html":{}}}],["event.repo.trips.updateembarkation(booking.trip_id",{"_index":2095,"title":{},"body":{"injectables/TripUpdatesListener.html":{}}}],["event.repo.trips.updateoccupation(booking.stopcodes",{"_index":2098,"title":{},"body":{"injectables/TripUpdatesListener.html":{}}}],["eventemitter",{"_index":328,"title":{},"body":{"injectables/BookingService.html":{}}}],["eventemitter2",{"_index":329,"title":{},"body":{"injectables/BookingService.html":{}}}],["eventemittermodule",{"_index":105,"title":{},"body":{"modules/AppModule.html":{}}}],["eventemittermodule.forroot",{"_index":110,"title":{},"body":{"modules/AppModule.html":{}}}],["events/trips.update.event",{"_index":2084,"title":{},"body":{"injectables/TripUpdatesListener.html":{}}}],["exclusive",{"_index":689,"title":{},"body":{"controllers/DBupdateController.html":{}}}],["execute",{"_index":418,"title":{},"body":{"classes/Context.html":{},"classes/IGenericRepository.html":{},"classes/NewScheduleService.html":{},"injectables/TripRepository.html":{},"injectables/UserRepository.html":{}}}],["execute(tripstate",{"_index":425,"title":{},"body":{"classes/Context.html":{}}}],["exists",{"_index":63,"title":{},"body":{"controllers/AppController.html":{},"controllers/UserController.html":{}}}],["exit",{"_index":893,"title":{},"body":{"classes/Itinerary.html":{},"classes/Leg.html":{},"classes/Plan.html":{},"classes/Step.html":{},"classes/Vertex.html":{}}}],["expiresin",{"_index":192,"title":{},"body":{"modules/AuthModule.html":{}}}],["export",{"_index":49,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"classes/ArrivalDto.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"entities/Booking.html":{},"injectables/BookingRepository.html":{},"injectables/BookingService.html":{},"controllers/BookingsController.html":{},"classes/Context.html":{},"classes/CreateUserDto.html":{},"injectables/DBUpdateService.html":{},"controllers/DBupdateController.html":{},"injectables/DataService.html":{},"interfaces/FeedEntity.html":{},"interfaces/FeedEntity-1.html":{},"interfaces/FeedHeader.html":{},"interfaces/FeedHeader-1.html":{},"interfaces/FeedMessage.html":{},"interfaces/FeedMessage-1.html":{},"classes/IGenericRepository.html":{},"classes/Itinerary.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/Leg.html":{},"entities/Line.html":{},"classes/LineDto.html":{},"injectables/LineRepository.html":{},"injectables/LineService.html":{},"entities/LiveData.html":{},"injectables/LiveDataRepository.html":{},"controllers/LiveUpdatesController.html":{},"injectables/LiveUpdatesService.html":{},"classes/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"interfaces/Long.html":{},"interfaces/NavigatorStrategy.html":{},"entities/NewSchedule.html":{},"classes/NewScheduleService.html":{},"classes/OTPParams.html":{},"injectables/OTPService.html":{},"classes/OTPStrategy.html":{},"classes/Plan.html":{},"entities/Point.html":{},"classes/PointDto.html":{},"classes/PointRepository.html":{},"injectables/PointService.html":{},"interfaces/Position.html":{},"classes/PositionProto.html":{},"entities/Route.html":{},"classes/RouteDto.html":{},"classes/RouteInfoDto.html":{},"classes/RouteRepository.html":{},"injectables/RouteService.html":{},"entities/RouteStop.html":{},"classes/RouteStopRepository.html":{},"injectables/RouteStopService.html":{},"controllers/SavedController.html":{},"injectables/SavedService.html":{},"entities/Schedule.html":{},"classes/ScheduleDayDto.html":{},"classes/ScheduleDetailsDto.html":{},"classes/ScheduleDto.html":{},"classes/ScheduleRepository.html":{},"injectables/ScheduleService.html":{},"classes/SingleRouteStrategy.html":{},"classes/Step.html":{},"entities/Stop.html":{},"classes/StopDto.html":{},"classes/StopRepository.html":{},"injectables/StopService.html":{},"interfaces/StopTimeEvent.html":{},"interfaces/StopTimeUpdate.html":{},"controllers/TransitController.html":{},"classes/TransitGateWay.html":{},"modules/TransitModule.html":{},"entities/Trip.html":{},"classes/Trip-1.html":{},"interfaces/TripDescriptor.html":{},"interfaces/TripDescriptor-1.html":{},"injectables/TripRepository.html":{},"injectables/TripService.html":{},"interfaces/TripState.html":{},"interfaces/TripUpdate.html":{},"injectables/TripUpdatesListener.html":{},"classes/UpdateTrips.html":{},"entities/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserRepository.html":{},"entities/UserRoute.html":{},"injectables/UserService.html":{},"entities/UserStop.html":{},"interfaces/VehicleDescriptor.html":{},"interfaces/VehiclePosition.html":{},"classes/Vertex.html":{}}}],["exports",{"_index":176,"title":{},"body":{"modules/AuthModule.html":{},"modules/TransitModule.html":{},"modules/UserModule.html":{}}}],["express",{"_index":1160,"title":{},"body":{"controllers/LiveUpdatesController.html":{},"dependencies.html":{}}}],["extends",{"_index":274,"title":{},"body":{"injectables/BookingRepository.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LineRepository.html":{},"injectables/LiveDataRepository.html":{},"classes/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/PointRepository.html":{},"classes/RouteRepository.html":{},"classes/RouteStopRepository.html":{},"classes/ScheduleRepository.html":{},"classes/StopRepository.html":{},"injectables/TripRepository.html":{},"injectables/UserRepository.html":{}}}],["extractjwt",{"_index":1018,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["extractjwt.fromauthheaderasbearertoken",{"_index":1025,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["eyjhbgcioijiuzi1niisinr5cci6ikpxvcj9.eyjlehaioje2nzm0mzmwnjn9.ovihabomnhxfzhyykmef5",{"_index":475,"title":{},"body":{"injectables/DBUpdateService.html":{}}}],["eyjhbgcioijiuzi1niisinr5cci6ikpxvcj9.eyjlehaioje2nzqxotg3ndl9.fttcadyjd4ncnoelpdeaydoylgiv0hh9aztrxcswodi",{"_index":1205,"title":{},"body":{"injectables/LiveUpdatesService.html":{}}}],["false",{"_index":255,"title":{},"body":{"entities/Booking.html":{},"injectables/DBUpdateService.html":{},"injectables/JwtStrategy.html":{},"entities/Line.html":{},"entities/LiveData.html":{},"injectables/LiveUpdatesService.html":{},"entities/NewSchedule.html":{},"classes/OTPParams.html":{},"entities/Point.html":{},"entities/Route.html":{},"entities/RouteStop.html":{},"entities/Schedule.html":{},"entities/Stop.html":{},"entities/Trip.html":{},"interfaces/TripState.html":{},"entities/User.html":{},"entities/UserRoute.html":{},"entities/UserStop.html":{}}}],["false})@column({type",{"_index":1593,"title":{},"body":{"entities/RouteStop.html":{},"entities/UserRoute.html":{}}}],["false})@joincolumn({referencedcolumnname",{"_index":1490,"title":{},"body":{"entities/Route.html":{}}}],["false})@primarycolumn({nullable",{"_index":1256,"title":{},"body":{"entities/NewSchedule.html":{},"entities/Schedule.html":{}}}],["false})@primarycolumn({type",{"_index":2196,"title":{},"body":{"entities/UserStop.html":{}}}],["feedentity",{"_index":748,"title":{"interfaces/FeedEntity.html":{},"interfaces/FeedEntity-1.html":{}},"body":{"interfaces/FeedEntity.html":{},"interfaces/FeedEntity-1.html":{},"interfaces/FeedHeader.html":{},"interfaces/FeedHeader-1.html":{},"interfaces/FeedMessage.html":{},"interfaces/FeedMessage-1.html":{},"controllers/LiveUpdatesController.html":{},"interfaces/Long.html":{},"interfaces/Position.html":{},"classes/PositionProto.html":{},"interfaces/StopTimeEvent.html":{},"interfaces/StopTimeUpdate.html":{},"classes/Trip-1.html":{},"interfaces/TripDescriptor.html":{},"interfaces/TripDescriptor-1.html":{},"interfaces/TripUpdate.html":{},"interfaces/VehicleDescriptor.html":{},"interfaces/VehiclePosition.html":{},"coverage.html":{}}}],["feedheader",{"_index":753,"title":{"interfaces/FeedHeader.html":{},"interfaces/FeedHeader-1.html":{}},"body":{"interfaces/FeedEntity.html":{},"interfaces/FeedEntity-1.html":{},"interfaces/FeedHeader.html":{},"interfaces/FeedHeader-1.html":{},"interfaces/FeedMessage.html":{},"interfaces/FeedMessage-1.html":{},"controllers/LiveUpdatesController.html":{},"interfaces/Long.html":{},"interfaces/Position.html":{},"classes/PositionProto.html":{},"interfaces/StopTimeEvent.html":{},"interfaces/StopTimeUpdate.html":{},"classes/Trip-1.html":{},"interfaces/TripDescriptor.html":{},"interfaces/TripDescriptor-1.html":{},"interfaces/TripUpdate.html":{},"interfaces/VehicleDescriptor.html":{},"interfaces/VehiclePosition.html":{},"coverage.html":{}}}],["feedmessage",{"_index":773,"title":{"interfaces/FeedMessage.html":{},"interfaces/FeedMessage-1.html":{}},"body":{"interfaces/FeedEntity.html":{},"interfaces/FeedEntity-1.html":{},"interfaces/FeedHeader.html":{},"interfaces/FeedHeader-1.html":{},"interfaces/FeedMessage.html":{},"interfaces/FeedMessage-1.html":{},"controllers/LiveUpdatesController.html":{},"interfaces/Long.html":{},"interfaces/Position.html":{},"classes/PositionProto.html":{},"interfaces/StopTimeEvent.html":{},"interfaces/StopTimeUpdate.html":{},"classes/Trip-1.html":{},"interfaces/TripDescriptor.html":{},"interfaces/TripDescriptor-1.html":{},"interfaces/TripUpdate.html":{},"interfaces/VehicleDescriptor.html":{},"interfaces/VehiclePosition.html":{},"coverage.html":{}}}],["fetch",{"_index":1312,"title":{},"body":{"classes/OTPParams.html":{},"interfaces/TripState.html":{}}}],["file",{"_index":5,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"classes/ArrivalDto.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"entities/Booking.html":{},"injectables/BookingRepository.html":{},"injectables/BookingService.html":{},"controllers/BookingsController.html":{},"classes/Context.html":{},"classes/CreateUserDto.html":{},"injectables/DBUpdateService.html":{},"controllers/DBupdateController.html":{},"injectables/DataService.html":{},"interfaces/FeedEntity.html":{},"interfaces/FeedEntity-1.html":{},"interfaces/FeedHeader.html":{},"interfaces/FeedHeader-1.html":{},"interfaces/FeedMessage.html":{},"interfaces/FeedMessage-1.html":{},"classes/IGenericRepository.html":{},"classes/Itinerary.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/Leg.html":{},"entities/Line.html":{},"classes/LineDto.html":{},"injectables/LineRepository.html":{},"injectables/LineService.html":{},"entities/LiveData.html":{},"injectables/LiveDataRepository.html":{},"controllers/LiveUpdatesController.html":{},"injectables/LiveUpdatesService.html":{},"classes/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"interfaces/Long.html":{},"interfaces/NavigatorStrategy.html":{},"entities/NewSchedule.html":{},"classes/NewScheduleService.html":{},"classes/OTPParams.html":{},"injectables/OTPService.html":{},"classes/OTPStrategy.html":{},"classes/Plan.html":{},"entities/Point.html":{},"classes/PointDto.html":{},"classes/PointRepository.html":{},"injectables/PointService.html":{},"interfaces/Position.html":{},"classes/PositionProto.html":{},"entities/Route.html":{},"classes/RouteDto.html":{},"classes/RouteInfoDto.html":{},"classes/RouteRepository.html":{},"injectables/RouteService.html":{},"entities/RouteStop.html":{},"classes/RouteStopRepository.html":{},"injectables/RouteStopService.html":{},"controllers/SavedController.html":{},"injectables/SavedService.html":{},"entities/Schedule.html":{},"classes/ScheduleDayDto.html":{},"classes/ScheduleDetailsDto.html":{},"classes/ScheduleDto.html":{},"classes/ScheduleRepository.html":{},"injectables/ScheduleService.html":{},"classes/SingleRouteStrategy.html":{},"classes/Step.html":{},"entities/Stop.html":{},"classes/StopDto.html":{},"classes/StopRepository.html":{},"injectables/StopService.html":{},"interfaces/StopTimeEvent.html":{},"interfaces/StopTimeUpdate.html":{},"controllers/TransitController.html":{},"classes/TransitGateWay.html":{},"modules/TransitModule.html":{},"entities/Trip.html":{},"classes/Trip-1.html":{},"interfaces/TripDescriptor.html":{},"interfaces/TripDescriptor-1.html":{},"injectables/TripRepository.html":{},"injectables/TripService.html":{},"interfaces/TripState.html":{},"interfaces/TripUpdate.html":{},"injectables/TripUpdatesListener.html":{},"classes/UpdateTrips.html":{},"entities/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserRepository.html":{},"entities/UserRoute.html":{},"injectables/UserService.html":{},"entities/UserStop.html":{},"interfaces/VehicleDescriptor.html":{},"interfaces/VehiclePosition.html":{},"classes/Vertex.html":{},"coverage.html":{}}}],["finduserbyemail",{"_index":197,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UserService.html":{}}}],["finduserbyemail(email",{"_index":206,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UserService.html":{}}}],["fixschedule",{"_index":497,"title":{},"body":{"controllers/DBupdateController.html":{}}}],["flex",{"_index":941,"title":{},"body":{"classes/Itinerary.html":{},"classes/Leg.html":{},"classes/Plan.html":{},"classes/Step.html":{},"classes/Vertex.html":{}}}],["for(const",{"_index":816,"title":{},"body":{"interfaces/FeedEntity-1.html":{},"interfaces/FeedHeader-1.html":{},"interfaces/FeedMessage-1.html":{},"injectables/OTPService.html":{},"interfaces/StopTimeEvent.html":{},"interfaces/StopTimeUpdate.html":{},"classes/Trip-1.html":{},"interfaces/TripDescriptor-1.html":{},"interfaces/TripUpdate.html":{}}}],["for(let",{"_index":2039,"title":{},"body":{"injectables/TripRepository.html":{}}}],["framework",{"_index":2294,"title":{},"body":{"index.html":{}}}],["fromplace",{"_index":1277,"title":{},"body":{"classes/OTPParams.html":{},"interfaces/TripState.html":{}}}],["fromplace=${this.fromplace",{"_index":1324,"title":{},"body":{"classes/OTPParams.html":{},"interfaces/TripState.html":{}}}],["fs",{"_index":2224,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["function",{"_index":2221,"title":{},"body":{"coverage.html":{}}}],["functions",{"_index":2288,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["generic.repository",{"_index":311,"title":{},"body":{"injectables/BookingRepository.html":{},"injectables/LineRepository.html":{},"injectables/LiveDataRepository.html":{},"classes/PointRepository.html":{},"classes/RouteRepository.html":{},"classes/RouteStopRepository.html":{},"classes/ScheduleRepository.html":{},"classes/StopRepository.html":{},"injectables/TripRepository.html":{},"injectables/UserRepository.html":{}}}],["get('/deleteroute/:code",{"_index":1651,"title":{},"body":{"controllers/SavedController.html":{}}}],["get('/deletestop/:code",{"_index":1646,"title":{},"body":{"controllers/SavedController.html":{}}}],["get('/fix",{"_index":508,"title":{},"body":{"controllers/DBupdateController.html":{}}}],["get('/get",{"_index":408,"title":{},"body":{"controllers/BookingsController.html":{}}}],["get('/getroutes",{"_index":1657,"title":{},"body":{"controllers/SavedController.html":{}}}],["get('/getsavedinfo",{"_index":1660,"title":{},"body":{"controllers/SavedController.html":{}}}],["get('/getstops",{"_index":1654,"title":{},"body":{"controllers/SavedController.html":{}}}],["get('/lineroutes/:id",{"_index":1905,"title":{},"body":{"controllers/TransitController.html":{}}}],["get('/lineroutes/:id')@header('content",{"_index":1884,"title":{},"body":{"controllers/TransitController.html":{}}}],["get('/lines",{"_index":554,"title":{},"body":{"controllers/DBupdateController.html":{},"controllers/TransitController.html":{}}}],["get('/lines')@header('content",{"_index":514,"title":{},"body":{"controllers/DBupdateController.html":{},"controllers/TransitController.html":{}}}],["get('/lines/:code",{"_index":1173,"title":{},"body":{"controllers/LiveUpdatesController.html":{}}}],["get('/lines/:code')@header('content",{"_index":1153,"title":{},"body":{"controllers/LiveUpdatesController.html":{}}}],["get('/newschedule",{"_index":510,"title":{},"body":{"controllers/DBupdateController.html":{}}}],["get('/populatetrips",{"_index":512,"title":{},"body":{"controllers/DBupdateController.html":{}}}],["get('/routeinfo/:code",{"_index":1908,"title":{},"body":{"controllers/TransitController.html":{}}}],["get('/routeinfo/:code')@header('content",{"_index":1890,"title":{},"body":{"controllers/TransitController.html":{}}}],["get('/routepaths",{"_index":610,"title":{},"body":{"controllers/DBupdateController.html":{}}}],["get('/routepaths')@header('content",{"_index":516,"title":{},"body":{"controllers/DBupdateController.html":{}}}],["get('/routes",{"_index":575,"title":{},"body":{"controllers/DBupdateController.html":{}}}],["get('/routes')@header('content",{"_index":518,"title":{},"body":{"controllers/DBupdateController.html":{}}}],["get('/routeschedules/:code",{"_index":1915,"title":{},"body":{"controllers/TransitController.html":{}}}],["get('/routeschedules/:code')@header('content",{"_index":1888,"title":{},"body":{"controllers/TransitController.html":{}}}],["get('/routestops",{"_index":620,"title":{},"body":{"controllers/DBupdateController.html":{}}}],["get('/routestops')@header('content",{"_index":522,"title":{},"body":{"controllers/DBupdateController.html":{}}}],["get('/saveroute/:code",{"_index":1648,"title":{},"body":{"controllers/SavedController.html":{}}}],["get('/savestop/:code",{"_index":1641,"title":{},"body":{"controllers/SavedController.html":{}}}],["get('/stoproutes/:code",{"_index":1922,"title":{},"body":{"controllers/TransitController.html":{}}}],["get('/stoproutes/:code')@header('content",{"_index":1893,"title":{},"body":{"controllers/TransitController.html":{}}}],["get('/stops",{"_index":591,"title":{},"body":{"controllers/DBupdateController.html":{},"controllers/TransitController.html":{}}}],["get('/stops')@header('content",{"_index":520,"title":{},"body":{"controllers/DBupdateController.html":{},"controllers/TransitController.html":{}}}],["get('/stops/:code",{"_index":1170,"title":{},"body":{"controllers/LiveUpdatesController.html":{}}}],["get('/stops/:code')@header('content",{"_index":1150,"title":{},"body":{"controllers/LiveUpdatesController.html":{}}}],["get('/updatetrips",{"_index":631,"title":{},"body":{"controllers/DBupdateController.html":{}}}],["get('/updatetrips')@header('content",{"_index":524,"title":{},"body":{"controllers/DBupdateController.html":{}}}],["get('profile",{"_index":74,"title":{},"body":{"controllers/AppController.html":{},"controllers/UserController.html":{}}}],["get(routecode",{"_index":1460,"title":{},"body":{"classes/PointRepository.html":{},"classes/ScheduleRepository.html":{}}}],["get(spec",{"_index":832,"title":{},"body":{"classes/IGenericRepository.html":{},"injectables/LineRepository.html":{},"injectables/LiveDataRepository.html":{},"classes/RouteRepository.html":{},"injectables/RouteService.html":{},"classes/RouteStopRepository.html":{},"classes/StopRepository.html":{},"injectables/StopService.html":{},"injectables/UserRepository.html":{}}}],["get(trip_id",{"_index":2018,"title":{},"body":{"injectables/TripRepository.html":{},"injectables/TripService.html":{}}}],["get(user_id",{"_index":291,"title":{},"body":{"injectables/BookingRepository.html":{}}}],["getall",{"_index":282,"title":{},"body":{"injectables/BookingRepository.html":{},"classes/IGenericRepository.html":{},"injectables/LineRepository.html":{},"injectables/LiveDataRepository.html":{},"classes/NewScheduleService.html":{},"classes/PointRepository.html":{},"classes/RouteRepository.html":{},"classes/RouteStopRepository.html":{},"classes/ScheduleRepository.html":{},"injectables/ScheduleService.html":{},"classes/StopRepository.html":{},"injectables/TripRepository.html":{},"injectables/UserRepository.html":{}}}],["getallroutes",{"_index":2145,"title":{},"body":{"injectables/UserRepository.html":{}}}],["getallroutes(user_id",{"_index":2155,"title":{},"body":{"injectables/UserRepository.html":{}}}],["getallstops",{"_index":2146,"title":{},"body":{"injectables/UserRepository.html":{}}}],["getallstops(user_id",{"_index":2157,"title":{},"body":{"injectables/UserRepository.html":{}}}],["getbookingplan",{"_index":382,"title":{},"body":{"controllers/BookingsController.html":{},"injectables/OTPService.html":{}}}],["getbookingplan(@request",{"_index":412,"title":{},"body":{"controllers/BookingsController.html":{}}}],["getbookingplan(booking",{"_index":1354,"title":{},"body":{"injectables/OTPService.html":{}}}],["getbookingplan(req",{"_index":388,"title":{},"body":{"controllers/BookingsController.html":{}}}],["getbookings",{"_index":324,"title":{},"body":{"injectables/BookingService.html":{},"controllers/BookingsController.html":{},"classes/UpdateTrips.html":{}}}],["getbookings(@request",{"_index":409,"title":{},"body":{"controllers/BookingsController.html":{}}}],["getbookings(email",{"_index":335,"title":{},"body":{"injectables/BookingService.html":{}}}],["getbookings(req",{"_index":391,"title":{},"body":{"controllers/BookingsController.html":{}}}],["getbus",{"_index":1348,"title":{},"body":{"injectables/OTPService.html":{}}}],["getbus(start",{"_index":1356,"title":{},"body":{"injectables/OTPService.html":{}}}],["getbydate",{"_index":2010,"title":{},"body":{"injectables/TripRepository.html":{},"injectables/TripService.html":{}}}],["getbydate(routecode",{"_index":2020,"title":{},"body":{"injectables/TripRepository.html":{},"injectables/TripService.html":{}}}],["getbytime",{"_index":1740,"title":{},"body":{"classes/ScheduleRepository.html":{},"injectables/ScheduleService.html":{}}}],["getbytime(day",{"_index":1768,"title":{},"body":{"injectables/ScheduleService.html":{}}}],["getbytime(s",{"_index":1747,"title":{},"body":{"classes/ScheduleRepository.html":{}}}],["getdepartures",{"_index":1146,"title":{},"body":{"controllers/LiveUpdatesController.html":{}}}],["getdepartures(@param('code",{"_index":1171,"title":{},"body":{"controllers/LiveUpdatesController.html":{}}}],["getdepartures(code",{"_index":1149,"title":{},"body":{"controllers/LiveUpdatesController.html":{}}}],["getgetbookings",{"_index":2103,"title":{},"body":{"classes/UpdateTrips.html":{}}}],["getgetmessage",{"_index":2007,"title":{},"body":{"classes/Trip-1.html":{}}}],["getgetroutes",{"_index":1616,"title":{},"body":{"controllers/SavedController.html":{}}}],["getgetroutes(@request",{"_index":1655,"title":{},"body":{"controllers/SavedController.html":{}}}],["getgetroutes(req",{"_index":1629,"title":{},"body":{"controllers/SavedController.html":{}}}],["getgetvalue",{"_index":2107,"title":{},"body":{"classes/UpdateTrips.html":{}}}],["getids",{"_index":1741,"title":{},"body":{"classes/ScheduleRepository.html":{},"injectables/ScheduleService.html":{}}}],["getinfo",{"_index":1666,"title":{},"body":{"injectables/SavedService.html":{}}}],["getinfo(user",{"_index":1675,"title":{},"body":{"injectables/SavedService.html":{}}}],["getlinebuses",{"_index":1147,"title":{},"body":{"controllers/LiveUpdatesController.html":{}}}],["getlinebuses(@param('code",{"_index":1174,"title":{},"body":{"controllers/LiveUpdatesController.html":{}}}],["getlinebuses(code",{"_index":1152,"title":{},"body":{"controllers/LiveUpdatesController.html":{}}}],["getlineroutes",{"_index":1572,"title":{},"body":{"injectables/RouteService.html":{},"controllers/TransitController.html":{}}}],["getlineroutes(@param('id",{"_index":1906,"title":{},"body":{"controllers/TransitController.html":{}}}],["getlineroutes(id",{"_index":1883,"title":{},"body":{"controllers/TransitController.html":{}}}],["getlineroutes(lineid",{"_index":1576,"title":{},"body":{"injectables/RouteService.html":{}}}],["getlines",{"_index":455,"title":{},"body":{"injectables/DBUpdateService.html":{},"injectables/DataService.html":{},"injectables/LineService.html":{},"controllers/TransitController.html":{}}}],["getlivedata",{"_index":1198,"title":{},"body":{"injectables/LiveUpdatesService.html":{}}}],["getlivedata(code",{"_index":1201,"title":{},"body":{"injectables/LiveUpdatesService.html":{}}}],["getmessage",{"_index":800,"title":{},"body":{"interfaces/FeedEntity-1.html":{},"interfaces/FeedHeader-1.html":{},"interfaces/FeedMessage-1.html":{},"interfaces/StopTimeEvent.html":{},"interfaces/StopTimeUpdate.html":{},"classes/Trip-1.html":{},"interfaces/TripDescriptor-1.html":{},"interfaces/TripUpdate.html":{}}}],["getoccupation",{"_index":2011,"title":{},"body":{"injectables/TripRepository.html":{},"injectables/TripService.html":{}}}],["getoccupation(trip_ids",{"_index":2022,"title":{},"body":{"injectables/TripRepository.html":{},"injectables/TripService.html":{}}}],["getone",{"_index":283,"title":{},"body":{"injectables/BookingRepository.html":{},"classes/IGenericRepository.html":{},"injectables/LineRepository.html":{},"injectables/LiveDataRepository.html":{},"classes/PointRepository.html":{},"classes/RouteRepository.html":{},"classes/RouteStopRepository.html":{},"classes/ScheduleRepository.html":{},"classes/StopRepository.html":{},"injectables/StopService.html":{},"injectables/TripRepository.html":{},"injectables/TripService.html":{},"injectables/UserRepository.html":{}}}],["getone(code",{"_index":1863,"title":{},"body":{"injectables/StopService.html":{}}}],["getone(email",{"_index":2159,"title":{},"body":{"injectables/UserRepository.html":{}}}],["getone(spec",{"_index":304,"title":{},"body":{"injectables/BookingRepository.html":{},"classes/IGenericRepository.html":{},"injectables/LineRepository.html":{},"injectables/LiveDataRepository.html":{},"classes/PointRepository.html":{},"classes/RouteRepository.html":{},"classes/RouteStopRepository.html":{},"classes/ScheduleRepository.html":{},"classes/StopRepository.html":{}}}],["getone(trip_id",{"_index":2024,"title":{},"body":{"injectables/TripRepository.html":{},"injectables/TripService.html":{}}}],["getotp",{"_index":725,"title":{},"body":{"injectables/DataService.html":{}}}],["getplan",{"_index":1349,"title":{},"body":{"injectables/OTPService.html":{}}}],["getplan(state",{"_index":1358,"title":{},"body":{"injectables/OTPService.html":{}}}],["getpoints",{"_index":721,"title":{},"body":{"injectables/DataService.html":{}}}],["getprofile",{"_index":12,"title":{},"body":{"controllers/AppController.html":{},"controllers/UserController.html":{}}}],["getprofile(@request",{"_index":75,"title":{},"body":{"controllers/AppController.html":{},"controllers/UserController.html":{}}}],["getprofile(req",{"_index":28,"title":{},"body":{"controllers/AppController.html":{},"controllers/UserController.html":{}}}],["getrepo",{"_index":2105,"title":{},"body":{"classes/UpdateTrips.html":{}}}],["getrouteinfo",{"_index":456,"title":{},"body":{"injectables/DBUpdateService.html":{}}}],["getrouteinfo(code",{"_index":464,"title":{},"body":{"injectables/DBUpdateService.html":{}}}],["getroutepoints",{"_index":457,"title":{},"body":{"injectables/DBUpdateService.html":{},"injectables/PointService.html":{}}}],["getroutepoints(code",{"_index":467,"title":{},"body":{"injectables/DBUpdateService.html":{}}}],["getroutepoints(routecode",{"_index":1470,"title":{},"body":{"injectables/PointService.html":{}}}],["getroutes",{"_index":458,"title":{},"body":{"injectables/DBUpdateService.html":{},"injectables/DataService.html":{},"injectables/RouteService.html":{},"controllers/SavedController.html":{},"injectables/SavedService.html":{}}}],["getroutes(@request",{"_index":1658,"title":{},"body":{"controllers/SavedController.html":{}}}],["getroutes(req",{"_index":1632,"title":{},"body":{"controllers/SavedController.html":{}}}],["getroutes(user",{"_index":1677,"title":{},"body":{"injectables/SavedService.html":{}}}],["getroutesbylineid",{"_index":1519,"title":{},"body":{"classes/RouteRepository.html":{}}}],["getroutesbylineid(lineid",{"_index":1526,"title":{},"body":{"classes/RouteRepository.html":{}}}],["getroutesbystops",{"_index":1520,"title":{},"body":{"classes/RouteRepository.html":{}}}],["getroutesbystops(start",{"_index":1528,"title":{},"body":{"classes/RouteRepository.html":{}}}],["getrouteschedule",{"_index":1882,"title":{},"body":{"controllers/TransitController.html":{}}}],["getrouteschedule(@param('code",{"_index":1916,"title":{},"body":{"controllers/TransitController.html":{}}}],["getrouteschedule(code",{"_index":1887,"title":{},"body":{"controllers/TransitController.html":{}}}],["getrouteschedules",{"_index":1764,"title":{},"body":{"injectables/ScheduleService.html":{}}}],["getrouteschedules(routecode",{"_index":1771,"title":{},"body":{"injectables/ScheduleService.html":{}}}],["getroutestops",{"_index":1823,"title":{},"body":{"classes/StopRepository.html":{},"injectables/StopService.html":{},"controllers/TransitController.html":{}}}],["getroutestops(@param('code",{"_index":1909,"title":{},"body":{"controllers/TransitController.html":{}}}],["getroutestops(code",{"_index":1831,"title":{},"body":{"classes/StopRepository.html":{},"controllers/TransitController.html":{}}}],["getroutestops(routecode",{"_index":1865,"title":{},"body":{"injectables/StopService.html":{}}}],["getroutetrips",{"_index":459,"title":{},"body":{"injectables/DBUpdateService.html":{}}}],["getroutetrips(code",{"_index":470,"title":{},"body":{"injectables/DBUpdateService.html":{}}}],["getrs",{"_index":727,"title":{},"body":{"injectables/DataService.html":{}}}],["getsaved",{"_index":1521,"title":{},"body":{"classes/RouteRepository.html":{},"injectables/RouteService.html":{},"classes/StopRepository.html":{},"injectables/StopService.html":{}}}],["getsaved(user",{"_index":1530,"title":{},"body":{"classes/RouteRepository.html":{},"injectables/RouteService.html":{},"classes/StopRepository.html":{},"injectables/StopService.html":{}}}],["getsavedinfo",{"_index":1617,"title":{},"body":{"controllers/SavedController.html":{}}}],["getsavedinfo(@request",{"_index":1661,"title":{},"body":{"controllers/SavedController.html":{}}}],["getsavedinfo(req",{"_index":1635,"title":{},"body":{"controllers/SavedController.html":{}}}],["getschedule",{"_index":719,"title":{},"body":{"injectables/DataService.html":{}}}],["getstatus",{"_index":2012,"title":{},"body":{"injectables/TripRepository.html":{}}}],["getstatus(trip_id",{"_index":2026,"title":{},"body":{"injectables/TripRepository.html":{}}}],["getstopcode",{"_index":2147,"title":{},"body":{"injectables/UserRepository.html":{}}}],["getstopcode(code",{"_index":2160,"title":{},"body":{"injectables/UserRepository.html":{}}}],["getstoplines",{"_index":1824,"title":{},"body":{"classes/StopRepository.html":{},"injectables/StopService.html":{}}}],["getstoproutes",{"_index":1522,"title":{},"body":{"classes/RouteRepository.html":{},"injectables/RouteService.html":{},"controllers/TransitController.html":{}}}],["getstoproutes(@param('code",{"_index":1923,"title":{},"body":{"controllers/TransitController.html":{}}}],["getstoproutes(code",{"_index":1892,"title":{},"body":{"controllers/TransitController.html":{}}}],["getstoproutes(stopcode",{"_index":1532,"title":{},"body":{"classes/RouteRepository.html":{},"injectables/RouteService.html":{}}}],["getstops",{"_index":460,"title":{},"body":{"injectables/DBUpdateService.html":{},"injectables/DataService.html":{},"injectables/SavedService.html":{},"injectables/StopService.html":{},"controllers/TransitController.html":{}}}],["getstops(user",{"_index":1679,"title":{},"body":{"injectables/SavedService.html":{}}}],["getting",{"_index":2290,"title":{"index.html":{}},"body":{}}],["gettrip",{"_index":1742,"title":{},"body":{"classes/ScheduleRepository.html":{}}}],["gettrip(day",{"_index":1750,"title":{},"body":{"classes/ScheduleRepository.html":{}}}],["gettripone",{"_index":1743,"title":{},"body":{"classes/ScheduleRepository.html":{},"injectables/ScheduleService.html":{}}}],["gettripone(id",{"_index":1752,"title":{},"body":{"classes/ScheduleRepository.html":{},"injectables/ScheduleService.html":{}}}],["gettrips",{"_index":723,"title":{},"body":{"injectables/DataService.html":{},"injectables/OTPService.html":{},"injectables/ScheduleService.html":{},"controllers/TransitController.html":{}}}],["gettrips(@body",{"_index":1920,"title":{},"body":{"controllers/TransitController.html":{}}}],["gettrips(data",{"_index":1896,"title":{},"body":{"controllers/TransitController.html":{}}}],["gettrips(routecode",{"_index":1774,"title":{},"body":{"injectables/ScheduleService.html":{}}}],["gettrips(slug",{"_index":1361,"title":{},"body":{"injectables/OTPService.html":{}}}],["getvalue",{"_index":2100,"title":{},"body":{"classes/UpdateTrips.html":{}}}],["google",{"_index":887,"title":{},"body":{"classes/Itinerary.html":{},"classes/Leg.html":{},"classes/Plan.html":{},"classes/Step.html":{},"classes/Vertex.html":{},"dependencies.html":{},"miscellaneous/variables.html":{}}}],["greekutils",{"_index":549,"title":{},"body":{"controllers/DBupdateController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["greekutils.togreeklish(line.name",{"_index":568,"title":{},"body":{"controllers/DBupdateController.html":{}}}],["greekutils.togreeklish(route.name",{"_index":584,"title":{},"body":{"controllers/DBupdateController.html":{}}}],["greekutils.togreeklish(stop.name",{"_index":601,"title":{},"body":{"controllers/DBupdateController.html":{}}}],["grow",{"_index":2323,"title":{},"body":{"index.html":{}}}],["gtfs",{"_index":2261,"title":{},"body":{"dependencies.html":{}}}],["gtfsrealtimebindings",{"_index":2225,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["gtfsrealtimeversion",{"_index":754,"title":{},"body":{"interfaces/FeedEntity.html":{},"interfaces/FeedEntity-1.html":{},"interfaces/FeedHeader.html":{},"interfaces/FeedHeader-1.html":{},"interfaces/FeedMessage.html":{},"interfaces/FeedMessage-1.html":{},"interfaces/Long.html":{},"interfaces/Position.html":{},"classes/PositionProto.html":{},"interfaces/StopTimeEvent.html":{},"interfaces/StopTimeUpdate.html":{},"classes/Trip-1.html":{},"interfaces/TripDescriptor.html":{},"interfaces/TripDescriptor-1.html":{},"interfaces/TripUpdate.html":{},"interfaces/VehicleDescriptor.html":{},"interfaces/VehiclePosition.html":{}}}],["handleconnection",{"_index":1928,"title":{},"body":{"classes/TransitGateWay.html":{}}}],["handleconnection(client",{"_index":1933,"title":{},"body":{"classes/TransitGateWay.html":{}}}],["handledisconnect",{"_index":1929,"title":{},"body":{"classes/TransitGateWay.html":{}}}],["handledisconnect(client",{"_index":1937,"title":{},"body":{"classes/TransitGateWay.html":{}}}],["header",{"_index":533,"title":{},"body":{"controllers/DBupdateController.html":{},"interfaces/FeedEntity.html":{},"interfaces/FeedEntity-1.html":{},"interfaces/FeedHeader.html":{},"interfaces/FeedHeader-1.html":{},"interfaces/FeedMessage.html":{},"interfaces/FeedMessage-1.html":{},"controllers/LiveUpdatesController.html":{},"interfaces/Long.html":{},"interfaces/Position.html":{},"classes/PositionProto.html":{},"interfaces/StopTimeEvent.html":{},"interfaces/StopTimeUpdate.html":{},"controllers/TransitController.html":{},"classes/Trip-1.html":{},"interfaces/TripDescriptor.html":{},"interfaces/TripDescriptor-1.html":{},"interfaces/TripUpdate.html":{},"interfaces/VehicleDescriptor.html":{},"interfaces/VehiclePosition.html":{}}}],["header('content",{"_index":68,"title":{},"body":{"controllers/AppController.html":{},"controllers/BookingsController.html":{},"controllers/DBupdateController.html":{},"controllers/LiveUpdatesController.html":{},"controllers/SavedController.html":{},"controllers/TransitController.html":{},"controllers/UserController.html":{}}}],["headers",{"_index":485,"title":{},"body":{"injectables/DBUpdateService.html":{},"injectables/LiveUpdatesService.html":{}}}],["here",{"_index":2333,"title":{},"body":{"index.html":{}}}],["high",{"_index":765,"title":{},"body":{"interfaces/FeedEntity.html":{},"interfaces/FeedHeader.html":{},"interfaces/FeedMessage.html":{},"interfaces/Long.html":{},"interfaces/Position.html":{},"classes/PositionProto.html":{},"interfaces/TripDescriptor.html":{},"interfaces/VehicleDescriptor.html":{},"interfaces/VehiclePosition.html":{}}}],["host",{"_index":2364,"title":{},"body":{"miscellaneous/variables.html":{}}}],["hour",{"_index":654,"title":{},"body":{"controllers/DBupdateController.html":{}}}],["http",{"_index":416,"title":{},"body":{"classes/Context.html":{},"injectables/DBUpdateService.html":{},"injectables/LiveUpdatesService.html":{},"interfaces/NavigatorStrategy.html":{},"injectables/OTPService.html":{},"classes/OTPStrategy.html":{}}}],["http://localhost:4200",{"_index":1948,"title":{},"body":{"classes/TransitGateWay.html":{}}}],["http://localhost:8080/otp/routers/default/plan",{"_index":1365,"title":{},"body":{"injectables/OTPService.html":{}}}],["http://localhost:8080/otp/routers/default/plan?fromplace=${start}&toplace=${end}&time=1:19pm&date=01",{"_index":1370,"title":{},"body":{"injectables/OTPService.html":{}}}],["httpexception",{"_index":219,"title":{},"body":{"injectables/AuthService.html":{},"injectables/BookingService.html":{}}}],["httpmodule",{"_index":1963,"title":{},"body":{"modules/TransitModule.html":{}}}],["https://cdn.mbta.com/realtime/tripupdates.pb",{"_index":2382,"title":{},"body":{"miscellaneous/variables.html":{}}}],["https://nestjs.com",{"_index":2340,"title":{},"body":{"index.html":{}}}],["https://rest.citybus.gr/api/v1/el/106",{"_index":479,"title":{},"body":{"injectables/DBUpdateService.html":{},"injectables/LiveUpdatesService.html":{}}}],["httpservice",{"_index":420,"title":{},"body":{"classes/Context.html":{},"injectables/DBUpdateService.html":{},"injectables/LiveUpdatesService.html":{},"interfaces/NavigatorStrategy.html":{},"injectables/OTPService.html":{},"classes/OTPStrategy.html":{}}}],["httpstatus",{"_index":217,"title":{},"body":{"injectables/AuthService.html":{},"injectables/BookingService.html":{}}}],["httpstatus.forbidden",{"_index":238,"title":{},"body":{"injectables/AuthService.html":{},"injectables/BookingService.html":{}}}],["id",{"_index":646,"title":{},"body":{"controllers/DBupdateController.html":{},"interfaces/FeedEntity.html":{},"interfaces/FeedEntity-1.html":{},"interfaces/FeedHeader.html":{},"interfaces/FeedHeader-1.html":{},"interfaces/FeedMessage.html":{},"interfaces/FeedMessage-1.html":{},"entities/Line.html":{},"classes/LineDto.html":{},"entities/LiveData.html":{},"interfaces/Long.html":{},"entities/NewSchedule.html":{},"entities/Point.html":{},"classes/PointDto.html":{},"interfaces/Position.html":{},"classes/PositionProto.html":{},"entities/Route.html":{},"classes/RouteDto.html":{},"classes/RouteInfoDto.html":{},"entities/RouteStop.html":{},"entities/Schedule.html":{},"classes/ScheduleRepository.html":{},"injectables/ScheduleService.html":{},"entities/Stop.html":{},"classes/StopDto.html":{},"interfaces/StopTimeEvent.html":{},"interfaces/StopTimeUpdate.html":{},"controllers/TransitController.html":{},"entities/Trip.html":{},"classes/Trip-1.html":{},"interfaces/TripDescriptor.html":{},"interfaces/TripDescriptor-1.html":{},"interfaces/TripUpdate.html":{},"entities/UserRoute.html":{},"entities/UserStop.html":{},"interfaces/VehicleDescriptor.html":{},"interfaces/VehiclePosition.html":{}}}],["identifier",{"_index":2212,"title":{},"body":{"coverage.html":{}}}],["ids",{"_index":364,"title":{},"body":{"injectables/BookingService.html":{},"controllers/DBupdateController.html":{}}}],["if(!it",{"_index":1227,"title":{},"body":{"injectables/LiveUpdatesService.html":{}}}],["if(!plan",{"_index":1224,"title":{},"body":{"injectables/LiveUpdatesService.html":{}}}],["if(!prom",{"_index":1212,"title":{},"body":{"injectables/LiveUpdatesService.html":{}}}],["if(!stop",{"_index":1217,"title":{},"body":{"injectables/LiveUpdatesService.html":{}}}],["if(+arrival.latitude",{"_index":1218,"title":{},"body":{"injectables/LiveUpdatesService.html":{}}}],["if(+trip.occupied",{"_index":369,"title":{},"body":{"injectables/BookingService.html":{}}}],["if(arrivalspromise",{"_index":1178,"title":{},"body":{"controllers/LiveUpdatesController.html":{}}}],["if(data",{"_index":806,"title":{},"body":{"interfaces/FeedEntity-1.html":{},"interfaces/FeedHeader-1.html":{},"interfaces/FeedMessage-1.html":{},"interfaces/StopTimeEvent.html":{},"interfaces/StopTimeUpdate.html":{},"classes/Trip-1.html":{},"interfaces/TripDescriptor-1.html":{},"interfaces/TripUpdate.html":{}}}],["if(data.vehicles",{"_index":815,"title":{},"body":{"interfaces/FeedEntity-1.html":{},"interfaces/FeedHeader-1.html":{},"interfaces/FeedMessage-1.html":{},"interfaces/StopTimeEvent.html":{},"interfaces/StopTimeUpdate.html":{},"classes/Trip-1.html":{},"interfaces/TripDescriptor-1.html":{},"interfaces/TripUpdate.html":{}}}],["if(init.arriveby",{"_index":1320,"title":{},"body":{"classes/OTPParams.html":{},"interfaces/TripState.html":{}}}],["if(it.transittime",{"_index":1393,"title":{},"body":{"injectables/OTPService.html":{}}}],["if(leg.intermediatestops",{"_index":1398,"title":{},"body":{"injectables/OTPService.html":{}}}],["if(leg.mode",{"_index":1402,"title":{},"body":{"injectables/OTPService.html":{}}}],["if(minute",{"_index":659,"title":{},"body":{"controllers/DBupdateController.html":{}}}],["if(res",{"_index":360,"title":{},"body":{"injectables/BookingService.html":{}}}],["if(route",{"_index":977,"title":{},"body":{"classes/Itinerary.html":{},"classes/Leg.html":{},"classes/Plan.html":{},"classes/Step.html":{},"classes/Vertex.html":{}}}],["if(startindex",{"_index":1796,"title":{},"body":{"classes/SingleRouteStrategy.html":{}}}],["if(trip_id",{"_index":980,"title":{},"body":{"classes/Itinerary.html":{},"classes/Leg.html":{},"classes/Plan.html":{},"classes/Step.html":{},"classes/Vertex.html":{}}}],["if(tripspromise",{"_index":634,"title":{},"body":{"controllers/DBupdateController.html":{}}}],["if(user",{"_index":61,"title":{},"body":{"controllers/AppController.html":{},"injectables/AuthService.html":{},"controllers/UserController.html":{}}}],["if(user.msg",{"_index":229,"title":{},"body":{"injectables/AuthService.html":{}}}],["igenericrepository",{"_index":275,"title":{"classes/IGenericRepository.html":{}},"body":{"injectables/BookingRepository.html":{},"classes/Context.html":{},"classes/IGenericRepository.html":{},"injectables/LineRepository.html":{},"injectables/LiveDataRepository.html":{},"interfaces/NavigatorStrategy.html":{},"classes/PointRepository.html":{},"classes/RouteRepository.html":{},"classes/RouteStopRepository.html":{},"classes/ScheduleRepository.html":{},"classes/StopRepository.html":{},"injectables/TripRepository.html":{},"injectables/UserRepository.html":{},"coverage.html":{}}}],["igenericrepository:11",{"_index":303,"title":{},"body":{"injectables/BookingRepository.html":{},"injectables/LiveDataRepository.html":{},"classes/RouteStopRepository.html":{},"injectables/TripRepository.html":{},"injectables/UserRepository.html":{}}}],["igenericrepository:12",{"_index":1462,"title":{},"body":{"classes/PointRepository.html":{}}}],["igenericrepository:13",{"_index":1829,"title":{},"body":{"classes/StopRepository.html":{}}}],["igenericrepository:14",{"_index":293,"title":{},"body":{"injectables/BookingRepository.html":{},"classes/RouteStopRepository.html":{}}}],["igenericrepository:15",{"_index":1140,"title":{},"body":{"injectables/LiveDataRepository.html":{},"classes/ScheduleRepository.html":{}}}],["igenericrepository:16",{"_index":1461,"title":{},"body":{"classes/PointRepository.html":{},"classes/RouteRepository.html":{}}}],["igenericrepository:17",{"_index":1095,"title":{},"body":{"injectables/LineRepository.html":{},"classes/StopRepository.html":{}}}],["igenericrepository:19",{"_index":1098,"title":{},"body":{"injectables/LineRepository.html":{},"injectables/LiveDataRepository.html":{},"classes/RouteStopRepository.html":{},"classes/ScheduleRepository.html":{},"injectables/UserRepository.html":{}}}],["igenericrepository:20",{"_index":1463,"title":{},"body":{"classes/PointRepository.html":{},"classes/RouteRepository.html":{}}}],["igenericrepository:21",{"_index":1097,"title":{},"body":{"injectables/LineRepository.html":{},"classes/StopRepository.html":{}}}],["igenericrepository:22",{"_index":297,"title":{},"body":{"injectables/BookingRepository.html":{}}}],["igenericrepository:23",{"_index":2162,"title":{},"body":{"injectables/UserRepository.html":{}}}],["igenericrepository:24",{"_index":1535,"title":{},"body":{"classes/RouteRepository.html":{}}}],["igenericrepository:25",{"_index":1830,"title":{},"body":{"classes/StopRepository.html":{}}}],["igenericrepository:26",{"_index":2025,"title":{},"body":{"injectables/TripRepository.html":{}}}],["igenericrepository:28",{"_index":2166,"title":{},"body":{"injectables/UserRepository.html":{}}}],["igenericrepository:30",{"_index":295,"title":{},"body":{"injectables/BookingRepository.html":{},"injectables/TripRepository.html":{}}}],["igenericrepository:32",{"_index":1099,"title":{},"body":{"injectables/LineRepository.html":{},"injectables/LiveDataRepository.html":{},"classes/PointRepository.html":{},"classes/RouteRepository.html":{},"classes/RouteStopRepository.html":{},"classes/ScheduleRepository.html":{},"classes/StopRepository.html":{},"injectables/TripRepository.html":{}}}],["igenericrepository:41",{"_index":305,"title":{},"body":{"injectables/BookingRepository.html":{},"injectables/LineRepository.html":{},"injectables/LiveDataRepository.html":{},"classes/PointRepository.html":{},"classes/RouteRepository.html":{},"classes/RouteStopRepository.html":{},"classes/ScheduleRepository.html":{}}}],["igenericrepository:46",{"_index":1754,"title":{},"body":{"classes/ScheduleRepository.html":{}}}],["igenericrepository:49",{"_index":301,"title":{},"body":{"injectables/BookingRepository.html":{},"injectables/LineRepository.html":{},"injectables/LiveDataRepository.html":{},"classes/PointRepository.html":{},"classes/RouteRepository.html":{},"classes/RouteStopRepository.html":{},"classes/ScheduleRepository.html":{},"classes/StopRepository.html":{},"injectables/TripRepository.html":{},"injectables/UserRepository.html":{}}}],["igenericrepository:58",{"_index":308,"title":{},"body":{"injectables/BookingRepository.html":{},"injectables/LineRepository.html":{},"injectables/LiveDataRepository.html":{},"classes/PointRepository.html":{},"classes/RouteRepository.html":{},"classes/RouteStopRepository.html":{},"classes/ScheduleRepository.html":{},"classes/StopRepository.html":{},"injectables/TripRepository.html":{},"injectables/UserRepository.html":{}}}],["igenericrepository:75",{"_index":2019,"title":{},"body":{"injectables/TripRepository.html":{}}}],["ignoreexpiration",{"_index":1026,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["implements",{"_index":1419,"title":{},"body":{"classes/OTPStrategy.html":{},"classes/SingleRouteStrategy.html":{},"classes/TransitGateWay.html":{}}}],["import",{"_index":36,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"classes/ArrivalDto.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"entities/Booking.html":{},"injectables/BookingRepository.html":{},"injectables/BookingService.html":{},"controllers/BookingsController.html":{},"classes/Context.html":{},"classes/CreateUserDto.html":{},"injectables/DBUpdateService.html":{},"controllers/DBupdateController.html":{},"injectables/DataService.html":{},"interfaces/FeedEntity-1.html":{},"interfaces/FeedHeader-1.html":{},"interfaces/FeedMessage-1.html":{},"classes/IGenericRepository.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"entities/Line.html":{},"injectables/LineRepository.html":{},"injectables/LineService.html":{},"entities/LiveData.html":{},"injectables/LiveDataRepository.html":{},"controllers/LiveUpdatesController.html":{},"injectables/LiveUpdatesService.html":{},"classes/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"interfaces/NavigatorStrategy.html":{},"entities/NewSchedule.html":{},"classes/NewScheduleService.html":{},"classes/OTPParams.html":{},"injectables/OTPService.html":{},"classes/OTPStrategy.html":{},"entities/Point.html":{},"classes/PointRepository.html":{},"injectables/PointService.html":{},"entities/Route.html":{},"classes/RouteDto.html":{},"classes/RouteInfoDto.html":{},"classes/RouteRepository.html":{},"injectables/RouteService.html":{},"entities/RouteStop.html":{},"classes/RouteStopRepository.html":{},"injectables/RouteStopService.html":{},"controllers/SavedController.html":{},"injectables/SavedService.html":{},"entities/Schedule.html":{},"classes/ScheduleDetailsDto.html":{},"classes/ScheduleRepository.html":{},"injectables/ScheduleService.html":{},"classes/SingleRouteStrategy.html":{},"entities/Stop.html":{},"classes/StopRepository.html":{},"injectables/StopService.html":{},"interfaces/StopTimeEvent.html":{},"interfaces/StopTimeUpdate.html":{},"controllers/TransitController.html":{},"classes/TransitGateWay.html":{},"modules/TransitModule.html":{},"entities/Trip.html":{},"classes/Trip-1.html":{},"interfaces/TripDescriptor-1.html":{},"injectables/TripRepository.html":{},"injectables/TripService.html":{},"interfaces/TripState.html":{},"interfaces/TripUpdate.html":{},"injectables/TripUpdatesListener.html":{},"classes/UpdateTrips.html":{},"entities/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserRepository.html":{},"entities/UserRoute.html":{},"injectables/UserService.html":{},"entities/UserStop.html":{}}}],["imports",{"_index":92,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/TransitModule.html":{},"modules/UserModule.html":{}}}],["inclusive",{"_index":691,"title":{},"body":{"controllers/DBupdateController.html":{}}}],["incrementality",{"_index":781,"title":{},"body":{"interfaces/FeedEntity-1.html":{},"interfaces/FeedHeader-1.html":{},"interfaces/FeedMessage-1.html":{},"interfaces/StopTimeEvent.html":{},"interfaces/StopTimeUpdate.html":{},"classes/Trip-1.html":{},"interfaces/TripDescriptor-1.html":{},"interfaces/TripUpdate.html":{}}}],["incrimentality",{"_index":755,"title":{},"body":{"interfaces/FeedEntity.html":{},"interfaces/FeedHeader.html":{},"interfaces/FeedMessage.html":{},"interfaces/Long.html":{},"interfaces/Position.html":{},"classes/PositionProto.html":{},"interfaces/TripDescriptor.html":{},"interfaces/VehicleDescriptor.html":{},"interfaces/VehiclePosition.html":{}}}],["index",{"_index":7,"title":{"index.html":{}},"body":{"controllers/AppController.html":{},"classes/ArrivalDto.html":{},"injectables/AuthService.html":{},"entities/Booking.html":{},"injectables/BookingRepository.html":{},"injectables/BookingService.html":{},"controllers/BookingsController.html":{},"classes/Context.html":{},"classes/CreateUserDto.html":{},"injectables/DBUpdateService.html":{},"controllers/DBupdateController.html":{},"injectables/DataService.html":{},"interfaces/FeedEntity.html":{},"interfaces/FeedEntity-1.html":{},"interfaces/FeedHeader.html":{},"interfaces/FeedHeader-1.html":{},"interfaces/FeedMessage.html":{},"interfaces/FeedMessage-1.html":{},"classes/IGenericRepository.html":{},"classes/Itinerary.html":{},"injectables/JwtStrategy.html":{},"classes/Leg.html":{},"entities/Line.html":{},"classes/LineDto.html":{},"injectables/LineRepository.html":{},"injectables/LineService.html":{},"entities/LiveData.html":{},"injectables/LiveDataRepository.html":{},"controllers/LiveUpdatesController.html":{},"injectables/LiveUpdatesService.html":{},"injectables/LocalStrategy.html":{},"interfaces/Long.html":{},"interfaces/NavigatorStrategy.html":{},"entities/NewSchedule.html":{},"classes/NewScheduleService.html":{},"classes/OTPParams.html":{},"injectables/OTPService.html":{},"classes/OTPStrategy.html":{},"classes/Plan.html":{},"entities/Point.html":{},"classes/PointDto.html":{},"classes/PointRepository.html":{},"injectables/PointService.html":{},"interfaces/Position.html":{},"classes/PositionProto.html":{},"entities/Route.html":{},"classes/RouteDto.html":{},"classes/RouteInfoDto.html":{},"classes/RouteRepository.html":{},"injectables/RouteService.html":{},"entities/RouteStop.html":{},"classes/RouteStopRepository.html":{},"injectables/RouteStopService.html":{},"controllers/SavedController.html":{},"injectables/SavedService.html":{},"entities/Schedule.html":{},"classes/ScheduleDayDto.html":{},"classes/ScheduleDetailsDto.html":{},"classes/ScheduleDto.html":{},"classes/ScheduleRepository.html":{},"injectables/ScheduleService.html":{},"classes/SingleRouteStrategy.html":{},"classes/Step.html":{},"entities/Stop.html":{},"classes/StopDto.html":{},"classes/StopRepository.html":{},"injectables/StopService.html":{},"interfaces/StopTimeEvent.html":{},"interfaces/StopTimeUpdate.html":{},"controllers/TransitController.html":{},"classes/TransitGateWay.html":{},"entities/Trip.html":{},"classes/Trip-1.html":{},"interfaces/TripDescriptor.html":{},"interfaces/TripDescriptor-1.html":{},"injectables/TripRepository.html":{},"injectables/TripService.html":{},"interfaces/TripState.html":{},"interfaces/TripUpdate.html":{},"injectables/TripUpdatesListener.html":{},"classes/UpdateTrips.html":{},"entities/User.html":{},"controllers/UserController.html":{},"injectables/UserRepository.html":{},"entities/UserRoute.html":{},"injectables/UserService.html":{},"entities/UserStop.html":{},"interfaces/VehicleDescriptor.html":{},"interfaces/VehiclePosition.html":{},"classes/Vertex.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["index()@column({nullable",{"_index":1442,"title":{},"body":{"entities/Point.html":{}}}],["index()@primarygeneratedcolumn({type",{"_index":2118,"title":{},"body":{"entities/User.html":{}}}],["index(['trip_id",{"_index":1990,"title":{},"body":{"entities/Trip.html":{}}}],["index({unique",{"_index":1068,"title":{},"body":{"entities/Line.html":{},"entities/LiveData.html":{},"entities/NewSchedule.html":{},"entities/Route.html":{},"entities/RouteStop.html":{},"entities/Schedule.html":{},"entities/Stop.html":{},"entities/User.html":{},"entities/UserRoute.html":{},"entities/UserStop.html":{}}}],["info",{"_index":3,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"classes/ArrivalDto.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"entities/Booking.html":{},"injectables/BookingRepository.html":{},"injectables/BookingService.html":{},"controllers/BookingsController.html":{},"classes/Context.html":{},"classes/CreateUserDto.html":{},"injectables/DBUpdateService.html":{},"controllers/DBupdateController.html":{},"injectables/DataService.html":{},"interfaces/FeedEntity.html":{},"interfaces/FeedEntity-1.html":{},"interfaces/FeedHeader.html":{},"interfaces/FeedHeader-1.html":{},"interfaces/FeedMessage.html":{},"interfaces/FeedMessage-1.html":{},"classes/IGenericRepository.html":{},"classes/Itinerary.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/Leg.html":{},"entities/Line.html":{},"classes/LineDto.html":{},"injectables/LineRepository.html":{},"injectables/LineService.html":{},"entities/LiveData.html":{},"injectables/LiveDataRepository.html":{},"controllers/LiveUpdatesController.html":{},"injectables/LiveUpdatesService.html":{},"classes/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"interfaces/Long.html":{},"interfaces/NavigatorStrategy.html":{},"entities/NewSchedule.html":{},"classes/NewScheduleService.html":{},"classes/OTPParams.html":{},"injectables/OTPService.html":{},"classes/OTPStrategy.html":{},"classes/Plan.html":{},"entities/Point.html":{},"classes/PointDto.html":{},"classes/PointRepository.html":{},"injectables/PointService.html":{},"interfaces/Position.html":{},"classes/PositionProto.html":{},"entities/Route.html":{},"classes/RouteDto.html":{},"classes/RouteInfoDto.html":{},"classes/RouteRepository.html":{},"injectables/RouteService.html":{},"entities/RouteStop.html":{},"classes/RouteStopRepository.html":{},"injectables/RouteStopService.html":{},"controllers/SavedController.html":{},"injectables/SavedService.html":{},"entities/Schedule.html":{},"classes/ScheduleDayDto.html":{},"classes/ScheduleDetailsDto.html":{},"classes/ScheduleDto.html":{},"classes/ScheduleRepository.html":{},"injectables/ScheduleService.html":{},"classes/SingleRouteStrategy.html":{},"classes/Step.html":{},"entities/Stop.html":{},"classes/StopDto.html":{},"classes/StopRepository.html":{},"injectables/StopService.html":{},"interfaces/StopTimeEvent.html":{},"interfaces/StopTimeUpdate.html":{},"controllers/TransitController.html":{},"classes/TransitGateWay.html":{},"modules/TransitModule.html":{},"entities/Trip.html":{},"classes/Trip-1.html":{},"interfaces/TripDescriptor.html":{},"interfaces/TripDescriptor-1.html":{},"injectables/TripRepository.html":{},"injectables/TripService.html":{},"interfaces/TripState.html":{},"interfaces/TripUpdate.html":{},"injectables/TripUpdatesListener.html":{},"classes/UpdateTrips.html":{},"entities/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserRepository.html":{},"entities/UserRoute.html":{},"injectables/UserService.html":{},"entities/UserStop.html":{},"interfaces/VehicleDescriptor.html":{},"interfaces/VehiclePosition.html":{},"classes/Vertex.html":{}}}],["infoprom",{"_index":612,"title":{},"body":{"controllers/DBupdateController.html":{}}}],["infoprom.data",{"_index":615,"title":{},"body":{"controllers/DBupdateController.html":{}}}],["infoprom.data.stops",{"_index":623,"title":{},"body":{"controllers/DBupdateController.html":{}}}],["inherited",{"_index":292,"title":{},"body":{"injectables/BookingRepository.html":{},"injectables/LineRepository.html":{},"injectables/LiveDataRepository.html":{},"classes/PointRepository.html":{},"classes/RouteRepository.html":{},"classes/RouteStopRepository.html":{},"classes/ScheduleRepository.html":{},"classes/StopRepository.html":{},"injectables/TripRepository.html":{},"injectables/UserRepository.html":{}}}],["init",{"_index":1289,"title":{},"body":{"classes/OTPParams.html":{}}}],["init.destination[2]},${init.destination[3",{"_index":1316,"title":{},"body":{"classes/OTPParams.html":{},"interfaces/TripState.html":{}}}],["init.start[2]},${init.start[3",{"_index":1314,"title":{},"body":{"classes/OTPParams.html":{},"interfaces/TripState.html":{}}}],["init.time",{"_index":1319,"title":{},"body":{"classes/OTPParams.html":{},"interfaces/TripState.html":{}}}],["initialize",{"_index":1309,"title":{},"body":{"classes/OTPParams.html":{},"interfaces/TripState.html":{}}}],["injectable",{"_index":194,"title":{"injectables/AuthService.html":{},"injectables/BookingRepository.html":{},"injectables/BookingService.html":{},"injectables/DBUpdateService.html":{},"injectables/DataService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LineRepository.html":{},"injectables/LineService.html":{},"injectables/LiveDataRepository.html":{},"injectables/LiveUpdatesService.html":{},"injectables/LocalStrategy.html":{},"injectables/OTPService.html":{},"injectables/PointService.html":{},"injectables/RouteService.html":{},"injectables/RouteStopService.html":{},"injectables/SavedService.html":{},"injectables/ScheduleService.html":{},"injectables/StopService.html":{},"injectables/TripRepository.html":{},"injectables/TripService.html":{},"injectables/TripUpdatesListener.html":{},"injectables/UserRepository.html":{},"injectables/UserService.html":{}},"body":{"injectables/AuthService.html":{},"injectables/BookingRepository.html":{},"injectables/BookingService.html":{},"injectables/DBUpdateService.html":{},"injectables/DataService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LineRepository.html":{},"injectables/LineService.html":{},"injectables/LiveDataRepository.html":{},"injectables/LiveUpdatesService.html":{},"injectables/LocalStrategy.html":{},"injectables/OTPService.html":{},"injectables/PointService.html":{},"injectables/RouteService.html":{},"injectables/RouteStopService.html":{},"injectables/SavedService.html":{},"injectables/ScheduleService.html":{},"injectables/StopService.html":{},"injectables/TripRepository.html":{},"injectables/TripService.html":{},"injectables/TripUpdatesListener.html":{},"injectables/UserRepository.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["injectables",{"_index":195,"title":{},"body":{"injectables/AuthService.html":{},"injectables/BookingRepository.html":{},"injectables/BookingService.html":{},"injectables/DBUpdateService.html":{},"injectables/DataService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LineRepository.html":{},"injectables/LineService.html":{},"injectables/LiveDataRepository.html":{},"injectables/LiveUpdatesService.html":{},"injectables/LocalStrategy.html":{},"injectables/OTPService.html":{},"injectables/PointService.html":{},"injectables/RouteService.html":{},"injectables/RouteStopService.html":{},"injectables/SavedService.html":{},"injectables/ScheduleService.html":{},"injectables/StopService.html":{},"injectables/TripRepository.html":{},"injectables/TripService.html":{},"injectables/TripUpdatesListener.html":{},"injectables/UserRepository.html":{},"injectables/UserService.html":{},"overview.html":{}}}],["injectdatasource",{"_index":1100,"title":{},"body":{"injectables/LineRepository.html":{},"classes/NewScheduleService.html":{},"classes/PointRepository.html":{},"classes/RouteRepository.html":{},"classes/ScheduleRepository.html":{},"classes/StopRepository.html":{},"injectables/TripRepository.html":{},"injectables/UserRepository.html":{}}}],["injectrepository",{"_index":309,"title":{},"body":{"injectables/BookingRepository.html":{},"injectables/LineRepository.html":{},"injectables/LiveDataRepository.html":{},"classes/NewScheduleService.html":{},"classes/PointRepository.html":{},"classes/RouteRepository.html":{},"classes/RouteStopRepository.html":{},"classes/ScheduleRepository.html":{},"classes/StopRepository.html":{},"injectables/TripRepository.html":{},"injectables/UserRepository.html":{}}}],["injectrepository(line",{"_index":1102,"title":{},"body":{"injectables/LineRepository.html":{}}}],["injectrepository(route",{"_index":1540,"title":{},"body":{"classes/RouteRepository.html":{}}}],["injectrepository(routestop",{"_index":1602,"title":{},"body":{"classes/RouteStopRepository.html":{}}}],["injectrepository(schedule",{"_index":1756,"title":{},"body":{"classes/ScheduleRepository.html":{}}}],["injectrepository(user",{"_index":2169,"title":{},"body":{"injectables/UserRepository.html":{}}}],["inner",{"_index":1554,"title":{},"body":{"classes/RouteRepository.html":{},"classes/StopRepository.html":{}}}],["insert",{"_index":277,"title":{},"body":{"injectables/BookingRepository.html":{},"classes/IGenericRepository.html":{},"injectables/LineRepository.html":{},"injectables/LineService.html":{},"injectables/LiveDataRepository.html":{},"classes/NewScheduleService.html":{},"classes/PointRepository.html":{},"injectables/PointService.html":{},"classes/RouteRepository.html":{},"injectables/RouteService.html":{},"classes/RouteStopRepository.html":{},"injectables/RouteStopService.html":{},"classes/ScheduleRepository.html":{},"classes/StopRepository.html":{},"injectables/StopService.html":{},"injectables/TripRepository.html":{},"injectables/UserRepository.html":{}}}],["insert(data",{"_index":294,"title":{},"body":{"injectables/BookingRepository.html":{},"classes/IGenericRepository.html":{},"injectables/LiveDataRepository.html":{},"classes/NewScheduleService.html":{},"classes/PointRepository.html":{},"classes/RouteStopRepository.html":{},"classes/ScheduleRepository.html":{},"injectables/TripRepository.html":{},"injectables/UserRepository.html":{}}}],["insert(lines",{"_index":1096,"title":{},"body":{"injectables/LineRepository.html":{},"injectables/LineService.html":{}}}],["insert(points",{"_index":1472,"title":{},"body":{"injectables/PointService.html":{}}}],["insert(routes",{"_index":1534,"title":{},"body":{"classes/RouteRepository.html":{},"injectables/RouteService.html":{}}}],["insert(rs",{"_index":1606,"title":{},"body":{"injectables/RouteStopService.html":{}}}],["insert(stops",{"_index":1835,"title":{},"body":{"classes/StopRepository.html":{},"injectables/StopService.html":{}}}],["insert({user_id",{"_index":2174,"title":{},"body":{"injectables/UserRepository.html":{}}}],["insertbooking",{"_index":325,"title":{},"body":{"injectables/BookingService.html":{}}}],["insertbooking(bookings",{"_index":337,"title":{},"body":{"injectables/BookingService.html":{}}}],["insertone",{"_index":278,"title":{},"body":{"injectables/BookingRepository.html":{},"classes/IGenericRepository.html":{},"injectables/LineRepository.html":{},"injectables/LiveDataRepository.html":{},"classes/PointRepository.html":{},"classes/RouteRepository.html":{},"classes/RouteStopRepository.html":{},"classes/ScheduleRepository.html":{},"classes/StopRepository.html":{},"injectables/TripRepository.html":{},"injectables/UserRepository.html":{}}}],["insertone(booking",{"_index":296,"title":{},"body":{"injectables/BookingRepository.html":{}}}],["insertone(data",{"_index":837,"title":{},"body":{"classes/IGenericRepository.html":{},"injectables/LineRepository.html":{},"injectables/LiveDataRepository.html":{},"classes/PointRepository.html":{},"classes/RouteRepository.html":{},"classes/RouteStopRepository.html":{},"classes/ScheduleRepository.html":{},"classes/StopRepository.html":{},"injectables/TripRepository.html":{},"injectables/UserRepository.html":{}}}],["insertroute",{"_index":1667,"title":{},"body":{"injectables/SavedService.html":{},"injectables/UserRepository.html":{}}}],["insertroute(route_code",{"_index":2163,"title":{},"body":{"injectables/UserRepository.html":{}}}],["insertroute(user",{"_index":1681,"title":{},"body":{"injectables/SavedService.html":{}}}],["insertstop",{"_index":1668,"title":{},"body":{"injectables/SavedService.html":{},"injectables/UserRepository.html":{}}}],["insertstop(code",{"_index":1683,"title":{},"body":{"injectables/SavedService.html":{},"injectables/UserRepository.html":{}}}],["insertstopcodes",{"_index":1573,"title":{},"body":{"injectables/RouteService.html":{}}}],["insertstopcodes(codes",{"_index":1582,"title":{},"body":{"injectables/RouteService.html":{}}}],["insertstops",{"_index":1523,"title":{},"body":{"classes/RouteRepository.html":{}}}],["insertstops(codes",{"_index":1536,"title":{},"body":{"classes/RouteRepository.html":{}}}],["inserttrips",{"_index":1765,"title":{},"body":{"injectables/ScheduleService.html":{},"injectables/TripService.html":{}}}],["inserttrips(trips",{"_index":1776,"title":{},"body":{"injectables/ScheduleService.html":{},"injectables/TripService.html":{}}}],["installation",{"_index":2304,"title":{},"body":{"index.html":{}}}],["installrunning",{"_index":2306,"title":{},"body":{"index.html":{}}}],["int",{"_index":1119,"title":{},"body":{"entities/LiveData.html":{},"entities/NewSchedule.html":{},"entities/Point.html":{},"entities/Route.html":{},"entities/Schedule.html":{}}}],["interface",{"_index":747,"title":{"interfaces/FeedEntity.html":{},"interfaces/FeedEntity-1.html":{},"interfaces/FeedHeader.html":{},"interfaces/FeedHeader-1.html":{},"interfaces/FeedMessage.html":{},"interfaces/FeedMessage-1.html":{},"interfaces/Long.html":{},"interfaces/NavigatorStrategy.html":{},"interfaces/Position.html":{},"interfaces/StopTimeEvent.html":{},"interfaces/StopTimeUpdate.html":{},"interfaces/TripDescriptor.html":{},"interfaces/TripDescriptor-1.html":{},"interfaces/TripState.html":{},"interfaces/TripUpdate.html":{},"interfaces/VehicleDescriptor.html":{},"interfaces/VehiclePosition.html":{}},"body":{"interfaces/FeedEntity.html":{},"interfaces/FeedEntity-1.html":{},"interfaces/FeedHeader.html":{},"interfaces/FeedHeader-1.html":{},"interfaces/FeedMessage.html":{},"interfaces/FeedMessage-1.html":{},"interfaces/Long.html":{},"interfaces/NavigatorStrategy.html":{},"classes/OTPParams.html":{},"interfaces/Position.html":{},"classes/PositionProto.html":{},"interfaces/StopTimeEvent.html":{},"interfaces/StopTimeUpdate.html":{},"classes/Trip-1.html":{},"interfaces/TripDescriptor.html":{},"interfaces/TripDescriptor-1.html":{},"interfaces/TripState.html":{},"interfaces/TripUpdate.html":{},"interfaces/VehicleDescriptor.html":{},"interfaces/VehiclePosition.html":{},"coverage.html":{}}}],["interfaces",{"_index":749,"title":{},"body":{"interfaces/FeedEntity.html":{},"interfaces/FeedEntity-1.html":{},"interfaces/FeedHeader.html":{},"interfaces/FeedHeader-1.html":{},"interfaces/FeedMessage.html":{},"interfaces/FeedMessage-1.html":{},"interfaces/Long.html":{},"interfaces/NavigatorStrategy.html":{},"interfaces/Position.html":{},"interfaces/StopTimeEvent.html":{},"interfaces/StopTimeUpdate.html":{},"interfaces/TripDescriptor.html":{},"interfaces/TripDescriptor-1.html":{},"interfaces/TripState.html":{},"interfaces/TripUpdate.html":{},"interfaces/VehicleDescriptor.html":{},"interfaces/VehiclePosition.html":{},"overview.html":{}}}],["intermediatestops",{"_index":939,"title":{},"body":{"classes/Itinerary.html":{},"classes/Leg.html":{},"classes/Plan.html":{},"classes/Step.html":{},"classes/Vertex.html":{}}}],["intersect",{"_index":1569,"title":{},"body":{"classes/RouteRepository.html":{}}}],["interval",{"_index":1164,"title":{},"body":{"controllers/LiveUpdatesController.html":{},"injectables/LiveUpdatesService.html":{}}}],["interval(30000",{"_index":1182,"title":{},"body":{"controllers/LiveUpdatesController.html":{}}}],["inversejoincolumn",{"_index":1501,"title":{},"body":{"entities/Route.html":{}}}],["io",{"_index":2073,"title":{},"body":{"injectables/TripUpdatesListener.html":{}}}],["isemail",{"_index":445,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isnotempty",{"_index":446,"title":{},"body":{"classes/CreateUserDto.html":{},"entities/User.html":{}}}],["isnotempty()@isemail",{"_index":439,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isnotempty()@minlength(2",{"_index":441,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isnotempty()@minlength(2)@column({nullable",{"_index":2114,"title":{},"body":{"entities/User.html":{}}}],["isnotempty()@minlength(3)@column({nullable",{"_index":2116,"title":{},"body":{"entities/User.html":{}}}],["isnotempty()@minlength(8",{"_index":443,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["it.arrivaldelay",{"_index":997,"title":{},"body":{"classes/Itinerary.html":{},"classes/Leg.html":{},"classes/Plan.html":{},"classes/Step.html":{},"classes/Vertex.html":{}}}],["it.departuredelay",{"_index":998,"title":{},"body":{"classes/Itinerary.html":{},"classes/Leg.html":{},"classes/Plan.html":{},"classes/Step.html":{},"classes/Vertex.html":{}}}],["it.duration",{"_index":1229,"title":{},"body":{"injectables/LiveUpdatesService.html":{}}}],["it.legs",{"_index":1386,"title":{},"body":{"injectables/OTPService.html":{}}}],["it.legs.foreach(leg",{"_index":1379,"title":{},"body":{"injectables/OTPService.html":{}}}],["it.servicedate",{"_index":999,"title":{},"body":{"classes/Itinerary.html":{},"classes/Leg.html":{},"classes/Plan.html":{},"classes/Step.html":{},"classes/Vertex.html":{}}}],["itineraries",{"_index":1001,"title":{},"body":{"classes/Itinerary.html":{},"classes/Leg.html":{},"injectables/OTPService.html":{},"classes/Plan.html":{},"classes/Step.html":{},"classes/Vertex.html":{}}}],["itineraries.push(it",{"_index":1385,"title":{},"body":{"injectables/OTPService.html":{}}}],["itineraries.push(new",{"_index":1408,"title":{},"body":{"injectables/OTPService.html":{}}}],["itinerary",{"_index":857,"title":{"classes/Itinerary.html":{}},"body":{"classes/Itinerary.html":{},"classes/Leg.html":{},"injectables/OTPService.html":{},"classes/OTPStrategy.html":{},"classes/Plan.html":{},"classes/Step.html":{},"classes/Vertex.html":{},"coverage.html":{}}}],["itinerary(it",{"_index":1409,"title":{},"body":{"injectables/OTPService.html":{}}}],["izey",{"_index":477,"title":{},"body":{"injectables/DBUpdateService.html":{}}}],["join",{"_index":1555,"title":{},"body":{"classes/RouteRepository.html":{},"classes/StopRepository.html":{},"index.html":{}}}],["joincolumn",{"_index":1266,"title":{},"body":{"entities/NewSchedule.html":{},"entities/Point.html":{},"entities/Route.html":{},"entities/Schedule.html":{},"entities/Trip.html":{}}}],["joincolumn({name",{"_index":1447,"title":{},"body":{"entities/Point.html":{}}}],["joincolumn({referencedcolumnname",{"_index":1499,"title":{},"body":{"entities/Route.html":{}}}],["jointable",{"_index":1265,"title":{},"body":{"entities/NewSchedule.html":{},"entities/Route.html":{},"entities/Schedule.html":{},"entities/Stop.html":{},"entities/User.html":{}}}],["jwt",{"_index":1020,"title":{},"body":{"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["jwt.strategy",{"_index":186,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtauthguard",{"_index":41,"title":{"injectables/JwtAuthGuard.html":{}},"body":{"controllers/AppController.html":{},"controllers/BookingsController.html":{},"injectables/JwtAuthGuard.html":{},"controllers/SavedController.html":{},"controllers/UserController.html":{},"coverage.html":{}}}],["jwtconstants",{"_index":181,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["jwtconstants.secret",{"_index":190,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{}}}],["jwtfromrequest",{"_index":1024,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["jwtmodule",{"_index":177,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtmodule.register",{"_index":188,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtservice",{"_index":201,"title":{},"body":{"injectables/AuthService.html":{}}}],["jwtstrategy",{"_index":173,"title":{"injectables/JwtStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["kamil",{"_index":2337,"title":{},"body":{"index.html":{}}}],["l",{"_index":1562,"title":{},"body":{"classes/RouteRepository.html":{},"classes/StopRepository.html":{}}}],["l.\"name",{"_index":1560,"title":{},"body":{"classes/RouteRepository.html":{},"classes/StopRepository.html":{}}}],["label",{"_index":769,"title":{},"body":{"interfaces/FeedEntity.html":{},"interfaces/FeedHeader.html":{},"interfaces/FeedMessage.html":{},"interfaces/Long.html":{},"interfaces/Position.html":{},"classes/PositionProto.html":{},"interfaces/TripDescriptor.html":{},"interfaces/VehicleDescriptor.html":{},"interfaces/VehiclePosition.html":{}}}],["lastvaluefrom",{"_index":480,"title":{},"body":{"injectables/DBUpdateService.html":{},"injectables/LiveUpdatesService.html":{},"injectables/OTPService.html":{}}}],["lastvaluefrom(this.http.get(this.uri",{"_index":1209,"title":{},"body":{"injectables/LiveUpdatesService.html":{},"injectables/OTPService.html":{}}}],["lastvaluefrom(this.http.get(this.url",{"_index":482,"title":{},"body":{"injectables/DBUpdateService.html":{}}}],["lastvaluefrom(this.http.get(url)).catch(e",{"_index":1373,"title":{},"body":{"injectables/OTPService.html":{}}}],["lat",{"_index":895,"title":{},"body":{"classes/Itinerary.html":{},"classes/Leg.html":{},"classes/Plan.html":{},"classes/Step.html":{},"classes/Vertex.html":{}}}],["latitude",{"_index":125,"title":{},"body":{"classes/ArrivalDto.html":{},"interfaces/FeedEntity.html":{},"interfaces/FeedHeader.html":{},"interfaces/FeedMessage.html":{},"interfaces/Long.html":{},"entities/Point.html":{},"classes/PointDto.html":{},"interfaces/Position.html":{},"classes/PositionProto.html":{},"entities/Stop.html":{},"classes/StopDto.html":{},"classes/StopRepository.html":{},"interfaces/TripDescriptor.html":{},"interfaces/VehicleDescriptor.html":{},"interfaces/VehiclePosition.html":{}}}],["leg",{"_index":870,"title":{"classes/Leg.html":{}},"body":{"classes/Itinerary.html":{},"classes/Leg.html":{},"injectables/OTPService.html":{},"classes/OTPStrategy.html":{},"classes/Plan.html":{},"classes/Step.html":{},"classes/Vertex.html":{},"coverage.html":{}}}],["leg(leg",{"_index":1406,"title":{},"body":{"injectables/OTPService.html":{}}}],["leg.agencyname",{"_index":958,"title":{},"body":{"classes/Itinerary.html":{},"classes/Leg.html":{},"classes/Plan.html":{},"classes/Step.html":{},"classes/Vertex.html":{}}}],["leg.agencytimezoneoffset",{"_index":960,"title":{},"body":{"classes/Itinerary.html":{},"classes/Leg.html":{},"classes/Plan.html":{},"classes/Step.html":{},"classes/Vertex.html":{}}}],["leg.from.stopcode",{"_index":1382,"title":{},"body":{"injectables/OTPService.html":{}}}],["leg.intermediatestops.foreach(s",{"_index":1399,"title":{},"body":{"injectables/OTPService.html":{}}}],["leg.leggeometry.points",{"_index":1407,"title":{},"body":{"injectables/OTPService.html":{}}}],["leg.mode",{"_index":950,"title":{},"body":{"classes/Itinerary.html":{},"classes/Leg.html":{},"injectables/OTPService.html":{},"classes/Plan.html":{},"classes/Step.html":{},"classes/Vertex.html":{}}}],["leg.routeshortname",{"_index":969,"title":{},"body":{"classes/Itinerary.html":{},"classes/Leg.html":{},"classes/Plan.html":{},"classes/Step.html":{},"classes/Vertex.html":{}}}],["leg.servicedate",{"_index":956,"title":{},"body":{"classes/Itinerary.html":{},"classes/Leg.html":{},"classes/Plan.html":{},"classes/Step.html":{},"classes/Vertex.html":{}}}],["leg.setflexgrow(it.duration",{"_index":1412,"title":{},"body":{"injectables/OTPService.html":{}}}],["leg.steps.map(s",{"_index":1396,"title":{},"body":{"injectables/OTPService.html":{}}}],["leg.to.stopcode",{"_index":1383,"title":{},"body":{"injectables/OTPService.html":{}}}],["leg.tripid",{"_index":1381,"title":{},"body":{"injectables/OTPService.html":{}}}],["leggeometry",{"_index":940,"title":{},"body":{"classes/Itinerary.html":{},"classes/Leg.html":{},"classes/Plan.html":{},"classes/Step.html":{},"classes/Vertex.html":{}}}],["legs",{"_index":862,"title":{},"body":{"classes/Itinerary.html":{},"classes/Leg.html":{},"injectables/OTPService.html":{},"classes/Plan.html":{},"classes/Step.html":{},"classes/Vertex.html":{}}}],["legs.push(leg",{"_index":1384,"title":{},"body":{"injectables/OTPService.html":{}}}],["legs.push(new",{"_index":1405,"title":{},"body":{"injectables/OTPService.html":{}}}],["license",{"_index":2343,"title":{},"body":{"index.html":{},"properties.html":{}}}],["licensed",{"_index":2320,"title":{},"body":{"index.html":{}}}],["line",{"_index":540,"title":{"entities/Line.html":{}},"body":{"controllers/DBupdateController.html":{},"interfaces/FeedEntity-1.html":{},"interfaces/FeedHeader-1.html":{},"interfaces/FeedMessage-1.html":{},"entities/Line.html":{},"injectables/LineRepository.html":{},"injectables/LineService.html":{},"injectables/LiveDataRepository.html":{},"controllers/LiveUpdatesController.html":{},"entities/NewSchedule.html":{},"entities/Route.html":{},"entities/Schedule.html":{},"classes/StopRepository.html":{},"interfaces/StopTimeEvent.html":{},"interfaces/StopTimeUpdate.html":{},"controllers/TransitController.html":{},"modules/TransitModule.html":{},"classes/Trip-1.html":{},"interfaces/TripDescriptor-1.html":{},"interfaces/TripUpdate.html":{},"coverage.html":{}}}],["line.code",{"_index":562,"title":{},"body":{"controllers/DBupdateController.html":{}}}],["line.entity",{"_index":1497,"title":{},"body":{"entities/Route.html":{}}}],["line.id",{"_index":560,"title":{},"body":{"controllers/DBupdateController.html":{}}}],["line.name",{"_index":566,"title":{},"body":{"controllers/DBupdateController.html":{},"controllers/LiveUpdatesController.html":{}}}],["line.routes",{"_index":1488,"title":{},"body":{"entities/Route.html":{}}}],["line.routes.length",{"_index":564,"title":{},"body":{"controllers/DBupdateController.html":{}}}],["line.routes.map((route",{"_index":570,"title":{},"body":{"controllers/DBupdateController.html":{}}}],["line.service",{"_index":729,"title":{},"body":{"injectables/DataService.html":{}}}],["line_code",{"_index":1725,"title":{},"body":{"classes/ScheduleDto.html":{}}}],["linecode",{"_index":126,"title":{},"body":{"classes/ArrivalDto.html":{},"entities/LiveData.html":{}}}],["linecodes",{"_index":1183,"title":{},"body":{"controllers/LiveUpdatesController.html":{}}}],["linedto",{"_index":1083,"title":{"classes/LineDto.html":{}},"body":{"classes/LineDto.html":{},"coverage.html":{}}}],["lineid",{"_index":1481,"title":{},"body":{"entities/Route.html":{},"classes/RouteDto.html":{},"classes/RouteInfoDto.html":{},"classes/RouteRepository.html":{},"injectables/RouteService.html":{}}}],["linerepo",{"_index":1094,"title":{},"body":{"injectables/LineRepository.html":{}}}],["linerepository",{"_index":1090,"title":{"injectables/LineRepository.html":{}},"body":{"injectables/LineRepository.html":{},"injectables/LineService.html":{},"modules/TransitModule.html":{},"coverage.html":{},"overview.html":{}}}],["lines",{"_index":483,"title":{},"body":{"injectables/DBUpdateService.html":{},"controllers/DBupdateController.html":{},"injectables/DataService.html":{},"interfaces/FeedEntity-1.html":{},"interfaces/FeedHeader-1.html":{},"interfaces/FeedMessage-1.html":{},"injectables/LineRepository.html":{},"injectables/LineService.html":{},"entities/Stop.html":{},"classes/StopRepository.html":{},"injectables/StopService.html":{},"interfaces/StopTimeEvent.html":{},"interfaces/StopTimeUpdate.html":{},"classes/Trip-1.html":{},"interfaces/TripDescriptor-1.html":{},"interfaces/TripUpdate.html":{}}}],["lines.push(newline",{"_index":572,"title":{},"body":{"controllers/DBupdateController.html":{}}}],["lines/live",{"_index":805,"title":{},"body":{"interfaces/FeedEntity-1.html":{},"interfaces/FeedHeader-1.html":{},"interfaces/FeedMessage-1.html":{},"controllers/LiveUpdatesController.html":{},"interfaces/StopTimeEvent.html":{},"interfaces/StopTimeUpdate.html":{},"classes/Trip-1.html":{},"interfaces/TripDescriptor-1.html":{},"interfaces/TripUpdate.html":{}}}],["lines:string",{"_index":1859,"title":{},"body":{"classes/StopRepository.html":{}}}],["lineservice",{"_index":698,"title":{"injectables/LineService.html":{}},"body":{"injectables/DataService.html":{},"injectables/LineService.html":{},"modules/TransitModule.html":{},"coverage.html":{},"overview.html":{}}}],["linesservice",{"_index":713,"title":{},"body":{"injectables/DataService.html":{}}}],["listeners/trips.update.listener",{"_index":1971,"title":{},"body":{"modules/TransitModule.html":{}}}],["live",{"_index":693,"title":{},"body":{"injectables/DataService.html":{},"interfaces/FeedEntity-1.html":{},"interfaces/FeedHeader-1.html":{},"interfaces/FeedMessage-1.html":{},"controllers/LiveUpdatesController.html":{},"interfaces/StopTimeEvent.html":{},"interfaces/StopTimeUpdate.html":{},"classes/Trip-1.html":{},"interfaces/TripDescriptor-1.html":{},"interfaces/TripUpdate.html":{}}}],["livedata",{"_index":1113,"title":{"entities/LiveData.html":{}},"body":{"entities/LiveData.html":{},"injectables/LiveDataRepository.html":{},"controllers/LiveUpdatesController.html":{},"modules/TransitModule.html":{},"coverage.html":{}}}],["livedata.push(data",{"_index":1194,"title":{},"body":{"controllers/LiveUpdatesController.html":{}}}],["livedatabuilder",{"_index":1199,"title":{},"body":{"injectables/LiveUpdatesService.html":{}}}],["livedatabuilder(stopcode",{"_index":1203,"title":{},"body":{"injectables/LiveUpdatesService.html":{}}}],["livedatarepository",{"_index":711,"title":{"injectables/LiveDataRepository.html":{}},"body":{"injectables/DataService.html":{},"injectables/LiveDataRepository.html":{},"modules/TransitModule.html":{},"coverage.html":{},"overview.html":{}}}],["liveservice",{"_index":1169,"title":{},"body":{"controllers/LiveUpdatesController.html":{}}}],["liveupdatescontroller",{"_index":1144,"title":{"controllers/LiveUpdatesController.html":{}},"body":{"controllers/LiveUpdatesController.html":{},"modules/TransitModule.html":{},"coverage.html":{}}}],["liveupdatesservice",{"_index":778,"title":{"injectables/LiveUpdatesService.html":{}},"body":{"interfaces/FeedEntity-1.html":{},"interfaces/FeedHeader-1.html":{},"interfaces/FeedMessage-1.html":{},"controllers/LiveUpdatesController.html":{},"injectables/LiveUpdatesService.html":{},"interfaces/StopTimeEvent.html":{},"interfaces/StopTimeUpdate.html":{},"modules/TransitModule.html":{},"classes/Trip-1.html":{},"interfaces/TripDescriptor-1.html":{},"interfaces/TripUpdate.html":{},"coverage.html":{},"overview.html":{}}}],["local",{"_index":1239,"title":{},"body":{"injectables/LocalStrategy.html":{},"dependencies.html":{}}}],["local.strategy",{"_index":187,"title":{},"body":{"modules/AuthModule.html":{}}}],["localauthguard",{"_index":44,"title":{"classes/LocalAuthGuard.html":{}},"body":{"controllers/AppController.html":{},"classes/LocalAuthGuard.html":{},"controllers/UserController.html":{},"coverage.html":{}}}],["locale",{"_index":1278,"title":{},"body":{"classes/OTPParams.html":{},"interfaces/TripState.html":{}}}],["locale=${this.locale",{"_index":1336,"title":{},"body":{"classes/OTPParams.html":{},"interfaces/TripState.html":{}}}],["localstrategy",{"_index":174,"title":{"injectables/LocalStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/LocalStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["login",{"_index":13,"title":{},"body":{"controllers/AppController.html":{},"injectables/AuthService.html":{},"controllers/UserController.html":{}}}],["login(@request",{"_index":71,"title":{},"body":{"controllers/AppController.html":{},"controllers/UserController.html":{}}}],["login(req",{"_index":32,"title":{},"body":{"controllers/AppController.html":{},"controllers/UserController.html":{}}}],["login(user",{"_index":209,"title":{},"body":{"injectables/AuthService.html":{}}}],["lon",{"_index":894,"title":{},"body":{"classes/Itinerary.html":{},"classes/Leg.html":{},"classes/Plan.html":{},"classes/Step.html":{},"classes/Vertex.html":{}}}],["long",{"_index":763,"title":{"interfaces/Long.html":{}},"body":{"interfaces/FeedEntity.html":{},"interfaces/FeedHeader.html":{},"interfaces/FeedMessage.html":{},"controllers/LiveUpdatesController.html":{},"interfaces/Long.html":{},"interfaces/Position.html":{},"classes/PositionProto.html":{},"interfaces/TripDescriptor.html":{},"interfaces/VehicleDescriptor.html":{},"interfaces/VehiclePosition.html":{},"coverage.html":{}}}],["longitude",{"_index":127,"title":{},"body":{"classes/ArrivalDto.html":{},"interfaces/FeedEntity.html":{},"interfaces/FeedHeader.html":{},"interfaces/FeedMessage.html":{},"interfaces/Long.html":{},"entities/Point.html":{},"classes/PointDto.html":{},"interfaces/Position.html":{},"classes/PositionProto.html":{},"entities/Stop.html":{},"classes/StopDto.html":{},"classes/StopRepository.html":{},"interfaces/TripDescriptor.html":{},"interfaces/VehicleDescriptor.html":{},"interfaces/VehiclePosition.html":{}}}],["low",{"_index":764,"title":{},"body":{"interfaces/FeedEntity.html":{},"interfaces/FeedHeader.html":{},"interfaces/FeedMessage.html":{},"interfaces/Long.html":{},"interfaces/Position.html":{},"classes/PositionProto.html":{},"interfaces/TripDescriptor.html":{},"interfaces/VehicleDescriptor.html":{},"interfaces/VehiclePosition.html":{}}}],["manytomany",{"_index":1264,"title":{},"body":{"entities/NewSchedule.html":{},"entities/Route.html":{},"entities/Schedule.html":{},"entities/Stop.html":{},"entities/User.html":{}}}],["manytoone",{"_index":1445,"title":{},"body":{"entities/Point.html":{},"entities/Route.html":{},"entities/Trip.html":{}}}],["manytoone(undefined",{"_index":1438,"title":{},"body":{"entities/Point.html":{},"entities/Route.html":{}}}],["map(r",{"_index":2182,"title":{},"body":{"injectables/UserRepository.html":{}}}],["map(s",{"_index":2179,"title":{},"body":{"injectables/UserRepository.html":{}}}],["matching",{"_index":78,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"classes/ArrivalDto.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"entities/Booking.html":{},"injectables/BookingRepository.html":{},"injectables/BookingService.html":{},"controllers/BookingsController.html":{},"classes/Context.html":{},"classes/CreateUserDto.html":{},"injectables/DBUpdateService.html":{},"controllers/DBupdateController.html":{},"injectables/DataService.html":{},"interfaces/FeedEntity.html":{},"interfaces/FeedEntity-1.html":{},"interfaces/FeedHeader.html":{},"interfaces/FeedHeader-1.html":{},"interfaces/FeedMessage.html":{},"interfaces/FeedMessage-1.html":{},"classes/IGenericRepository.html":{},"classes/Itinerary.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/Leg.html":{},"entities/Line.html":{},"classes/LineDto.html":{},"injectables/LineRepository.html":{},"injectables/LineService.html":{},"entities/LiveData.html":{},"injectables/LiveDataRepository.html":{},"controllers/LiveUpdatesController.html":{},"injectables/LiveUpdatesService.html":{},"classes/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"interfaces/Long.html":{},"interfaces/NavigatorStrategy.html":{},"entities/NewSchedule.html":{},"classes/NewScheduleService.html":{},"classes/OTPParams.html":{},"injectables/OTPService.html":{},"classes/OTPStrategy.html":{},"classes/Plan.html":{},"entities/Point.html":{},"classes/PointDto.html":{},"classes/PointRepository.html":{},"injectables/PointService.html":{},"interfaces/Position.html":{},"classes/PositionProto.html":{},"entities/Route.html":{},"classes/RouteDto.html":{},"classes/RouteInfoDto.html":{},"classes/RouteRepository.html":{},"injectables/RouteService.html":{},"entities/RouteStop.html":{},"classes/RouteStopRepository.html":{},"injectables/RouteStopService.html":{},"controllers/SavedController.html":{},"injectables/SavedService.html":{},"entities/Schedule.html":{},"classes/ScheduleDayDto.html":{},"classes/ScheduleDetailsDto.html":{},"classes/ScheduleDto.html":{},"classes/ScheduleRepository.html":{},"injectables/ScheduleService.html":{},"classes/SingleRouteStrategy.html":{},"classes/Step.html":{},"entities/Stop.html":{},"classes/StopDto.html":{},"classes/StopRepository.html":{},"injectables/StopService.html":{},"interfaces/StopTimeEvent.html":{},"interfaces/StopTimeUpdate.html":{},"controllers/TransitController.html":{},"classes/TransitGateWay.html":{},"modules/TransitModule.html":{},"entities/Trip.html":{},"classes/Trip-1.html":{},"interfaces/TripDescriptor.html":{},"interfaces/TripDescriptor-1.html":{},"injectables/TripRepository.html":{},"injectables/TripService.html":{},"interfaces/TripState.html":{},"interfaces/TripUpdate.html":{},"injectables/TripUpdatesListener.html":{},"classes/UpdateTrips.html":{},"entities/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserRepository.html":{},"entities/UserRoute.html":{},"injectables/UserService.html":{},"entities/UserStop.html":{},"interfaces/VehicleDescriptor.html":{},"interfaces/VehiclePosition.html":{},"classes/Vertex.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["math.ceil(min",{"_index":685,"title":{},"body":{"controllers/DBupdateController.html":{}}}],["math.floor(arr.departuremins/60",{"_index":824,"title":{},"body":{"interfaces/FeedEntity-1.html":{},"interfaces/FeedHeader-1.html":{},"interfaces/FeedMessage-1.html":{},"interfaces/StopTimeEvent.html":{},"interfaces/StopTimeUpdate.html":{},"classes/Trip-1.html":{},"interfaces/TripDescriptor-1.html":{},"interfaces/TripUpdate.html":{}}}],["math.floor(it.duration",{"_index":1228,"title":{},"body":{"injectables/LiveUpdatesService.html":{}}}],["math.floor(it.duration/60",{"_index":986,"title":{},"body":{"classes/Itinerary.html":{},"classes/Leg.html":{},"classes/Plan.html":{},"classes/Step.html":{},"classes/Vertex.html":{}}}],["math.floor(it.transittime/60",{"_index":987,"title":{},"body":{"classes/Itinerary.html":{},"classes/Leg.html":{},"classes/Plan.html":{},"classes/Step.html":{},"classes/Vertex.html":{}}}],["math.floor(it.waitingtime/60",{"_index":989,"title":{},"body":{"classes/Itinerary.html":{},"classes/Leg.html":{},"classes/Plan.html":{},"classes/Step.html":{},"classes/Vertex.html":{}}}],["math.floor(it.walkdistance",{"_index":991,"title":{},"body":{"classes/Itinerary.html":{},"classes/Leg.html":{},"classes/Plan.html":{},"classes/Step.html":{},"classes/Vertex.html":{}}}],["math.floor(it.walktime/60",{"_index":996,"title":{},"body":{"classes/Itinerary.html":{},"classes/Leg.html":{},"classes/Plan.html":{},"classes/Step.html":{},"classes/Vertex.html":{}}}],["math.floor(leg.arrivaldelay/60",{"_index":967,"title":{},"body":{"classes/Itinerary.html":{},"classes/Leg.html":{},"classes/Plan.html":{},"classes/Step.html":{},"classes/Vertex.html":{}}}],["math.floor(leg.departuredelay/60",{"_index":974,"title":{},"body":{"classes/Itinerary.html":{},"classes/Leg.html":{},"classes/Plan.html":{},"classes/Step.html":{},"classes/Vertex.html":{}}}],["math.floor(leg.distance",{"_index":965,"title":{},"body":{"classes/Itinerary.html":{},"classes/Leg.html":{},"classes/Plan.html":{},"classes/Step.html":{},"classes/Vertex.html":{}}}],["math.floor(leg.duration/60",{"_index":946,"title":{},"body":{"classes/Itinerary.html":{},"classes/Leg.html":{},"classes/Plan.html":{},"classes/Step.html":{},"classes/Vertex.html":{}}}],["math.floor(leg.transittime/60",{"_index":948,"title":{},"body":{"classes/Itinerary.html":{},"classes/Leg.html":{},"classes/Plan.html":{},"classes/Step.html":{},"classes/Vertex.html":{}}}],["math.floor(math.random",{"_index":687,"title":{},"body":{"controllers/DBupdateController.html":{}}}],["math.floor(max",{"_index":686,"title":{},"body":{"controllers/DBupdateController.html":{}}}],["math.floor(step.distance",{"_index":898,"title":{},"body":{"classes/Itinerary.html":{},"classes/Leg.html":{},"classes/Plan.html":{},"classes/Step.html":{},"classes/Vertex.html":{}}}],["math.floor(this.duration/totalduration",{"_index":984,"title":{},"body":{"classes/Itinerary.html":{},"classes/Leg.html":{},"classes/Plan.html":{},"classes/Step.html":{},"classes/Vertex.html":{}}}],["max",{"_index":527,"title":{},"body":{"controllers/DBupdateController.html":{}}}],["maximum",{"_index":688,"title":{},"body":{"controllers/DBupdateController.html":{}}}],["maxwalkdistance",{"_index":1279,"title":{},"body":{"classes/OTPParams.html":{},"interfaces/TripState.html":{}}}],["maxwalkdistance=${this.maxwalkdistance",{"_index":1330,"title":{},"body":{"classes/OTPParams.html":{},"interfaces/TripState.html":{}}}],["message",{"_index":795,"title":{},"body":{"interfaces/FeedEntity-1.html":{},"interfaces/FeedHeader-1.html":{},"interfaces/FeedMessage-1.html":{},"interfaces/StopTimeEvent.html":{},"interfaces/StopTimeUpdate.html":{},"classes/Trip-1.html":{},"interfaces/TripDescriptor-1.html":{},"interfaces/TripUpdate.html":{}}}],["metadata",{"_index":2279,"title":{},"body":{"dependencies.html":{}}}],["method",{"_index":2381,"title":{},"body":{"miscellaneous/variables.html":{}}}],["methods",{"_index":8,"title":{},"body":{"controllers/AppController.html":{},"injectables/AuthService.html":{},"injectables/BookingRepository.html":{},"injectables/BookingService.html":{},"controllers/BookingsController.html":{},"classes/Context.html":{},"injectables/DBUpdateService.html":{},"controllers/DBupdateController.html":{},"classes/IGenericRepository.html":{},"classes/Itinerary.html":{},"injectables/JwtStrategy.html":{},"classes/Leg.html":{},"injectables/LineRepository.html":{},"injectables/LineService.html":{},"injectables/LiveDataRepository.html":{},"controllers/LiveUpdatesController.html":{},"injectables/LiveUpdatesService.html":{},"injectables/LocalStrategy.html":{},"interfaces/NavigatorStrategy.html":{},"classes/NewScheduleService.html":{},"classes/OTPParams.html":{},"injectables/OTPService.html":{},"classes/OTPStrategy.html":{},"classes/PointRepository.html":{},"injectables/PointService.html":{},"classes/PositionProto.html":{},"classes/RouteRepository.html":{},"injectables/RouteService.html":{},"classes/RouteStopRepository.html":{},"injectables/RouteStopService.html":{},"controllers/SavedController.html":{},"injectables/SavedService.html":{},"classes/ScheduleRepository.html":{},"injectables/ScheduleService.html":{},"classes/SingleRouteStrategy.html":{},"classes/StopRepository.html":{},"injectables/StopService.html":{},"controllers/TransitController.html":{},"classes/TransitGateWay.html":{},"classes/Trip-1.html":{},"injectables/TripRepository.html":{},"injectables/TripService.html":{},"injectables/TripUpdatesListener.html":{},"controllers/UserController.html":{},"injectables/UserRepository.html":{},"injectables/UserService.html":{},"classes/Vertex.html":{}}}],["min",{"_index":529,"title":{},"body":{"controllers/DBupdateController.html":{}}}],["minimum",{"_index":690,"title":{},"body":{"controllers/DBupdateController.html":{}}}],["minlength",{"_index":447,"title":{},"body":{"classes/CreateUserDto.html":{},"entities/User.html":{}}}],["minlength(2",{"_index":450,"title":{},"body":{"classes/CreateUserDto.html":{},"entities/User.html":{}}}],["minlength(3",{"_index":2121,"title":{},"body":{"entities/User.html":{}}}],["minlength(5",{"_index":2120,"title":{},"body":{"entities/User.html":{}}}],["minlength(8",{"_index":449,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["minute",{"_index":652,"title":{},"body":{"controllers/DBupdateController.html":{}}}],["miscellaneous",{"_index":2287,"title":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["mit",{"_index":2319,"title":{},"body":{"index.html":{}}}],["ml_code",{"_index":1726,"title":{},"body":{"classes/ScheduleDto.html":{}}}],["mode",{"_index":934,"title":{},"body":{"classes/Itinerary.html":{},"classes/Leg.html":{},"classes/OTPParams.html":{},"classes/Plan.html":{},"classes/Step.html":{},"interfaces/TripState.html":{},"classes/Vertex.html":{},"index.html":{}}}],["mode=${this.mode",{"_index":1329,"title":{},"body":{"classes/OTPParams.html":{},"interfaces/TripState.html":{}}}],["module",{"_index":79,"title":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/TransitModule.html":{},"modules/UserModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/TransitModule.html":{},"modules/UserModule.html":{}}}],["modules",{"_index":81,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/TransitModule.html":{},"modules/UserModule.html":{},"modules.html":{},"overview.html":{}}}],["month",{"_index":1342,"title":{},"body":{"classes/OTPParams.html":{},"interfaces/TripState.html":{}}}],["month.length",{"_index":1345,"title":{},"body":{"classes/OTPParams.html":{},"interfaces/TripState.html":{}}}],["more",{"_index":2332,"title":{},"body":{"index.html":{}}}],["msg",{"_index":213,"title":{},"body":{"injectables/AuthService.html":{},"injectables/BookingService.html":{},"classes/TransitGateWay.html":{}}}],["myśliwiec",{"_index":2338,"title":{},"body":{"index.html":{}}}],["name",{"_index":22,"title":{},"body":{"controllers/AppController.html":{},"classes/ArrivalDto.html":{},"injectables/AuthService.html":{},"injectables/BookingRepository.html":{},"injectables/BookingService.html":{},"controllers/BookingsController.html":{},"classes/Context.html":{},"classes/CreateUserDto.html":{},"injectables/DBUpdateService.html":{},"controllers/DBupdateController.html":{},"injectables/DataService.html":{},"classes/IGenericRepository.html":{},"classes/Itinerary.html":{},"injectables/JwtStrategy.html":{},"classes/Leg.html":{},"entities/Line.html":{},"classes/LineDto.html":{},"injectables/LineRepository.html":{},"injectables/LineService.html":{},"injectables/LiveDataRepository.html":{},"controllers/LiveUpdatesController.html":{},"injectables/LiveUpdatesService.html":{},"injectables/LocalStrategy.html":{},"interfaces/NavigatorStrategy.html":{},"classes/NewScheduleService.html":{},"classes/OTPParams.html":{},"injectables/OTPService.html":{},"classes/OTPStrategy.html":{},"classes/Plan.html":{},"classes/PointRepository.html":{},"injectables/PointService.html":{},"classes/PositionProto.html":{},"entities/Route.html":{},"classes/RouteInfoDto.html":{},"classes/RouteRepository.html":{},"injectables/RouteService.html":{},"classes/RouteStopRepository.html":{},"injectables/RouteStopService.html":{},"controllers/SavedController.html":{},"injectables/SavedService.html":{},"classes/ScheduleDetailsDto.html":{},"classes/ScheduleRepository.html":{},"injectables/ScheduleService.html":{},"classes/SingleRouteStrategy.html":{},"classes/Step.html":{},"classes/StopRepository.html":{},"injectables/StopService.html":{},"controllers/TransitController.html":{},"classes/TransitGateWay.html":{},"classes/Trip-1.html":{},"injectables/TripRepository.html":{},"injectables/TripService.html":{},"injectables/TripUpdatesListener.html":{},"classes/UpdateTrips.html":{},"entities/User.html":{},"controllers/UserController.html":{},"injectables/UserRepository.html":{},"injectables/UserService.html":{},"classes/Vertex.html":{}}}],["navigator/context",{"_index":1968,"title":{},"body":{"modules/TransitModule.html":{}}}],["navigatorstrategy",{"_index":423,"title":{"interfaces/NavigatorStrategy.html":{}},"body":{"classes/Context.html":{},"interfaces/NavigatorStrategy.html":{},"classes/OTPStrategy.html":{},"classes/SingleRouteStrategy.html":{},"coverage.html":{}}}],["nest",{"_index":2301,"title":{},"body":{"index.html":{}}}],["nestframework",{"_index":2342,"title":{},"body":{"index.html":{}}}],["nestjs",{"_index":2265,"title":{},"body":{"dependencies.html":{}}}],["nestjs/axios",{"_index":430,"title":{},"body":{"classes/Context.html":{},"injectables/DBUpdateService.html":{},"injectables/LiveUpdatesService.html":{},"interfaces/NavigatorStrategy.html":{},"injectables/OTPService.html":{},"classes/OTPStrategy.html":{},"modules/TransitModule.html":{},"dependencies.html":{}}}],["nestjs/common",{"_index":38,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/BookingRepository.html":{},"injectables/BookingService.html":{},"controllers/BookingsController.html":{},"injectables/DBUpdateService.html":{},"controllers/DBupdateController.html":{},"injectables/DataService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LineRepository.html":{},"injectables/LineService.html":{},"injectables/LiveDataRepository.html":{},"controllers/LiveUpdatesController.html":{},"injectables/LiveUpdatesService.html":{},"injectables/LocalStrategy.html":{},"injectables/OTPService.html":{},"injectables/PointService.html":{},"injectables/RouteService.html":{},"injectables/RouteStopService.html":{},"controllers/SavedController.html":{},"injectables/SavedService.html":{},"injectables/ScheduleService.html":{},"injectables/StopService.html":{},"controllers/TransitController.html":{},"modules/TransitModule.html":{},"injectables/TripRepository.html":{},"injectables/TripService.html":{},"injectables/TripUpdatesListener.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserRepository.html":{},"injectables/UserService.html":{},"dependencies.html":{}}}],["nestjs/common/decorators/http/route",{"_index":1157,"title":{},"body":{"controllers/LiveUpdatesController.html":{},"controllers/TransitController.html":{}}}],["nestjs/common/enums",{"_index":218,"title":{},"body":{"injectables/AuthService.html":{}}}],["nestjs/common/exceptions",{"_index":220,"title":{},"body":{"injectables/AuthService.html":{}}}],["nestjs/config",{"_index":94,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":2247,"title":{},"body":{"dependencies.html":{}}}],["nestjs/event",{"_index":106,"title":{},"body":{"modules/AppModule.html":{},"injectables/BookingService.html":{},"injectables/TripUpdatesListener.html":{},"dependencies.html":{}}}],["nestjs/jwt",{"_index":178,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"dependencies.html":{}}}],["nestjs/passport",{"_index":1011,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"dependencies.html":{}}}],["nestjs/passport/dist",{"_index":180,"title":{},"body":{"modules/AuthModule.html":{}}}],["nestjs/platform",{"_index":2250,"title":{},"body":{"dependencies.html":{}}}],["nestjs/schedule",{"_index":109,"title":{},"body":{"modules/AppModule.html":{},"controllers/LiveUpdatesController.html":{},"injectables/LiveUpdatesService.html":{},"dependencies.html":{}}}],["nestjs/typeorm",{"_index":96,"title":{},"body":{"modules/AppModule.html":{},"injectables/BookingRepository.html":{},"injectables/LineRepository.html":{},"injectables/LiveDataRepository.html":{},"classes/NewScheduleService.html":{},"classes/PointRepository.html":{},"classes/RouteRepository.html":{},"classes/RouteStopRepository.html":{},"classes/ScheduleRepository.html":{},"classes/StopRepository.html":{},"modules/TransitModule.html":{},"injectables/TripRepository.html":{},"modules/UserModule.html":{},"injectables/UserRepository.html":{},"dependencies.html":{}}}],["nestjs/websockets",{"_index":1941,"title":{},"body":{"classes/TransitGateWay.html":{},"dependencies.html":{}}}],["nestjs/websockets/decorators",{"_index":1944,"title":{},"body":{"classes/TransitGateWay.html":{}}}],["new",{"_index":236,"title":{},"body":{"injectables/AuthService.html":{},"injectables/BookingService.html":{},"controllers/DBupdateController.html":{},"classes/Itinerary.html":{},"classes/Leg.html":{},"controllers/LiveUpdatesController.html":{},"injectables/LiveUpdatesService.html":{},"injectables/LocalStrategy.html":{},"classes/OTPParams.html":{},"injectables/OTPService.html":{},"classes/Plan.html":{},"classes/Step.html":{},"controllers/TransitController.html":{},"interfaces/TripState.html":{},"classes/Vertex.html":{},"coverage.html":{}}}],["new_date",{"_index":1338,"title":{},"body":{"classes/OTPParams.html":{},"interfaces/TripState.html":{}}}],["new_date.getdate().tostring",{"_index":1344,"title":{},"body":{"classes/OTPParams.html":{},"interfaces/TripState.html":{}}}],["new_date.getfullyear",{"_index":1341,"title":{},"body":{"classes/OTPParams.html":{},"interfaces/TripState.html":{}}}],["new_date.getmonth()).tostring",{"_index":1343,"title":{},"body":{"classes/OTPParams.html":{},"interfaces/TripState.html":{}}}],["new_plan",{"_index":1376,"title":{},"body":{"injectables/OTPService.html":{}}}],["new_plan.itineraries",{"_index":1387,"title":{},"body":{"injectables/OTPService.html":{}}}],["new_plan.itineraries.foreach(it",{"_index":1378,"title":{},"body":{"injectables/OTPService.html":{}}}],["new_plan.occupancy",{"_index":1416,"title":{},"body":{"injectables/OTPService.html":{}}}],["new_trip",{"_index":637,"title":{},"body":{"controllers/DBupdateController.html":{}}}],["new_trip.line",{"_index":638,"title":{},"body":{"controllers/DBupdateController.html":{}}}],["new_trip.trip_id",{"_index":640,"title":{},"body":{"controllers/DBupdateController.html":{}}}],["new_trip[0].triptimehour",{"_index":655,"title":{},"body":{"controllers/DBupdateController.html":{}}}],["new_trip[0].triptimeminute",{"_index":653,"title":{},"body":{"controllers/DBupdateController.html":{}}}],["newbooking",{"_index":383,"title":{},"body":{"controllers/BookingsController.html":{}}}],["newbooking(@request",{"_index":403,"title":{},"body":{"controllers/BookingsController.html":{}}}],["newbooking(req",{"_index":394,"title":{},"body":{"controllers/BookingsController.html":{}}}],["newline",{"_index":558,"title":{},"body":{"controllers/DBupdateController.html":{}}}],["newline.desc",{"_index":565,"title":{},"body":{"controllers/DBupdateController.html":{}}}],["newline.desc_eng",{"_index":567,"title":{},"body":{"controllers/DBupdateController.html":{}}}],["newline.id",{"_index":559,"title":{},"body":{"controllers/DBupdateController.html":{}}}],["newline.name",{"_index":561,"title":{},"body":{"controllers/DBupdateController.html":{}}}],["newline.routecodes",{"_index":569,"title":{},"body":{"controllers/DBupdateController.html":{}}}],["newline.routesnumber",{"_index":563,"title":{},"body":{"controllers/DBupdateController.html":{}}}],["newpoint",{"_index":616,"title":{},"body":{"controllers/DBupdateController.html":{}}}],["newpoint.routecode",{"_index":617,"title":{},"body":{"controllers/DBupdateController.html":{}}}],["newroute",{"_index":577,"title":{},"body":{"controllers/DBupdateController.html":{}}}],["newroute.code",{"_index":578,"title":{},"body":{"controllers/DBupdateController.html":{}}}],["newroute.desc",{"_index":581,"title":{},"body":{"controllers/DBupdateController.html":{}}}],["newroute.desc_eng",{"_index":583,"title":{},"body":{"controllers/DBupdateController.html":{}}}],["newroute.direction",{"_index":587,"title":{},"body":{"controllers/DBupdateController.html":{}}}],["newroute.id",{"_index":579,"title":{},"body":{"controllers/DBupdateController.html":{}}}],["newroute.lineid",{"_index":585,"title":{},"body":{"controllers/DBupdateController.html":{}}}],["newschedule",{"_index":547,"title":{"entities/NewSchedule.html":{}},"body":{"controllers/DBupdateController.html":{},"entities/NewSchedule.html":{},"classes/NewScheduleService.html":{},"modules/TransitModule.html":{},"coverage.html":{}}}],["newschedule.service",{"_index":737,"title":{},"body":{"injectables/DataService.html":{}}}],["newschedules",{"_index":498,"title":{},"body":{"controllers/DBupdateController.html":{}}}],["newscheduleservice",{"_index":710,"title":{"classes/NewScheduleService.html":{}},"body":{"injectables/DataService.html":{},"classes/NewScheduleService.html":{},"modules/TransitModule.html":{},"coverage.html":{}}}],["newstop",{"_index":593,"title":{},"body":{"controllers/DBupdateController.html":{}}}],["newstop.code",{"_index":594,"title":{},"body":{"controllers/DBupdateController.html":{}}}],["newstop.desc",{"_index":598,"title":{},"body":{"controllers/DBupdateController.html":{}}}],["newstop.desc_eng",{"_index":600,"title":{},"body":{"controllers/DBupdateController.html":{}}}],["newstop.id",{"_index":596,"title":{},"body":{"controllers/DBupdateController.html":{}}}],["newstop.latitude",{"_index":602,"title":{},"body":{"controllers/DBupdateController.html":{}}}],["newstop.lines",{"_index":606,"title":{},"body":{"controllers/DBupdateController.html":{}}}],["newstop.longitude",{"_index":604,"title":{},"body":{"controllers/DBupdateController.html":{}}}],["node.js",{"_index":2293,"title":{},"body":{"index.html":{}}}],["npm",{"_index":2305,"title":{},"body":{"index.html":{}}}],["ns",{"_index":694,"title":{},"body":{"injectables/DataService.html":{}}}],["null",{"_index":2384,"title":{},"body":{"miscellaneous/variables.html":{}}}],["nullable",{"_index":1075,"title":{},"body":{"entities/Line.html":{},"entities/NewSchedule.html":{},"entities/Route.html":{},"entities/Schedule.html":{},"entities/Stop.html":{}}}],["number",{"_index":136,"title":{},"body":{"classes/ArrivalDto.html":{},"entities/Booking.html":{},"injectables/BookingRepository.html":{},"injectables/BookingService.html":{},"controllers/DBupdateController.html":{},"interfaces/FeedEntity.html":{},"interfaces/FeedEntity-1.html":{},"interfaces/FeedHeader.html":{},"interfaces/FeedHeader-1.html":{},"interfaces/FeedMessage.html":{},"interfaces/FeedMessage-1.html":{},"classes/Itinerary.html":{},"classes/Leg.html":{},"entities/Line.html":{},"classes/LineDto.html":{},"entities/LiveData.html":{},"interfaces/Long.html":{},"entities/NewSchedule.html":{},"classes/Plan.html":{},"entities/Point.html":{},"classes/PointDto.html":{},"interfaces/Position.html":{},"classes/PositionProto.html":{},"entities/Route.html":{},"classes/RouteDto.html":{},"classes/RouteInfoDto.html":{},"entities/RouteStop.html":{},"entities/Schedule.html":{},"classes/ScheduleRepository.html":{},"injectables/ScheduleService.html":{},"classes/Step.html":{},"entities/Stop.html":{},"classes/StopDto.html":{},"interfaces/StopTimeEvent.html":{},"interfaces/StopTimeUpdate.html":{},"classes/TransitGateWay.html":{},"entities/Trip.html":{},"classes/Trip-1.html":{},"interfaces/TripDescriptor.html":{},"interfaces/TripDescriptor-1.html":{},"injectables/TripRepository.html":{},"injectables/TripService.html":{},"interfaces/TripUpdate.html":{},"injectables/TripUpdatesListener.html":{},"classes/UpdateTrips.html":{},"entities/User.html":{},"entities/UserRoute.html":{},"entities/UserStop.html":{},"interfaces/VehicleDescriptor.html":{},"interfaces/VehiclePosition.html":{},"classes/Vertex.html":{}}}],["object",{"_index":1996,"title":{},"body":{"classes/Trip-1.html":{},"miscellaneous/variables.html":{}}}],["objectliteral",{"_index":840,"title":{},"body":{"classes/IGenericRepository.html":{}}}],["occupancy",{"_index":128,"title":{},"body":{"classes/ArrivalDto.html":{},"classes/Itinerary.html":{},"classes/Leg.html":{},"injectables/OTPService.html":{},"classes/Plan.html":{},"classes/Step.html":{},"classes/Vertex.html":{}}}],["occupancy[leg.tripid",{"_index":1415,"title":{},"body":{"injectables/OTPService.html":{}}}],["occupancystatus",{"_index":772,"title":{},"body":{"interfaces/FeedEntity.html":{},"interfaces/FeedHeader.html":{},"interfaces/FeedMessage.html":{},"classes/Itinerary.html":{},"classes/Leg.html":{},"interfaces/Long.html":{},"classes/Plan.html":{},"interfaces/Position.html":{},"classes/PositionProto.html":{},"classes/Step.html":{},"interfaces/TripDescriptor.html":{},"interfaces/VehicleDescriptor.html":{},"interfaces/VehiclePosition.html":{},"classes/Vertex.html":{}}}],["occupation",{"_index":366,"title":{},"body":{"injectables/BookingService.html":{}}}],["occupied",{"_index":1979,"title":{},"body":{"entities/Trip.html":{},"injectables/TripRepository.html":{}}}],["ok",{"_index":574,"title":{},"body":{"controllers/DBupdateController.html":{}}}],["onetomany",{"_index":1081,"title":{},"body":{"entities/Line.html":{},"entities/NewSchedule.html":{},"entities/Route.html":{},"entities/Schedule.html":{},"entities/Trip.html":{},"entities/User.html":{}}}],["onetomany(undefined",{"_index":1077,"title":{},"body":{"entities/Line.html":{},"entities/Route.html":{}}}],["onevent",{"_index":2083,"title":{},"body":{"injectables/TripUpdatesListener.html":{}}}],["onevent('booking.deleted",{"_index":2079,"title":{},"body":{"injectables/TripUpdatesListener.html":{}}}],["onevent('trips.update",{"_index":2075,"title":{},"body":{"injectables/TripUpdatesListener.html":{}}}],["ongatewayconnection",{"_index":1926,"title":{},"body":{"classes/TransitGateWay.html":{}}}],["open",{"_index":2321,"title":{},"body":{"index.html":{}}}],["optional",{"_index":24,"title":{},"body":{"controllers/AppController.html":{},"classes/ArrivalDto.html":{},"injectables/AuthService.html":{},"injectables/BookingRepository.html":{},"injectables/BookingService.html":{},"controllers/BookingsController.html":{},"classes/Context.html":{},"injectables/DBUpdateService.html":{},"controllers/DBupdateController.html":{},"injectables/DataService.html":{},"classes/IGenericRepository.html":{},"classes/Itinerary.html":{},"injectables/JwtStrategy.html":{},"classes/Leg.html":{},"injectables/LineRepository.html":{},"injectables/LineService.html":{},"injectables/LiveDataRepository.html":{},"controllers/LiveUpdatesController.html":{},"injectables/LiveUpdatesService.html":{},"injectables/LocalStrategy.html":{},"interfaces/NavigatorStrategy.html":{},"classes/NewScheduleService.html":{},"classes/OTPParams.html":{},"injectables/OTPService.html":{},"classes/OTPStrategy.html":{},"classes/Plan.html":{},"classes/PointRepository.html":{},"injectables/PointService.html":{},"classes/PositionProto.html":{},"classes/RouteInfoDto.html":{},"classes/RouteRepository.html":{},"injectables/RouteService.html":{},"classes/RouteStopRepository.html":{},"injectables/RouteStopService.html":{},"controllers/SavedController.html":{},"injectables/SavedService.html":{},"classes/ScheduleDetailsDto.html":{},"classes/ScheduleRepository.html":{},"injectables/ScheduleService.html":{},"classes/SingleRouteStrategy.html":{},"classes/Step.html":{},"classes/StopRepository.html":{},"injectables/StopService.html":{},"interfaces/StopTimeEvent.html":{},"interfaces/StopTimeUpdate.html":{},"controllers/TransitController.html":{},"classes/TransitGateWay.html":{},"classes/Trip-1.html":{},"interfaces/TripDescriptor-1.html":{},"injectables/TripRepository.html":{},"injectables/TripService.html":{},"injectables/TripUpdatesListener.html":{},"classes/UpdateTrips.html":{},"controllers/UserController.html":{},"injectables/UserRepository.html":{},"injectables/UserService.html":{},"classes/Vertex.html":{}}}],["order",{"_index":1858,"title":{},"body":{"classes/StopRepository.html":{},"injectables/TripRepository.html":{}}}],["origins",{"_index":1947,"title":{},"body":{"classes/TransitGateWay.html":{}}}],["otherthanpreferredroutespenalty",{"_index":1280,"title":{},"body":{"classes/OTPParams.html":{},"interfaces/TripState.html":{}}}],["otherthanpreferredroutespenalty=${this.otherthanpreferredroutespenalty",{"_index":1333,"title":{},"body":{"classes/OTPParams.html":{},"interfaces/TripState.html":{}}}],["otp",{"_index":696,"title":{},"body":{"injectables/DataService.html":{}}}],["otp.service",{"_index":735,"title":{},"body":{"injectables/DataService.html":{}}}],["otpparams",{"_index":1274,"title":{"classes/OTPParams.html":{}},"body":{"classes/OTPParams.html":{},"injectables/OTPService.html":{},"classes/OTPStrategy.html":{},"interfaces/TripState.html":{},"coverage.html":{}}}],["otpparams(state",{"_index":1388,"title":{},"body":{"injectables/OTPService.html":{}}}],["otpparams.buildqueryparams",{"_index":1390,"title":{},"body":{"injectables/OTPService.html":{}}}],["otpservice",{"_index":707,"title":{"injectables/OTPService.html":{}},"body":{"injectables/DataService.html":{},"injectables/OTPService.html":{},"classes/OTPStrategy.html":{},"modules/TransitModule.html":{},"coverage.html":{},"overview.html":{}}}],["otpstrategy",{"_index":1417,"title":{"classes/OTPStrategy.html":{}},"body":{"classes/OTPStrategy.html":{},"coverage.html":{}}}],["out",{"_index":90,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/TransitModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["override",{"_index":315,"title":{},"body":{"injectables/BookingRepository.html":{},"injectables/LineRepository.html":{},"injectables/LiveDataRepository.html":{},"classes/PointRepository.html":{},"classes/RouteRepository.html":{},"classes/RouteStopRepository.html":{},"classes/ScheduleRepository.html":{},"classes/StopRepository.html":{},"injectables/TripRepository.html":{},"injectables/UserRepository.html":{}}}],["overview",{"_index":2347,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":2243,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["param",{"_index":1156,"title":{},"body":{"controllers/LiveUpdatesController.html":{},"controllers/SavedController.html":{},"controllers/TransitController.html":{}}}],["param('code",{"_index":1643,"title":{},"body":{"controllers/SavedController.html":{}}}],["parameters",{"_index":21,"title":{},"body":{"controllers/AppController.html":{},"classes/ArrivalDto.html":{},"injectables/AuthService.html":{},"injectables/BookingRepository.html":{},"injectables/BookingService.html":{},"controllers/BookingsController.html":{},"classes/Context.html":{},"injectables/DBUpdateService.html":{},"controllers/DBupdateController.html":{},"injectables/DataService.html":{},"classes/IGenericRepository.html":{},"classes/Itinerary.html":{},"injectables/JwtStrategy.html":{},"classes/Leg.html":{},"injectables/LineRepository.html":{},"injectables/LineService.html":{},"injectables/LiveDataRepository.html":{},"controllers/LiveUpdatesController.html":{},"injectables/LiveUpdatesService.html":{},"injectables/LocalStrategy.html":{},"interfaces/NavigatorStrategy.html":{},"classes/NewScheduleService.html":{},"classes/OTPParams.html":{},"injectables/OTPService.html":{},"classes/OTPStrategy.html":{},"classes/Plan.html":{},"classes/PointRepository.html":{},"injectables/PointService.html":{},"classes/PositionProto.html":{},"classes/RouteInfoDto.html":{},"classes/RouteRepository.html":{},"injectables/RouteService.html":{},"classes/RouteStopRepository.html":{},"injectables/RouteStopService.html":{},"controllers/SavedController.html":{},"injectables/SavedService.html":{},"classes/ScheduleDetailsDto.html":{},"classes/ScheduleRepository.html":{},"injectables/ScheduleService.html":{},"classes/SingleRouteStrategy.html":{},"classes/Step.html":{},"classes/StopRepository.html":{},"injectables/StopService.html":{},"controllers/TransitController.html":{},"classes/TransitGateWay.html":{},"classes/Trip-1.html":{},"injectables/TripRepository.html":{},"injectables/TripService.html":{},"injectables/TripUpdatesListener.html":{},"classes/UpdateTrips.html":{},"controllers/UserController.html":{},"injectables/UserRepository.html":{},"injectables/UserService.html":{},"classes/Vertex.html":{}}}],["params",{"_index":1323,"title":{},"body":{"classes/OTPParams.html":{},"interfaces/TripState.html":{}}}],["params.decorator",{"_index":1158,"title":{},"body":{"controllers/LiveUpdatesController.html":{},"controllers/TransitController.html":{}}}],["params.join",{"_index":1337,"title":{},"body":{"classes/OTPParams.html":{},"interfaces/TripState.html":{}}}],["pass",{"_index":215,"title":{},"body":{"injectables/AuthService.html":{}}}],["passport",{"_index":1019,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/OTPParams.html":{},"injectables/SavedService.html":{},"interfaces/TripState.html":{},"dependencies.html":{}}}],["passportmodule",{"_index":179,"title":{},"body":{"modules/AuthModule.html":{}}}],["passportstrategy",{"_index":1021,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["passportstrategy(strategy",{"_index":1022,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["password",{"_index":227,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"injectables/LocalStrategy.html":{},"entities/User.html":{},"miscellaneous/variables.html":{}}}],["passwordfield",{"_index":1242,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["payload",{"_index":230,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["payload.email",{"_index":1030,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["payload.sub",{"_index":1029,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["pg",{"_index":2271,"title":{},"body":{"dependencies.html":{}}}],["plan",{"_index":398,"title":{"classes/Plan.html":{}},"body":{"controllers/BookingsController.html":{},"classes/Itinerary.html":{},"classes/Leg.html":{},"injectables/LiveUpdatesService.html":{},"injectables/OTPService.html":{},"classes/OTPStrategy.html":{},"classes/Plan.html":{},"classes/Step.html":{},"controllers/TransitController.html":{},"classes/Vertex.html":{},"coverage.html":{}}}],["plan(plan",{"_index":1410,"title":{},"body":{"injectables/OTPService.html":{}}}],["plan.data.plan",{"_index":1225,"title":{},"body":{"injectables/LiveUpdatesService.html":{}}}],["plan.data.plan.itineraries[0",{"_index":1226,"title":{},"body":{"injectables/LiveUpdatesService.html":{}}}],["plan.itineraries",{"_index":1392,"title":{},"body":{"injectables/OTPService.html":{}}}],["planbuilder",{"_index":1350,"title":{},"body":{"injectables/OTPService.html":{}}}],["planbuilder(plan",{"_index":1363,"title":{},"body":{"injectables/OTPService.html":{}}}],["please",{"_index":2330,"title":{},"body":{"index.html":{}}}],["point",{"_index":545,"title":{"entities/Point.html":{}},"body":{"controllers/DBupdateController.html":{},"entities/Point.html":{},"classes/PointRepository.html":{},"injectables/PointService.html":{},"entities/Route.html":{},"classes/RouteDto.html":{},"classes/RouteInfoDto.html":{},"classes/RouteRepository.html":{},"injectables/RouteStopService.html":{},"modules/TransitModule.html":{},"coverage.html":{}}}],["point.entity",{"_index":1498,"title":{},"body":{"entities/Route.html":{}}}],["point.route",{"_index":1493,"title":{},"body":{"entities/Route.html":{}}}],["pointdto",{"_index":1448,"title":{"classes/PointDto.html":{}},"body":{"classes/PointDto.html":{},"coverage.html":{}}}],["pointrepo",{"_index":1459,"title":{},"body":{"classes/PointRepository.html":{}}}],["pointrepository",{"_index":1455,"title":{"classes/PointRepository.html":{}},"body":{"classes/PointRepository.html":{},"injectables/PointService.html":{},"injectables/RouteStopService.html":{},"modules/TransitModule.html":{},"coverage.html":{}}}],["points",{"_index":614,"title":{},"body":{"controllers/DBupdateController.html":{},"injectables/DataService.html":{},"classes/Itinerary.html":{},"classes/Leg.html":{},"classes/Plan.html":{},"injectables/PointService.html":{},"entities/Route.html":{},"classes/RouteDto.html":{},"classes/RouteInfoDto.html":{},"classes/Step.html":{},"classes/Vertex.html":{}}}],["points.push(newpoint",{"_index":618,"title":{},"body":{"controllers/DBupdateController.html":{}}}],["points.service",{"_index":730,"title":{},"body":{"injectables/DataService.html":{}}}],["pointservice",{"_index":705,"title":{"injectables/PointService.html":{}},"body":{"injectables/DataService.html":{},"injectables/PointService.html":{},"modules/TransitModule.html":{},"coverage.html":{},"overview.html":{}}}],["polyline",{"_index":885,"title":{},"body":{"classes/Itinerary.html":{},"classes/Leg.html":{},"classes/Plan.html":{},"classes/Step.html":{},"classes/Vertex.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/variables.html":{}}}],["polyline.decode(points",{"_index":944,"title":{},"body":{"classes/Itinerary.html":{},"classes/Leg.html":{},"classes/Plan.html":{},"classes/Step.html":{},"classes/Vertex.html":{}}}],["populate",{"_index":499,"title":{},"body":{"controllers/DBupdateController.html":{}}}],["populatelines",{"_index":500,"title":{},"body":{"controllers/DBupdateController.html":{}}}],["populatepaths",{"_index":501,"title":{},"body":{"controllers/DBupdateController.html":{}}}],["populateroutes",{"_index":502,"title":{},"body":{"controllers/DBupdateController.html":{}}}],["populatestops",{"_index":503,"title":{},"body":{"controllers/DBupdateController.html":{}}}],["populatestopsroute",{"_index":504,"title":{},"body":{"controllers/DBupdateController.html":{}}}],["populatetrips",{"_index":505,"title":{},"body":{"controllers/DBupdateController.html":{}}}],["port",{"_index":2366,"title":{},"body":{"miscellaneous/variables.html":{}}}],["position",{"_index":762,"title":{"interfaces/Position.html":{}},"body":{"interfaces/FeedEntity.html":{},"interfaces/FeedHeader.html":{},"interfaces/FeedMessage.html":{},"controllers/LiveUpdatesController.html":{},"interfaces/Long.html":{},"interfaces/Position.html":{},"classes/PositionProto.html":{},"interfaces/TripDescriptor.html":{},"interfaces/VehicleDescriptor.html":{},"interfaces/VehiclePosition.html":{},"coverage.html":{}}}],["positionproto",{"_index":774,"title":{"classes/PositionProto.html":{}},"body":{"interfaces/FeedEntity.html":{},"interfaces/FeedHeader.html":{},"interfaces/FeedMessage.html":{},"interfaces/Long.html":{},"interfaces/Position.html":{},"classes/PositionProto.html":{},"interfaces/TripDescriptor.html":{},"interfaces/VehicleDescriptor.html":{},"interfaces/VehiclePosition.html":{},"coverage.html":{}}}],["post",{"_index":1899,"title":{},"body":{"controllers/TransitController.html":{}}}],["post('/delete",{"_index":405,"title":{},"body":{"controllers/BookingsController.html":{}}}],["post('/getpaths",{"_index":1919,"title":{},"body":{"controllers/TransitController.html":{}}}],["post('/getpaths')@header('content",{"_index":1897,"title":{},"body":{"controllers/TransitController.html":{}}}],["post('/getplan",{"_index":411,"title":{},"body":{"controllers/BookingsController.html":{}}}],["post('/new",{"_index":402,"title":{},"body":{"controllers/BookingsController.html":{}}}],["post('login",{"_index":70,"title":{},"body":{"controllers/AppController.html":{},"controllers/UserController.html":{}}}],["post('register",{"_index":54,"title":{},"body":{"controllers/AppController.html":{},"controllers/UserController.html":{}}}],["post('register')@usepipes(validationpipe",{"_index":18,"title":{},"body":{"controllers/AppController.html":{},"controllers/UserController.html":{}}}],["postgres",{"_index":2363,"title":{},"body":{"miscellaneous/variables.html":{}}}],["preferedroutes=${this.preferredroutes",{"_index":1332,"title":{},"body":{"classes/OTPParams.html":{},"interfaces/TripState.html":{}}}],["preferredroutes",{"_index":1281,"title":{},"body":{"classes/OTPParams.html":{},"interfaces/TripState.html":{}}}],["prefix",{"_index":381,"title":{},"body":{"controllers/BookingsController.html":{},"controllers/DBupdateController.html":{},"controllers/LiveUpdatesController.html":{},"controllers/SavedController.html":{},"controllers/TransitController.html":{}}}],["primarycolumn",{"_index":269,"title":{},"body":{"entities/Booking.html":{},"entities/Line.html":{},"entities/NewSchedule.html":{},"entities/Point.html":{},"entities/Route.html":{},"entities/Schedule.html":{},"entities/Stop.html":{},"entities/Trip.html":{},"entities/User.html":{},"entities/UserStop.html":{}}}],["primarycolumn({nullable",{"_index":258,"title":{},"body":{"entities/Booking.html":{},"entities/Line.html":{},"entities/NewSchedule.html":{},"entities/Route.html":{},"entities/Schedule.html":{},"entities/Stop.html":{},"entities/Trip.html":{},"entities/User.html":{}}}],["primarycolumn({type",{"_index":1259,"title":{},"body":{"entities/NewSchedule.html":{},"entities/Point.html":{},"entities/Schedule.html":{},"entities/UserStop.html":{}}}],["primarygeneratedcolumn",{"_index":1136,"title":{},"body":{"entities/LiveData.html":{},"entities/NewSchedule.html":{},"entities/Point.html":{},"entities/RouteStop.html":{},"entities/Schedule.html":{},"entities/User.html":{},"entities/UserRoute.html":{},"entities/UserStop.html":{}}}],["primarygeneratedcolumn({type",{"_index":1253,"title":{},"body":{"entities/NewSchedule.html":{},"entities/RouteStop.html":{},"entities/Schedule.html":{},"entities/User.html":{},"entities/UserRoute.html":{},"entities/UserStop.html":{}}}],["private",{"_index":52,"title":{},"body":{"controllers/AppController.html":{},"injectables/AuthService.html":{},"injectables/BookingService.html":{},"controllers/BookingsController.html":{},"classes/Context.html":{},"injectables/DBUpdateService.html":{},"controllers/DBupdateController.html":{},"injectables/DataService.html":{},"interfaces/FeedEntity-1.html":{},"interfaces/FeedHeader-1.html":{},"interfaces/FeedMessage-1.html":{},"classes/Itinerary.html":{},"classes/Leg.html":{},"controllers/LiveUpdatesController.html":{},"injectables/LiveUpdatesService.html":{},"classes/NewScheduleService.html":{},"classes/OTPParams.html":{},"injectables/OTPService.html":{},"classes/Plan.html":{},"injectables/SavedService.html":{},"classes/ScheduleDetailsDto.html":{},"classes/Step.html":{},"interfaces/StopTimeEvent.html":{},"interfaces/StopTimeUpdate.html":{},"classes/TransitGateWay.html":{},"classes/Trip-1.html":{},"interfaces/TripDescriptor-1.html":{},"interfaces/TripState.html":{},"interfaces/TripUpdate.html":{},"injectables/TripUpdatesListener.html":{},"classes/UpdateTrips.html":{},"classes/Vertex.html":{}}}],["process.env.auth_key",{"_index":2377,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.db_host",{"_index":2365,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.db_name",{"_index":2372,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.db_password",{"_index":2370,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.db_port",{"_index":2367,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.db_schema",{"_index":2376,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.db_username",{"_index":2369,"title":{},"body":{"miscellaneous/variables.html":{}}}],["production",{"_index":2312,"title":{},"body":{"index.html":{}}}],["progressive",{"_index":2292,"title":{},"body":{"index.html":{}}}],["project",{"_index":2322,"title":{},"body":{"index.html":{}}}],["prom",{"_index":1189,"title":{},"body":{"controllers/LiveUpdatesController.html":{},"injectables/LiveUpdatesService.html":{}}}],["prom.data",{"_index":1213,"title":{},"body":{"injectables/LiveUpdatesService.html":{}}}],["prom.data.vehicles",{"_index":1214,"title":{},"body":{"injectables/LiveUpdatesService.html":{}}}],["prom.data.vehicles.map((v",{"_index":1215,"title":{},"body":{"injectables/LiveUpdatesService.html":{}}}],["promise",{"_index":27,"title":{},"body":{"controllers/AppController.html":{},"injectables/AuthService.html":{},"injectables/BookingRepository.html":{},"injectables/BookingService.html":{},"controllers/BookingsController.html":{},"controllers/DBupdateController.html":{},"classes/IGenericRepository.html":{},"injectables/JwtStrategy.html":{},"injectables/LineRepository.html":{},"injectables/LineService.html":{},"injectables/LiveDataRepository.html":{},"controllers/LiveUpdatesController.html":{},"injectables/LiveUpdatesService.html":{},"injectables/LocalStrategy.html":{},"classes/NewScheduleService.html":{},"injectables/OTPService.html":{},"classes/OTPStrategy.html":{},"classes/PointRepository.html":{},"injectables/PointService.html":{},"classes/RouteRepository.html":{},"injectables/RouteService.html":{},"classes/RouteStopRepository.html":{},"injectables/RouteStopService.html":{},"controllers/SavedController.html":{},"injectables/SavedService.html":{},"classes/ScheduleRepository.html":{},"injectables/ScheduleService.html":{},"classes/SingleRouteStrategy.html":{},"classes/StopRepository.html":{},"injectables/StopService.html":{},"controllers/TransitController.html":{},"injectables/TripRepository.html":{},"injectables/TripService.html":{},"controllers/UserController.html":{},"injectables/UserRepository.html":{},"injectables/UserService.html":{}}}],["promise((resolve",{"_index":683,"title":{},"body":{"controllers/DBupdateController.html":{}}}],["promise.all",{"_index":1693,"title":{},"body":{"injectables/SavedService.html":{},"controllers/TransitController.html":{}}}],["promise.all(prom",{"_index":1192,"title":{},"body":{"controllers/LiveUpdatesController.html":{}}}],["promise[0",{"_index":1697,"title":{},"body":{"injectables/SavedService.html":{}}}],["promise[1",{"_index":1696,"title":{},"body":{"injectables/SavedService.html":{}}}],["properties",{"_index":120,"title":{"properties.html":{}},"body":{"classes/ArrivalDto.html":{},"entities/Booking.html":{},"classes/Context.html":{},"classes/CreateUserDto.html":{},"injectables/DBUpdateService.html":{},"injectables/DataService.html":{},"interfaces/FeedEntity.html":{},"interfaces/FeedEntity-1.html":{},"interfaces/FeedHeader.html":{},"interfaces/FeedHeader-1.html":{},"interfaces/FeedMessage.html":{},"interfaces/FeedMessage-1.html":{},"classes/Itinerary.html":{},"classes/Leg.html":{},"entities/Line.html":{},"classes/LineDto.html":{},"entities/LiveData.html":{},"injectables/LiveUpdatesService.html":{},"interfaces/Long.html":{},"entities/NewSchedule.html":{},"classes/OTPParams.html":{},"injectables/OTPService.html":{},"classes/Plan.html":{},"entities/Point.html":{},"classes/PointDto.html":{},"interfaces/Position.html":{},"entities/Route.html":{},"classes/RouteDto.html":{},"classes/RouteInfoDto.html":{},"entities/RouteStop.html":{},"entities/Schedule.html":{},"classes/ScheduleDayDto.html":{},"classes/ScheduleDetailsDto.html":{},"classes/ScheduleDto.html":{},"classes/Step.html":{},"entities/Stop.html":{},"classes/StopDto.html":{},"interfaces/StopTimeEvent.html":{},"interfaces/StopTimeUpdate.html":{},"classes/TransitGateWay.html":{},"entities/Trip.html":{},"classes/Trip-1.html":{},"interfaces/TripDescriptor.html":{},"interfaces/TripDescriptor-1.html":{},"interfaces/TripState.html":{},"interfaces/TripUpdate.html":{},"entities/User.html":{},"entities/UserRoute.html":{},"entities/UserStop.html":{},"interfaces/VehicleDescriptor.html":{},"interfaces/VehiclePosition.html":{},"classes/Vertex.html":{},"properties.html":{}}}],["protected",{"_index":280,"title":{},"body":{"injectables/BookingRepository.html":{},"classes/IGenericRepository.html":{},"injectables/LineRepository.html":{},"injectables/LiveDataRepository.html":{},"classes/PointRepository.html":{},"classes/RouteRepository.html":{},"classes/RouteStopRepository.html":{},"classes/ScheduleRepository.html":{},"classes/StopRepository.html":{},"injectables/TripRepository.html":{},"injectables/UserRepository.html":{}}}],["proto/position",{"_index":1161,"title":{},"body":{"controllers/LiveUpdatesController.html":{}}}],["proto/trips",{"_index":1162,"title":{},"body":{"controllers/LiveUpdatesController.html":{}}}],["protobuf",{"_index":1166,"title":{},"body":{"controllers/LiveUpdatesController.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/variables.html":{}}}],["protobufjs",{"_index":2273,"title":{},"body":{"dependencies.html":{}}}],["protocol",{"_index":2275,"title":{},"body":{"dependencies.html":{}}}],["providers",{"_index":116,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/TransitModule.html":{},"modules/UserModule.html":{}}}],["public",{"_index":9,"title":{},"body":{"controllers/AppController.html":{},"classes/ArrivalDto.html":{},"injectables/AuthService.html":{},"entities/Booking.html":{},"injectables/BookingRepository.html":{},"injectables/BookingService.html":{},"controllers/BookingsController.html":{},"classes/Context.html":{},"classes/CreateUserDto.html":{},"injectables/DBUpdateService.html":{},"controllers/DBupdateController.html":{},"injectables/DataService.html":{},"interfaces/FeedEntity.html":{},"interfaces/FeedEntity-1.html":{},"interfaces/FeedHeader.html":{},"interfaces/FeedHeader-1.html":{},"interfaces/FeedMessage.html":{},"interfaces/FeedMessage-1.html":{},"classes/Itinerary.html":{},"injectables/JwtStrategy.html":{},"classes/Leg.html":{},"entities/Line.html":{},"classes/LineDto.html":{},"injectables/LineRepository.html":{},"injectables/LineService.html":{},"entities/LiveData.html":{},"injectables/LiveDataRepository.html":{},"controllers/LiveUpdatesController.html":{},"injectables/LiveUpdatesService.html":{},"injectables/LocalStrategy.html":{},"interfaces/Long.html":{},"entities/NewSchedule.html":{},"classes/NewScheduleService.html":{},"classes/OTPParams.html":{},"injectables/OTPService.html":{},"classes/OTPStrategy.html":{},"classes/Plan.html":{},"entities/Point.html":{},"classes/PointDto.html":{},"classes/PointRepository.html":{},"injectables/PointService.html":{},"interfaces/Position.html":{},"classes/PositionProto.html":{},"entities/Route.html":{},"classes/RouteDto.html":{},"classes/RouteInfoDto.html":{},"classes/RouteRepository.html":{},"injectables/RouteService.html":{},"entities/RouteStop.html":{},"classes/RouteStopRepository.html":{},"injectables/RouteStopService.html":{},"controllers/SavedController.html":{},"injectables/SavedService.html":{},"entities/Schedule.html":{},"classes/ScheduleDayDto.html":{},"classes/ScheduleDetailsDto.html":{},"classes/ScheduleDto.html":{},"classes/ScheduleRepository.html":{},"injectables/ScheduleService.html":{},"classes/SingleRouteStrategy.html":{},"classes/Step.html":{},"entities/Stop.html":{},"classes/StopDto.html":{},"classes/StopRepository.html":{},"injectables/StopService.html":{},"interfaces/StopTimeEvent.html":{},"interfaces/StopTimeUpdate.html":{},"controllers/TransitController.html":{},"classes/TransitGateWay.html":{},"entities/Trip.html":{},"classes/Trip-1.html":{},"interfaces/TripDescriptor.html":{},"interfaces/TripDescriptor-1.html":{},"injectables/TripRepository.html":{},"injectables/TripService.html":{},"interfaces/TripState.html":{},"interfaces/TripUpdate.html":{},"injectables/TripUpdatesListener.html":{},"classes/UpdateTrips.html":{},"entities/User.html":{},"controllers/UserController.html":{},"injectables/UserRepository.html":{},"entities/UserRoute.html":{},"injectables/UserService.html":{},"entities/UserStop.html":{},"interfaces/VehicleDescriptor.html":{},"interfaces/VehiclePosition.html":{},"classes/Vertex.html":{}}}],["query",{"_index":2038,"title":{},"body":{"injectables/TripRepository.html":{}}}],["querydeeppartialentity",{"_index":841,"title":{},"body":{"classes/IGenericRepository.html":{}}}],["querystring",{"_index":1389,"title":{},"body":{"injectables/OTPService.html":{}}}],["r",{"_index":506,"title":{},"body":{"controllers/DBupdateController.html":{},"classes/RouteRepository.html":{},"classes/StopRepository.html":{}}}],["r(min",{"_index":526,"title":{},"body":{"controllers/DBupdateController.html":{}}}],["r.\"code",{"_index":1547,"title":{},"body":{"classes/RouteRepository.html":{}}}],["r.\"code\"=rs.\"routecode",{"_index":1857,"title":{},"body":{"classes/StopRepository.html":{}}}],["r.\"code\"=ur.\"route_code",{"_index":1557,"title":{},"body":{"classes/RouteRepository.html":{}}}],["r.\"desc",{"_index":1549,"title":{},"body":{"classes/RouteRepository.html":{}}}],["r.\"desc_eng",{"_index":1550,"title":{},"body":{"classes/RouteRepository.html":{}}}],["r.\"direction",{"_index":1559,"title":{},"body":{"classes/RouteRepository.html":{}}}],["r.\"id",{"_index":1546,"title":{},"body":{"classes/RouteRepository.html":{}}}],["r.\"lineid",{"_index":1548,"title":{},"body":{"classes/RouteRepository.html":{}}}],["r.\"lineid\"='${lineid",{"_index":1564,"title":{},"body":{"classes/RouteRepository.html":{}}}],["r.\"lineid\"=l.\"id",{"_index":1563,"title":{},"body":{"classes/RouteRepository.html":{},"classes/StopRepository.html":{}}}],["r.\"stopcodes",{"_index":1551,"title":{},"body":{"classes/RouteRepository.html":{}}}],["r.route_code",{"_index":2183,"title":{},"body":{"injectables/UserRepository.html":{}}}],["read",{"_index":2331,"title":{},"body":{"index.html":{}}}],["readonly",{"_index":845,"title":{},"body":{"classes/IGenericRepository.html":{},"injectables/LiveUpdatesService.html":{},"injectables/OTPService.html":{}}}],["realtime",{"_index":2262,"title":{},"body":{"dependencies.html":{},"miscellaneous/variables.html":{}}}],["referencedcolumnname",{"_index":1440,"title":{},"body":{"entities/Point.html":{},"entities/Route.html":{}}}],["reflect",{"_index":2278,"title":{},"body":{"dependencies.html":{}}}],["relativedirection",{"_index":890,"title":{},"body":{"classes/Itinerary.html":{},"classes/Leg.html":{},"classes/Plan.html":{},"classes/Step.html":{},"classes/Vertex.html":{}}}],["repo",{"_index":331,"title":{},"body":{"injectables/BookingService.html":{},"injectables/LineService.html":{},"injectables/LiveDataRepository.html":{},"classes/NewScheduleService.html":{},"injectables/PointService.html":{},"injectables/RouteService.html":{},"injectables/RouteStopService.html":{},"injectables/SavedService.html":{},"injectables/ScheduleService.html":{},"injectables/StopService.html":{},"injectables/TripService.html":{},"classes/UpdateTrips.html":{},"injectables/UserService.html":{}}}],["repositories/generic.repository",{"_index":432,"title":{},"body":{"classes/Context.html":{},"interfaces/NavigatorStrategy.html":{}}}],["repositories/line.repository",{"_index":1110,"title":{},"body":{"injectables/LineService.html":{},"modules/TransitModule.html":{}}}],["repositories/point.repository",{"_index":1474,"title":{},"body":{"injectables/PointService.html":{},"injectables/RouteStopService.html":{},"modules/TransitModule.html":{}}}],["repositories/route.repository",{"_index":1584,"title":{},"body":{"injectables/RouteService.html":{},"modules/TransitModule.html":{}}}],["repositories/schedule.repository",{"_index":1778,"title":{},"body":{"injectables/ScheduleService.html":{},"modules/TransitModule.html":{}}}],["repositories/stop.repository",{"_index":1873,"title":{},"body":{"injectables/StopService.html":{},"modules/TransitModule.html":{}}}],["repository",{"_index":286,"title":{},"body":{"injectables/BookingRepository.html":{},"classes/Context.html":{},"classes/IGenericRepository.html":{},"injectables/LineRepository.html":{},"injectables/LiveDataRepository.html":{},"interfaces/NavigatorStrategy.html":{},"classes/NewScheduleService.html":{},"classes/PointRepository.html":{},"classes/RouteRepository.html":{},"classes/RouteStopRepository.html":{},"classes/ScheduleRepository.html":{},"classes/SingleRouteStrategy.html":{},"classes/StopRepository.html":{},"injectables/TripRepository.html":{},"injectables/UserRepository.html":{},"index.html":{}}}],["req",{"_index":31,"title":{},"body":{"controllers/AppController.html":{},"controllers/BookingsController.html":{},"controllers/SavedController.html":{},"controllers/UserController.html":{}}}],["req.user",{"_index":76,"title":{},"body":{"controllers/AppController.html":{},"controllers/UserController.html":{}}}],["req.user.email",{"_index":1645,"title":{},"body":{"controllers/SavedController.html":{}}}],["request",{"_index":555,"title":{},"body":{"controllers/DBupdateController.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/variables.html":{}}}],["request.data",{"_index":557,"title":{},"body":{"controllers/DBupdateController.html":{}}}],["requestsettings",{"_index":2226,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["require",{"_index":886,"title":{},"body":{"classes/Itinerary.html":{},"classes/Leg.html":{},"classes/Plan.html":{},"classes/Step.html":{},"classes/Vertex.html":{},"miscellaneous/variables.html":{}}}],["require('fs",{"_index":2378,"title":{},"body":{"miscellaneous/variables.html":{}}}],["require('greek",{"_index":550,"title":{},"body":{"controllers/DBupdateController.html":{},"miscellaneous/variables.html":{}}}],["require('gtfs",{"_index":2379,"title":{},"body":{"miscellaneous/variables.html":{}}}],["require('protobufjs",{"_index":1167,"title":{},"body":{"controllers/LiveUpdatesController.html":{},"miscellaneous/variables.html":{}}}],["require('request",{"_index":2380,"title":{},"body":{"miscellaneous/variables.html":{}}}],["res",{"_index":357,"title":{},"body":{"injectables/BookingService.html":{},"controllers/LiveUpdatesController.html":{}}}],["reset",{"_index":89,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/TransitModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["resolve",{"_index":1910,"title":{},"body":{"controllers/TransitController.html":{}}}],["resolve[1",{"_index":1914,"title":{},"body":{"controllers/TransitController.html":{}}}],["response",{"_index":1159,"title":{},"body":{"controllers/LiveUpdatesController.html":{}}}],["results",{"_index":77,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"classes/ArrivalDto.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"entities/Booking.html":{},"injectables/BookingRepository.html":{},"injectables/BookingService.html":{},"controllers/BookingsController.html":{},"classes/Context.html":{},"classes/CreateUserDto.html":{},"injectables/DBUpdateService.html":{},"controllers/DBupdateController.html":{},"injectables/DataService.html":{},"interfaces/FeedEntity.html":{},"interfaces/FeedEntity-1.html":{},"interfaces/FeedHeader.html":{},"interfaces/FeedHeader-1.html":{},"interfaces/FeedMessage.html":{},"interfaces/FeedMessage-1.html":{},"classes/IGenericRepository.html":{},"classes/Itinerary.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/Leg.html":{},"entities/Line.html":{},"classes/LineDto.html":{},"injectables/LineRepository.html":{},"injectables/LineService.html":{},"entities/LiveData.html":{},"injectables/LiveDataRepository.html":{},"controllers/LiveUpdatesController.html":{},"injectables/LiveUpdatesService.html":{},"classes/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"interfaces/Long.html":{},"interfaces/NavigatorStrategy.html":{},"entities/NewSchedule.html":{},"classes/NewScheduleService.html":{},"classes/OTPParams.html":{},"injectables/OTPService.html":{},"classes/OTPStrategy.html":{},"classes/Plan.html":{},"entities/Point.html":{},"classes/PointDto.html":{},"classes/PointRepository.html":{},"injectables/PointService.html":{},"interfaces/Position.html":{},"classes/PositionProto.html":{},"entities/Route.html":{},"classes/RouteDto.html":{},"classes/RouteInfoDto.html":{},"classes/RouteRepository.html":{},"injectables/RouteService.html":{},"entities/RouteStop.html":{},"classes/RouteStopRepository.html":{},"injectables/RouteStopService.html":{},"controllers/SavedController.html":{},"injectables/SavedService.html":{},"entities/Schedule.html":{},"classes/ScheduleDayDto.html":{},"classes/ScheduleDetailsDto.html":{},"classes/ScheduleDto.html":{},"classes/ScheduleRepository.html":{},"injectables/ScheduleService.html":{},"classes/SingleRouteStrategy.html":{},"classes/Step.html":{},"entities/Stop.html":{},"classes/StopDto.html":{},"classes/StopRepository.html":{},"injectables/StopService.html":{},"interfaces/StopTimeEvent.html":{},"interfaces/StopTimeUpdate.html":{},"controllers/TransitController.html":{},"classes/TransitGateWay.html":{},"modules/TransitModule.html":{},"entities/Trip.html":{},"classes/Trip-1.html":{},"interfaces/TripDescriptor.html":{},"interfaces/TripDescriptor-1.html":{},"injectables/TripRepository.html":{},"injectables/TripService.html":{},"interfaces/TripState.html":{},"interfaces/TripUpdate.html":{},"injectables/TripUpdatesListener.html":{},"classes/UpdateTrips.html":{},"entities/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserRepository.html":{},"entities/UserRoute.html":{},"injectables/UserService.html":{},"entities/UserStop.html":{},"interfaces/VehicleDescriptor.html":{},"interfaces/VehiclePosition.html":{},"classes/Vertex.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["return",{"_index":65,"title":{},"body":{"controllers/AppController.html":{},"injectables/AuthService.html":{},"injectables/BookingRepository.html":{},"injectables/BookingService.html":{},"controllers/BookingsController.html":{},"classes/Context.html":{},"injectables/DBUpdateService.html":{},"controllers/DBupdateController.html":{},"injectables/DataService.html":{},"interfaces/FeedEntity-1.html":{},"interfaces/FeedHeader-1.html":{},"interfaces/FeedMessage-1.html":{},"classes/IGenericRepository.html":{},"classes/Itinerary.html":{},"injectables/JwtStrategy.html":{},"classes/Leg.html":{},"injectables/LineRepository.html":{},"injectables/LineService.html":{},"controllers/LiveUpdatesController.html":{},"injectables/LiveUpdatesService.html":{},"injectables/LocalStrategy.html":{},"classes/NewScheduleService.html":{},"classes/OTPParams.html":{},"injectables/OTPService.html":{},"classes/OTPStrategy.html":{},"classes/Plan.html":{},"classes/PointRepository.html":{},"injectables/PointService.html":{},"classes/RouteRepository.html":{},"injectables/RouteService.html":{},"injectables/RouteStopService.html":{},"controllers/SavedController.html":{},"injectables/SavedService.html":{},"classes/ScheduleRepository.html":{},"injectables/ScheduleService.html":{},"classes/SingleRouteStrategy.html":{},"classes/Step.html":{},"classes/StopRepository.html":{},"injectables/StopService.html":{},"interfaces/StopTimeEvent.html":{},"interfaces/StopTimeUpdate.html":{},"controllers/TransitController.html":{},"classes/Trip-1.html":{},"interfaces/TripDescriptor-1.html":{},"injectables/TripRepository.html":{},"injectables/TripService.html":{},"interfaces/TripState.html":{},"interfaces/TripUpdate.html":{},"classes/UpdateTrips.html":{},"controllers/UserController.html":{},"injectables/UserRepository.html":{},"injectables/UserService.html":{},"classes/Vertex.html":{}}}],["returns",{"_index":26,"title":{},"body":{"controllers/AppController.html":{},"injectables/AuthService.html":{},"injectables/BookingRepository.html":{},"injectables/BookingService.html":{},"controllers/BookingsController.html":{},"classes/Context.html":{},"injectables/DBUpdateService.html":{},"controllers/DBupdateController.html":{},"classes/IGenericRepository.html":{},"classes/Itinerary.html":{},"injectables/JwtStrategy.html":{},"classes/Leg.html":{},"injectables/LineRepository.html":{},"injectables/LineService.html":{},"injectables/LiveDataRepository.html":{},"controllers/LiveUpdatesController.html":{},"injectables/LiveUpdatesService.html":{},"injectables/LocalStrategy.html":{},"interfaces/NavigatorStrategy.html":{},"classes/NewScheduleService.html":{},"classes/OTPParams.html":{},"injectables/OTPService.html":{},"classes/OTPStrategy.html":{},"classes/PointRepository.html":{},"injectables/PointService.html":{},"classes/PositionProto.html":{},"classes/RouteRepository.html":{},"injectables/RouteService.html":{},"classes/RouteStopRepository.html":{},"injectables/RouteStopService.html":{},"controllers/SavedController.html":{},"injectables/SavedService.html":{},"classes/ScheduleRepository.html":{},"injectables/ScheduleService.html":{},"classes/SingleRouteStrategy.html":{},"classes/StopRepository.html":{},"injectables/StopService.html":{},"controllers/TransitController.html":{},"classes/TransitGateWay.html":{},"classes/Trip-1.html":{},"injectables/TripRepository.html":{},"injectables/TripService.html":{},"injectables/TripUpdatesListener.html":{},"controllers/UserController.html":{},"injectables/UserRepository.html":{},"injectables/UserService.html":{},"classes/Vertex.html":{}}}],["rimraf",{"_index":2282,"title":{},"body":{"dependencies.html":{}}}],["route",{"_index":246,"title":{"entities/Route.html":{}},"body":{"entities/Booking.html":{},"controllers/DBupdateController.html":{},"interfaces/FeedEntity-1.html":{},"interfaces/FeedHeader-1.html":{},"interfaces/FeedMessage-1.html":{},"classes/Leg.html":{},"entities/Line.html":{},"classes/OTPStrategy.html":{},"entities/Point.html":{},"entities/Route.html":{},"classes/RouteRepository.html":{},"injectables/RouteService.html":{},"controllers/SavedController.html":{},"classes/ScheduleRepository.html":{},"injectables/ScheduleService.html":{},"classes/SingleRouteStrategy.html":{},"interfaces/StopTimeEvent.html":{},"interfaces/StopTimeUpdate.html":{},"controllers/TransitController.html":{},"modules/TransitModule.html":{},"classes/Trip-1.html":{},"interfaces/TripDescriptor-1.html":{},"interfaces/TripUpdate.html":{},"coverage.html":{}}}],["route.code",{"_index":571,"title":{},"body":{"controllers/DBupdateController.html":{}}}],["route.direction",{"_index":588,"title":{},"body":{"controllers/DBupdateController.html":{}}}],["route.entity",{"_index":1082,"title":{},"body":{"entities/Line.html":{},"entities/Point.html":{}}}],["route.id",{"_index":580,"title":{},"body":{"controllers/DBupdateController.html":{}}}],["route.line",{"_index":1078,"title":{},"body":{"entities/Line.html":{}}}],["route.lines[0].id",{"_index":586,"title":{},"body":{"controllers/DBupdateController.html":{}}}],["route.name",{"_index":582,"title":{},"body":{"controllers/DBupdateController.html":{}}}],["route.points",{"_index":1446,"title":{},"body":{"entities/Point.html":{}}}],["route.points)@joincolumn({name",{"_index":1439,"title":{},"body":{"entities/Point.html":{}}}],["route.split(\":\")[1",{"_index":978,"title":{},"body":{"classes/Itinerary.html":{},"classes/Leg.html":{},"classes/Plan.html":{},"classes/Step.html":{},"classes/Vertex.html":{}}}],["route.stopcodes.split",{"_index":1791,"title":{},"body":{"classes/SingleRouteStrategy.html":{}}}],["route_code",{"_index":2153,"title":{},"body":{"injectables/UserRepository.html":{},"entities/UserRoute.html":{}}}],["route_stops",{"_index":1500,"title":{},"body":{"entities/Route.html":{}}}],["routecode",{"_index":129,"title":{},"body":{"classes/ArrivalDto.html":{},"entities/LiveData.html":{},"entities/NewSchedule.html":{},"entities/Point.html":{},"classes/PointDto.html":{},"classes/PointRepository.html":{},"injectables/PointService.html":{},"entities/Route.html":{},"classes/RouteRepository.html":{},"entities/RouteStop.html":{},"entities/Schedule.html":{},"classes/ScheduleDetailsDto.html":{},"classes/ScheduleRepository.html":{},"injectables/ScheduleService.html":{},"injectables/StopService.html":{},"entities/Trip.html":{},"injectables/TripRepository.html":{},"injectables/TripService.html":{}}}],["routecodes",{"_index":1064,"title":{},"body":{"entities/Line.html":{}}}],["routedto",{"_index":1502,"title":{"classes/RouteDto.html":{}},"body":{"classes/RouteDto.html":{},"classes/RouteInfoDto.html":{},"coverage.html":{}}}],["routeid",{"_index":760,"title":{},"body":{"interfaces/FeedEntity.html":{},"interfaces/FeedEntity-1.html":{},"interfaces/FeedHeader.html":{},"interfaces/FeedHeader-1.html":{},"interfaces/FeedMessage.html":{},"interfaces/FeedMessage-1.html":{},"classes/Itinerary.html":{},"classes/Leg.html":{},"interfaces/Long.html":{},"classes/Plan.html":{},"interfaces/Position.html":{},"classes/PositionProto.html":{},"classes/Step.html":{},"interfaces/StopTimeEvent.html":{},"interfaces/StopTimeUpdate.html":{},"classes/Trip-1.html":{},"interfaces/TripDescriptor.html":{},"interfaces/TripDescriptor-1.html":{},"interfaces/TripUpdate.html":{},"interfaces/VehicleDescriptor.html":{},"interfaces/VehiclePosition.html":{},"classes/Vertex.html":{}}}],["routeinfodto",{"_index":1511,"title":{"classes/RouteInfoDto.html":{}},"body":{"classes/RouteDto.html":{},"classes/RouteInfoDto.html":{},"controllers/TransitController.html":{},"coverage.html":{}}}],["routeinfodto(resolve[0",{"_index":1913,"title":{},"body":{"controllers/TransitController.html":{}}}],["routename",{"_index":130,"title":{},"body":{"classes/ArrivalDto.html":{}}}],["routerepo",{"_index":1420,"title":{},"body":{"classes/OTPStrategy.html":{},"classes/RouteRepository.html":{},"classes/SingleRouteStrategy.html":{}}}],["routerepo.getroutesbystops(start",{"_index":1789,"title":{},"body":{"classes/SingleRouteStrategy.html":{}}}],["routerepository",{"_index":1421,"title":{"classes/RouteRepository.html":{}},"body":{"classes/OTPStrategy.html":{},"classes/RouteRepository.html":{},"injectables/RouteService.html":{},"classes/SingleRouteStrategy.html":{},"modules/TransitModule.html":{},"coverage.html":{}}}],["routes",{"_index":492,"title":{},"body":{"injectables/DBUpdateService.html":{},"controllers/DBupdateController.html":{},"injectables/DataService.html":{},"entities/Line.html":{},"classes/RouteRepository.html":{},"injectables/RouteService.html":{},"injectables/SavedService.html":{},"classes/SingleRouteStrategy.html":{}}}],["routes.filter((route",{"_index":1790,"title":{},"body":{"classes/SingleRouteStrategy.html":{}}}],["routes.push(newroute",{"_index":589,"title":{},"body":{"controllers/DBupdateController.html":{}}}],["routes.service",{"_index":731,"title":{},"body":{"injectables/DataService.html":{}}}],["routes/${code}/points",{"_index":493,"title":{},"body":{"injectables/DBUpdateService.html":{}}}],["routeservice",{"_index":700,"title":{"injectables/RouteService.html":{}},"body":{"injectables/DataService.html":{},"injectables/RouteService.html":{},"modules/TransitModule.html":{},"coverage.html":{},"overview.html":{}}}],["routeshortname",{"_index":938,"title":{},"body":{"classes/Itinerary.html":{},"classes/Leg.html":{},"classes/Plan.html":{},"classes/Step.html":{},"classes/Vertex.html":{}}}],["routesnumber",{"_index":1065,"title":{},"body":{"entities/Line.html":{},"classes/LineDto.html":{}}}],["routesservice",{"_index":699,"title":{},"body":{"injectables/DataService.html":{}}}],["routestop",{"_index":543,"title":{"entities/RouteStop.html":{}},"body":{"controllers/DBupdateController.html":{},"entities/RouteStop.html":{},"classes/RouteStopRepository.html":{},"injectables/RouteStopService.html":{},"modules/TransitModule.html":{},"coverage.html":{}}}],["routestop.service",{"_index":736,"title":{},"body":{"injectables/DataService.html":{}}}],["routestoprepository",{"_index":1596,"title":{"classes/RouteStopRepository.html":{}},"body":{"classes/RouteStopRepository.html":{},"injectables/RouteStopService.html":{},"modules/TransitModule.html":{},"coverage.html":{}}}],["routestopservice",{"_index":709,"title":{"injectables/RouteStopService.html":{}},"body":{"injectables/DataService.html":{},"injectables/RouteStopService.html":{},"modules/TransitModule.html":{},"coverage.html":{},"overview.html":{}}}],["rs",{"_index":624,"title":{},"body":{"controllers/DBupdateController.html":{},"injectables/DataService.html":{},"classes/RouteRepository.html":{},"injectables/RouteStopService.html":{},"classes/StopRepository.html":{}}}],["rs.\"routecode\"='${code",{"_index":1856,"title":{},"body":{"classes/StopRepository.html":{}}}],["rs.\"stopcode\"='${end",{"_index":1570,"title":{},"body":{"classes/RouteRepository.html":{}}}],["rs.\"stopcode\"='${start",{"_index":1568,"title":{},"body":{"classes/RouteRepository.html":{}}}],["rs.\"stopcode\"='${stopcode",{"_index":1567,"title":{},"body":{"classes/RouteRepository.html":{}}}],["rs.routecode",{"_index":625,"title":{},"body":{"controllers/DBupdateController.html":{}}}],["rs.stopcode",{"_index":626,"title":{},"body":{"controllers/DBupdateController.html":{}}}],["rsrepo",{"_index":1600,"title":{},"body":{"classes/RouteStopRepository.html":{}}}],["rss",{"_index":622,"title":{},"body":{"controllers/DBupdateController.html":{}}}],["rss.push(rs",{"_index":627,"title":{},"body":{"controllers/DBupdateController.html":{}}}],["rsservice",{"_index":708,"title":{},"body":{"injectables/DataService.html":{}}}],["run",{"_index":2309,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":481,"title":{},"body":{"injectables/DBUpdateService.html":{},"injectables/LiveUpdatesService.html":{},"injectables/OTPService.html":{},"dependencies.html":{}}}],["s",{"_index":1221,"title":{},"body":{"injectables/LiveUpdatesService.html":{},"classes/ScheduleRepository.html":{},"injectables/ScheduleService.html":{},"classes/StopRepository.html":{},"injectables/TripUpdatesListener.html":{}}}],["s.\"code",{"_index":1845,"title":{},"body":{"classes/StopRepository.html":{}}}],["s.\"code\"=rs.\"stopcode",{"_index":1855,"title":{},"body":{"classes/StopRepository.html":{}}}],["s.\"code\"=us.\"stop_code",{"_index":1853,"title":{},"body":{"classes/StopRepository.html":{}}}],["s.\"day\"='${day",{"_index":1761,"title":{},"body":{"classes/ScheduleRepository.html":{}}}],["s.\"desc",{"_index":1848,"title":{},"body":{"classes/StopRepository.html":{}}}],["s.\"desc_eng",{"_index":1849,"title":{},"body":{"classes/StopRepository.html":{}}}],["s.\"id",{"_index":1844,"title":{},"body":{"classes/StopRepository.html":{}}}],["s.\"latitude",{"_index":1846,"title":{},"body":{"classes/StopRepository.html":{}}}],["s.\"lines",{"_index":1850,"title":{},"body":{"classes/StopRepository.html":{}}}],["s.\"longitude",{"_index":1847,"title":{},"body":{"classes/StopRepository.html":{}}}],["s.\"routecode\"='${route",{"_index":1760,"title":{},"body":{"classes/ScheduleRepository.html":{}}}],["s.\"trip_id\"='${id",{"_index":1759,"title":{},"body":{"classes/ScheduleRepository.html":{}}}],["s.\"triptimehour",{"_index":1762,"title":{},"body":{"classes/ScheduleRepository.html":{}}}],["s.stop_code",{"_index":2180,"title":{},"body":{"injectables/UserRepository.html":{}}}],["saved",{"_index":1612,"title":{},"body":{"controllers/SavedController.html":{}}}],["savedcontroller",{"_index":1610,"title":{"controllers/SavedController.html":{}},"body":{"controllers/SavedController.html":{},"modules/UserModule.html":{},"coverage.html":{}}}],["savedservice",{"_index":1638,"title":{"injectables/SavedService.html":{}},"body":{"controllers/SavedController.html":{},"injectables/SavedService.html":{},"modules/UserModule.html":{},"coverage.html":{},"overview.html":{}}}],["savelivedata",{"_index":1148,"title":{},"body":{"controllers/LiveUpdatesController.html":{}}}],["scalable",{"_index":2297,"title":{},"body":{"index.html":{}}}],["sch",{"_index":665,"title":{},"body":{"controllers/DBupdateController.html":{},"classes/ScheduleDetailsDto.html":{},"classes/Trip-1.html":{}}}],["sch.id",{"_index":674,"title":{},"body":{"controllers/DBupdateController.html":{}}}],["sch.line",{"_index":822,"title":{},"body":{"interfaces/FeedEntity-1.html":{},"interfaces/FeedHeader-1.html":{},"interfaces/FeedMessage-1.html":{},"interfaces/StopTimeEvent.html":{},"interfaces/StopTimeUpdate.html":{},"classes/Trip-1.html":{},"interfaces/TripDescriptor-1.html":{},"interfaces/TripUpdate.html":{}}}],["sch.routecode",{"_index":676,"title":{},"body":{"controllers/DBupdateController.html":{}}}],["sch.stopcode",{"_index":670,"title":{},"body":{"controllers/DBupdateController.html":{}}}],["sch.trip_id",{"_index":673,"title":{},"body":{"controllers/DBupdateController.html":{},"interfaces/FeedEntity-1.html":{},"interfaces/FeedHeader-1.html":{},"interfaces/FeedMessage-1.html":{},"interfaces/StopTimeEvent.html":{},"interfaces/StopTimeUpdate.html":{},"classes/Trip-1.html":{},"interfaces/TripDescriptor-1.html":{},"interfaces/TripUpdate.html":{}}}],["sch.triptime",{"_index":678,"title":{},"body":{"controllers/DBupdateController.html":{}}}],["schedule",{"_index":536,"title":{"entities/Schedule.html":{}},"body":{"controllers/DBupdateController.html":{},"injectables/DataService.html":{},"interfaces/FeedEntity-1.html":{},"interfaces/FeedHeader-1.html":{},"interfaces/FeedMessage-1.html":{},"injectables/LiveUpdatesService.html":{},"entities/Schedule.html":{},"classes/ScheduleDetailsDto.html":{},"classes/ScheduleRepository.html":{},"injectables/ScheduleService.html":{},"interfaces/StopTimeEvent.html":{},"interfaces/StopTimeUpdate.html":{},"controllers/TransitController.html":{},"modules/TransitModule.html":{},"classes/Trip-1.html":{},"interfaces/TripDescriptor-1.html":{},"interfaces/TripUpdate.html":{},"coverage.html":{}}}],["schedule.service",{"_index":732,"title":{},"body":{"injectables/DataService.html":{}}}],["scheduledaydto",{"_index":1708,"title":{"classes/ScheduleDayDto.html":{}},"body":{"classes/ScheduleDayDto.html":{},"coverage.html":{}}}],["scheduledetailsdto",{"_index":1716,"title":{"classes/ScheduleDetailsDto.html":{}},"body":{"classes/ScheduleDetailsDto.html":{},"controllers/TransitController.html":{},"coverage.html":{}}}],["scheduledetailsdto(schedules",{"_index":1918,"title":{},"body":{"controllers/TransitController.html":{}}}],["scheduledto",{"_index":1723,"title":{"classes/ScheduleDto.html":{}},"body":{"classes/ScheduleDto.html":{},"coverage.html":{}}}],["schedulemodule",{"_index":108,"title":{},"body":{"modules/AppModule.html":{}}}],["schedulemodule.forroot",{"_index":111,"title":{},"body":{"modules/AppModule.html":{}}}],["schedulerepo",{"_index":1746,"title":{},"body":{"classes/ScheduleRepository.html":{}}}],["schedulerepository",{"_index":1738,"title":{"classes/ScheduleRepository.html":{}},"body":{"classes/ScheduleRepository.html":{},"injectables/ScheduleService.html":{},"modules/TransitModule.html":{},"coverage.html":{}}}],["schedules",{"_index":663,"title":{},"body":{"controllers/DBupdateController.html":{},"classes/ScheduleDetailsDto.html":{},"controllers/TransitController.html":{}}}],["scheduleservice",{"_index":704,"title":{"injectables/ScheduleService.html":{}},"body":{"injectables/DataService.html":{},"controllers/LiveUpdatesController.html":{},"injectables/ScheduleService.html":{},"modules/TransitModule.html":{},"coverage.html":{},"overview.html":{}}}],["schema",{"_index":2375,"title":{},"body":{"miscellaneous/variables.html":{}}}],["schserivce",{"_index":703,"title":{},"body":{"injectables/DataService.html":{}}}],["sdc_code",{"_index":1710,"title":{},"body":{"classes/ScheduleDayDto.html":{},"classes/ScheduleDto.html":{}}}],["sdc_descr",{"_index":1711,"title":{},"body":{"classes/ScheduleDayDto.html":{}}}],["sdc_descr_eng",{"_index":1712,"title":{},"body":{"classes/ScheduleDayDto.html":{}}}],["sde_end1",{"_index":1727,"title":{},"body":{"classes/ScheduleDto.html":{}}}],["sde_end2",{"_index":1728,"title":{},"body":{"classes/ScheduleDto.html":{}}}],["sde_start1",{"_index":1729,"title":{},"body":{"classes/ScheduleDto.html":{}}}],["sde_start2",{"_index":1730,"title":{},"body":{"classes/ScheduleDto.html":{}}}],["search",{"_index":279,"title":{},"body":{"injectables/BookingRepository.html":{}}}],["search(trip_id",{"_index":298,"title":{},"body":{"injectables/BookingRepository.html":{}}}],["seats",{"_index":372,"title":{},"body":{"injectables/BookingService.html":{}}}],["secret",{"_index":189,"title":{},"body":{"modules/AuthModule.html":{},"miscellaneous/variables.html":{}}}],["secretorkey",{"_index":1027,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["select",{"_index":848,"title":{},"body":{"classes/IGenericRepository.html":{},"classes/NewScheduleService.html":{},"classes/RouteRepository.html":{},"classes/ScheduleRepository.html":{},"classes/StopRepository.html":{},"injectables/TripRepository.html":{}}}],["select(['route_code",{"_index":2181,"title":{},"body":{"injectables/UserRepository.html":{}}}],["select(['stop_code",{"_index":2176,"title":{},"body":{"injectables/UserRepository.html":{}}}],["seq",{"_index":821,"title":{},"body":{"interfaces/FeedEntity-1.html":{},"interfaces/FeedHeader-1.html":{},"interfaces/FeedMessage-1.html":{},"interfaces/StopTimeEvent.html":{},"interfaces/StopTimeUpdate.html":{},"classes/Trip-1.html":{},"interfaces/TripDescriptor-1.html":{},"interfaces/TripUpdate.html":{}}}],["sequence",{"_index":1434,"title":{},"body":{"entities/Point.html":{},"classes/PointDto.html":{},"classes/StopDto.html":{}}}],["server",{"_index":1927,"title":{},"body":{"classes/TransitGateWay.html":{},"index.html":{}}}],["servicedate",{"_index":863,"title":{},"body":{"classes/Itinerary.html":{},"classes/Leg.html":{},"classes/Plan.html":{},"classes/Step.html":{},"classes/Vertex.html":{}}}],["services/booking.service",{"_index":400,"title":{},"body":{"controllers/BookingsController.html":{},"modules/UserModule.html":{}}}],["services/data.service",{"_index":538,"title":{},"body":{"controllers/DBupdateController.html":{},"interfaces/FeedEntity-1.html":{},"interfaces/FeedHeader-1.html":{},"interfaces/FeedMessage-1.html":{},"controllers/LiveUpdatesController.html":{},"interfaces/StopTimeEvent.html":{},"interfaces/StopTimeUpdate.html":{},"controllers/TransitController.html":{},"modules/TransitModule.html":{},"classes/Trip-1.html":{},"interfaces/TripDescriptor-1.html":{},"interfaces/TripUpdate.html":{},"classes/UpdateTrips.html":{}}}],["services/db.update.service",{"_index":534,"title":{},"body":{"controllers/DBupdateController.html":{},"modules/TransitModule.html":{}}}],["services/line.service",{"_index":1964,"title":{},"body":{"modules/TransitModule.html":{}}}],["services/live.updates.service",{"_index":779,"title":{},"body":{"interfaces/FeedEntity-1.html":{},"interfaces/FeedHeader-1.html":{},"interfaces/FeedMessage-1.html":{},"controllers/LiveUpdatesController.html":{},"interfaces/StopTimeEvent.html":{},"interfaces/StopTimeUpdate.html":{},"modules/TransitModule.html":{},"classes/Trip-1.html":{},"interfaces/TripDescriptor-1.html":{},"interfaces/TripUpdate.html":{}}}],["services/newschedule.service",{"_index":1974,"title":{},"body":{"modules/TransitModule.html":{}}}],["services/otp.service",{"_index":1970,"title":{},"body":{"modules/TransitModule.html":{}}}],["services/points.service",{"_index":1966,"title":{},"body":{"modules/TransitModule.html":{}}}],["services/routes.service",{"_index":1965,"title":{},"body":{"modules/TransitModule.html":{}}}],["services/routestop.service",{"_index":1973,"title":{},"body":{"modules/TransitModule.html":{}}}],["services/saved.service",{"_index":1639,"title":{},"body":{"controllers/SavedController.html":{},"modules/UserModule.html":{}}}],["services/schedule.service",{"_index":1163,"title":{},"body":{"controllers/LiveUpdatesController.html":{},"modules/TransitModule.html":{}}}],["services/stop.service",{"_index":1967,"title":{},"body":{"modules/TransitModule.html":{}}}],["services/trip.service",{"_index":1969,"title":{},"body":{"modules/TransitModule.html":{}}}],["services/user.service",{"_index":2128,"title":{},"body":{"controllers/UserController.html":{},"modules/UserModule.html":{}}}],["set(update",{"_index":856,"title":{},"body":{"classes/IGenericRepository.html":{}}}],["set({occupied",{"_index":2040,"title":{},"body":{"injectables/TripRepository.html":{}}}],["setflexgrow",{"_index":1031,"title":{},"body":{"classes/Leg.html":{}}}],["setflexgrow(totalduration",{"_index":982,"title":{},"body":{"classes/Itinerary.html":{},"classes/Leg.html":{},"classes/Plan.html":{},"classes/Step.html":{},"classes/Vertex.html":{}}}],["setroute",{"_index":1032,"title":{},"body":{"classes/Leg.html":{}}}],["setroute(route",{"_index":976,"title":{},"body":{"classes/Itinerary.html":{},"classes/Leg.html":{},"classes/Plan.html":{},"classes/Step.html":{},"classes/Vertex.html":{}}}],["setstrategy",{"_index":419,"title":{},"body":{"classes/Context.html":{}}}],["setstrategy(strategy",{"_index":428,"title":{},"body":{"classes/Context.html":{}}}],["settimeout(resolve",{"_index":684,"title":{},"body":{"controllers/DBupdateController.html":{}}}],["settrip",{"_index":1033,"title":{},"body":{"classes/Leg.html":{}}}],["settrip(trip_id",{"_index":979,"title":{},"body":{"classes/Itinerary.html":{},"classes/Leg.html":{},"classes/Plan.html":{},"classes/Step.html":{},"classes/Vertex.html":{}}}],["showintermediatestops",{"_index":1282,"title":{},"body":{"classes/OTPParams.html":{},"interfaces/TripState.html":{}}}],["showintermediatestops=${this.showintermediatestops",{"_index":1334,"title":{},"body":{"classes/OTPParams.html":{},"interfaces/TripState.html":{}}}],["side",{"_index":2298,"title":{},"body":{"index.html":{}}}],["signoptions",{"_index":191,"title":{},"body":{"modules/AuthModule.html":{}}}],["simple",{"_index":1073,"title":{},"body":{"entities/Line.html":{}}}],["singleroutestrategy",{"_index":1784,"title":{"classes/SingleRouteStrategy.html":{}},"body":{"classes/SingleRouteStrategy.html":{},"coverage.html":{}}}],["sleep",{"_index":507,"title":{},"body":{"controllers/DBupdateController.html":{}}}],["sleep(duration",{"_index":530,"title":{},"body":{"controllers/DBupdateController.html":{}}}],["slug",{"_index":247,"title":{},"body":{"entities/Booking.html":{},"classes/Itinerary.html":{},"classes/Leg.html":{},"injectables/LiveUpdatesService.html":{},"injectables/OTPService.html":{},"classes/Plan.html":{},"classes/Step.html":{},"classes/Vertex.html":{}}}],["slug)).catch(e",{"_index":1369,"title":{},"body":{"injectables/OTPService.html":{}}}],["socket",{"_index":1934,"title":{},"body":{"classes/TransitGateWay.html":{}}}],["socket.io",{"_index":1945,"title":{},"body":{"classes/TransitGateWay.html":{},"dependencies.html":{}}}],["socketsio/transit.gateway",{"_index":102,"title":{},"body":{"modules/AppModule.html":{}}}],["source",{"_index":4,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"classes/ArrivalDto.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"entities/Booking.html":{},"injectables/BookingRepository.html":{},"injectables/BookingService.html":{},"controllers/BookingsController.html":{},"classes/Context.html":{},"classes/CreateUserDto.html":{},"injectables/DBUpdateService.html":{},"controllers/DBupdateController.html":{},"injectables/DataService.html":{},"interfaces/FeedEntity.html":{},"interfaces/FeedEntity-1.html":{},"interfaces/FeedHeader.html":{},"interfaces/FeedHeader-1.html":{},"interfaces/FeedMessage.html":{},"interfaces/FeedMessage-1.html":{},"classes/IGenericRepository.html":{},"classes/Itinerary.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/Leg.html":{},"entities/Line.html":{},"classes/LineDto.html":{},"injectables/LineRepository.html":{},"injectables/LineService.html":{},"entities/LiveData.html":{},"injectables/LiveDataRepository.html":{},"controllers/LiveUpdatesController.html":{},"injectables/LiveUpdatesService.html":{},"classes/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"interfaces/Long.html":{},"interfaces/NavigatorStrategy.html":{},"entities/NewSchedule.html":{},"classes/NewScheduleService.html":{},"classes/OTPParams.html":{},"injectables/OTPService.html":{},"classes/OTPStrategy.html":{},"classes/Plan.html":{},"entities/Point.html":{},"classes/PointDto.html":{},"classes/PointRepository.html":{},"injectables/PointService.html":{},"interfaces/Position.html":{},"classes/PositionProto.html":{},"entities/Route.html":{},"classes/RouteDto.html":{},"classes/RouteInfoDto.html":{},"classes/RouteRepository.html":{},"injectables/RouteService.html":{},"entities/RouteStop.html":{},"classes/RouteStopRepository.html":{},"injectables/RouteStopService.html":{},"controllers/SavedController.html":{},"injectables/SavedService.html":{},"entities/Schedule.html":{},"classes/ScheduleDayDto.html":{},"classes/ScheduleDetailsDto.html":{},"classes/ScheduleDto.html":{},"classes/ScheduleRepository.html":{},"injectables/ScheduleService.html":{},"classes/SingleRouteStrategy.html":{},"classes/Step.html":{},"entities/Stop.html":{},"classes/StopDto.html":{},"classes/StopRepository.html":{},"injectables/StopService.html":{},"interfaces/StopTimeEvent.html":{},"interfaces/StopTimeUpdate.html":{},"controllers/TransitController.html":{},"classes/TransitGateWay.html":{},"modules/TransitModule.html":{},"entities/Trip.html":{},"classes/Trip-1.html":{},"interfaces/TripDescriptor.html":{},"interfaces/TripDescriptor-1.html":{},"injectables/TripRepository.html":{},"injectables/TripService.html":{},"interfaces/TripState.html":{},"interfaces/TripUpdate.html":{},"injectables/TripUpdatesListener.html":{},"classes/UpdateTrips.html":{},"entities/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserRepository.html":{},"entities/UserRoute.html":{},"injectables/UserService.html":{},"entities/UserStop.html":{},"interfaces/VehicleDescriptor.html":{},"interfaces/VehiclePosition.html":{},"classes/Vertex.html":{},"index.html":{}}}],["spec",{"_index":302,"title":{},"body":{"injectables/BookingRepository.html":{},"classes/IGenericRepository.html":{},"injectables/LineRepository.html":{},"injectables/LiveDataRepository.html":{},"classes/PointRepository.html":{},"classes/RouteRepository.html":{},"injectables/RouteService.html":{},"classes/RouteStopRepository.html":{},"classes/ScheduleRepository.html":{},"classes/StopRepository.html":{},"injectables/StopService.html":{},"injectables/TripRepository.html":{},"injectables/UserRepository.html":{}}}],["spelunker",{"_index":2266,"title":{},"body":{"dependencies.html":{}}}],["sponsors",{"_index":2325,"title":{},"body":{"index.html":{}}}],["src/.../config.ts",{"_index":2358,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../db.update.controller.ts",{"_index":2359,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../itinerary.dto.ts",{"_index":2360,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../live.updates.controller.ts",{"_index":2361,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../main.ts",{"_index":2289,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["src/app.controller.ts",{"_index":6,"title":{},"body":{"controllers/AppController.html":{},"coverage.html":{}}}],["src/app.controller.ts:17",{"_index":20,"title":{},"body":{"controllers/AppController.html":{}}}],["src/app.controller.ts:34",{"_index":35,"title":{},"body":{"controllers/AppController.html":{}}}],["src/app.controller.ts:40",{"_index":30,"title":{},"body":{"controllers/AppController.html":{}}}],["src/app.module.ts",{"_index":91,"title":{},"body":{"modules/AppModule.html":{}}}],["src/auth/auth.module.ts",{"_index":175,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/auth/auth.service",{"_index":40,"title":{},"body":{"controllers/AppController.html":{},"controllers/UserController.html":{}}}],["src/auth/auth.service.ts",{"_index":196,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{}}}],["src/auth/auth.service.ts:10",{"_index":202,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:14",{"_index":205,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:18",{"_index":207,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:22",{"_index":216,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:34",{"_index":210,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:44",{"_index":212,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/jwt",{"_index":42,"title":{},"body":{"controllers/AppController.html":{},"controllers/BookingsController.html":{},"injectables/JwtAuthGuard.html":{},"controllers/SavedController.html":{},"controllers/UserController.html":{},"coverage.html":{}}}],["src/auth/jwt.strategy.ts",{"_index":1013,"title":{},"body":{"injectables/JwtStrategy.html":{},"coverage.html":{}}}],["src/auth/jwt.strategy.ts:18",{"_index":1017,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/auth/jwt.strategy.ts:8",{"_index":1015,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/auth/local",{"_index":1232,"title":{},"body":{"classes/LocalAuthGuard.html":{},"controllers/UserController.html":{},"coverage.html":{}}}],["src/auth/local.strategy.ts",{"_index":1234,"title":{},"body":{"injectables/LocalStrategy.html":{},"coverage.html":{}}}],["src/auth/local.strategy.ts:14",{"_index":1238,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["src/auth/local.strategy.ts:8",{"_index":1236,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["src/configurations/config",{"_index":182,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{}}}],["src/configurations/config.ts",{"_index":2218,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/main.ts",{"_index":2220,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["src/repositories/booking.repository",{"_index":341,"title":{},"body":{"injectables/BookingService.html":{},"modules/UserModule.html":{}}}],["src/repositories/booking.repository.ts",{"_index":273,"title":{},"body":{"injectables/BookingRepository.html":{},"coverage.html":{}}}],["src/repositories/booking.repository.ts:18",{"_index":299,"title":{},"body":{"injectables/BookingRepository.html":{}}}],["src/repositories/booking.repository.ts:26",{"_index":290,"title":{},"body":{"injectables/BookingRepository.html":{}}}],["src/repositories/booking.repository.ts:8",{"_index":287,"title":{},"body":{"injectables/BookingRepository.html":{}}}],["src/repositories/generic.repository.ts",{"_index":825,"title":{},"body":{"classes/IGenericRepository.html":{},"coverage.html":{}}}],["src/repositories/generic.repository.ts:11",{"_index":834,"title":{},"body":{"classes/IGenericRepository.html":{}}}],["src/repositories/generic.repository.ts:19",{"_index":833,"title":{},"body":{"classes/IGenericRepository.html":{}}}],["src/repositories/generic.repository.ts:28",{"_index":836,"title":{},"body":{"classes/IGenericRepository.html":{}}}],["src/repositories/generic.repository.ts:32",{"_index":838,"title":{},"body":{"classes/IGenericRepository.html":{}}}],["src/repositories/generic.repository.ts:4",{"_index":828,"title":{},"body":{"classes/IGenericRepository.html":{}}}],["src/repositories/generic.repository.ts:41",{"_index":835,"title":{},"body":{"classes/IGenericRepository.html":{}}}],["src/repositories/generic.repository.ts:49",{"_index":831,"title":{},"body":{"classes/IGenericRepository.html":{}}}],["src/repositories/generic.repository.ts:58",{"_index":839,"title":{},"body":{"classes/IGenericRepository.html":{}}}],["src/repositories/line.repository.ts",{"_index":1091,"title":{},"body":{"injectables/LineRepository.html":{},"coverage.html":{}}}],["src/repositories/line.repository.ts:8",{"_index":1093,"title":{},"body":{"injectables/LineRepository.html":{}}}],["src/repositories/livedata.repository",{"_index":738,"title":{},"body":{"injectables/DataService.html":{},"modules/TransitModule.html":{}}}],["src/repositories/livedata.repository.ts",{"_index":1138,"title":{},"body":{"injectables/LiveDataRepository.html":{},"coverage.html":{}}}],["src/repositories/livedata.repository.ts:9",{"_index":1139,"title":{},"body":{"injectables/LiveDataRepository.html":{}}}],["src/repositories/point.repository.ts",{"_index":1456,"title":{},"body":{"classes/PointRepository.html":{},"coverage.html":{}}}],["src/repositories/point.repository.ts:6",{"_index":1458,"title":{},"body":{"classes/PointRepository.html":{}}}],["src/repositories/route.repository",{"_index":1424,"title":{},"body":{"classes/OTPStrategy.html":{},"classes/SingleRouteStrategy.html":{}}}],["src/repositories/route.repository.ts",{"_index":1518,"title":{},"body":{"classes/RouteRepository.html":{},"coverage.html":{}}}],["src/repositories/route.repository.ts:28",{"_index":1537,"title":{},"body":{"classes/RouteRepository.html":{}}}],["src/repositories/route.repository.ts:32",{"_index":1531,"title":{},"body":{"classes/RouteRepository.html":{}}}],["src/repositories/route.repository.ts:42",{"_index":1527,"title":{},"body":{"classes/RouteRepository.html":{}}}],["src/repositories/route.repository.ts:52",{"_index":1533,"title":{},"body":{"classes/RouteRepository.html":{}}}],["src/repositories/route.repository.ts:66",{"_index":1529,"title":{},"body":{"classes/RouteRepository.html":{}}}],["src/repositories/route.repository.ts:7",{"_index":1525,"title":{},"body":{"classes/RouteRepository.html":{}}}],["src/repositories/routestop.repository",{"_index":1608,"title":{},"body":{"injectables/RouteStopService.html":{},"modules/TransitModule.html":{}}}],["src/repositories/routestop.repository.ts",{"_index":1597,"title":{},"body":{"classes/RouteStopRepository.html":{},"coverage.html":{}}}],["src/repositories/routestop.repository.ts:6",{"_index":1599,"title":{},"body":{"classes/RouteStopRepository.html":{}}}],["src/repositories/schedule.repository.ts",{"_index":1739,"title":{},"body":{"classes/ScheduleRepository.html":{},"coverage.html":{}}}],["src/repositories/schedule.repository.ts:23",{"_index":1749,"title":{},"body":{"classes/ScheduleRepository.html":{}}}],["src/repositories/schedule.repository.ts:30",{"_index":1753,"title":{},"body":{"classes/ScheduleRepository.html":{}}}],["src/repositories/schedule.repository.ts:38",{"_index":1748,"title":{},"body":{"classes/ScheduleRepository.html":{}}}],["src/repositories/schedule.repository.ts:50",{"_index":1751,"title":{},"body":{"classes/ScheduleRepository.html":{}}}],["src/repositories/schedule.repository.ts:6",{"_index":1745,"title":{},"body":{"classes/ScheduleRepository.html":{}}}],["src/repositories/stop.repository.ts",{"_index":1822,"title":{},"body":{"classes/StopRepository.html":{},"coverage.html":{}}}],["src/repositories/stop.repository.ts:29",{"_index":1833,"title":{},"body":{"classes/StopRepository.html":{}}}],["src/repositories/stop.repository.ts:39",{"_index":1832,"title":{},"body":{"classes/StopRepository.html":{}}}],["src/repositories/stop.repository.ts:49",{"_index":1834,"title":{},"body":{"classes/StopRepository.html":{}}}],["src/repositories/stop.repository.ts:63",{"_index":1837,"title":{},"body":{"classes/StopRepository.html":{}}}],["src/repositories/stop.repository.ts:7",{"_index":1827,"title":{},"body":{"classes/StopRepository.html":{}}}],["src/repositories/trip.repository",{"_index":1368,"title":{},"body":{"injectables/OTPService.html":{},"modules/TransitModule.html":{},"injectables/TripService.html":{},"classes/UpdateTrips.html":{}}}],["src/repositories/trip.repository.ts",{"_index":2009,"title":{},"body":{"injectables/TripRepository.html":{},"coverage.html":{}}}],["src/repositories/trip.repository.ts:14",{"_index":2031,"title":{},"body":{"injectables/TripRepository.html":{}}}],["src/repositories/trip.repository.ts:20",{"_index":2029,"title":{},"body":{"injectables/TripRepository.html":{}}}],["src/repositories/trip.repository.ts:34",{"_index":2027,"title":{},"body":{"injectables/TripRepository.html":{}}}],["src/repositories/trip.repository.ts:38",{"_index":2023,"title":{},"body":{"injectables/TripRepository.html":{}}}],["src/repositories/trip.repository.ts:64",{"_index":2033,"title":{},"body":{"injectables/TripRepository.html":{}}}],["src/repositories/trip.repository.ts:8",{"_index":2017,"title":{},"body":{"injectables/TripRepository.html":{}}}],["src/repositories/trip.repository.ts:84",{"_index":2021,"title":{},"body":{"injectables/TripRepository.html":{}}}],["src/repositories/user.repository",{"_index":1686,"title":{},"body":{"injectables/SavedService.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["src/repositories/user.repository.ts",{"_index":2144,"title":{},"body":{"injectables/UserRepository.html":{},"coverage.html":{}}}],["src/repositories/user.repository.ts:10",{"_index":2149,"title":{},"body":{"injectables/UserRepository.html":{}}}],["src/repositories/user.repository.ts:27",{"_index":2165,"title":{},"body":{"injectables/UserRepository.html":{}}}],["src/repositories/user.repository.ts:33",{"_index":2161,"title":{},"body":{"injectables/UserRepository.html":{}}}],["src/repositories/user.repository.ts:42",{"_index":2164,"title":{},"body":{"injectables/UserRepository.html":{}}}],["src/repositories/user.repository.ts:48",{"_index":2154,"title":{},"body":{"injectables/UserRepository.html":{}}}],["src/repositories/user.repository.ts:57",{"_index":2152,"title":{},"body":{"injectables/UserRepository.html":{}}}],["src/repositories/user.repository.ts:66",{"_index":2158,"title":{},"body":{"injectables/UserRepository.html":{}}}],["src/repositories/user.repository.ts:76",{"_index":2156,"title":{},"body":{"injectables/UserRepository.html":{}}}],["src/socketsio/transit.gateway",{"_index":1972,"title":{},"body":{"modules/TransitModule.html":{},"injectables/TripUpdatesListener.html":{},"modules/UserModule.html":{}}}],["src/socketsio/transit.gateway.ts",{"_index":1925,"title":{},"body":{"classes/TransitGateWay.html":{},"coverage.html":{}}}],["src/socketsio/transit.gateway.ts:12",{"_index":1940,"title":{},"body":{"classes/TransitGateWay.html":{}}}],["src/socketsio/transit.gateway.ts:16",{"_index":1935,"title":{},"body":{"classes/TransitGateWay.html":{}}}],["src/socketsio/transit.gateway.ts:21",{"_index":1938,"title":{},"body":{"classes/TransitGateWay.html":{}}}],["src/socketsio/transit.gateway.ts:8",{"_index":1931,"title":{},"body":{"classes/TransitGateWay.html":{}}}],["src/transit/controllers/db.update.controller.ts",{"_index":496,"title":{},"body":{"controllers/DBupdateController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/transit/controllers/db.update.controller.ts:116",{"_index":523,"title":{},"body":{"controllers/DBupdateController.html":{}}}],["src/transit/controllers/db.update.controller.ts:143",{"_index":525,"title":{},"body":{"controllers/DBupdateController.html":{}}}],["src/transit/controllers/db.update.controller.ts:167",{"_index":509,"title":{},"body":{"controllers/DBupdateController.html":{}}}],["src/transit/controllers/db.update.controller.ts:231",{"_index":513,"title":{},"body":{"controllers/DBupdateController.html":{}}}],["src/transit/controllers/db.update.controller.ts:24",{"_index":515,"title":{},"body":{"controllers/DBupdateController.html":{}}}],["src/transit/controllers/db.update.controller.ts:254",{"_index":511,"title":{},"body":{"controllers/DBupdateController.html":{}}}],["src/transit/controllers/db.update.controller.ts:262",{"_index":531,"title":{},"body":{"controllers/DBupdateController.html":{}}}],["src/transit/controllers/db.update.controller.ts:266",{"_index":528,"title":{},"body":{"controllers/DBupdateController.html":{}}}],["src/transit/controllers/db.update.controller.ts:47",{"_index":519,"title":{},"body":{"controllers/DBupdateController.html":{}}}],["src/transit/controllers/db.update.controller.ts:70",{"_index":521,"title":{},"body":{"controllers/DBupdateController.html":{}}}],["src/transit/controllers/db.update.controller.ts:93",{"_index":517,"title":{},"body":{"controllers/DBupdateController.html":{}}}],["src/transit/controllers/live.updates.controller.ts",{"_index":1145,"title":{},"body":{"controllers/LiveUpdatesController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/transit/controllers/live.updates.controller.ts:23",{"_index":1151,"title":{},"body":{"controllers/LiveUpdatesController.html":{}}}],["src/transit/controllers/live.updates.controller.ts:29",{"_index":1154,"title":{},"body":{"controllers/LiveUpdatesController.html":{}}}],["src/transit/controllers/live.updates.controller.ts:45",{"_index":1155,"title":{},"body":{"controllers/LiveUpdatesController.html":{}}}],["src/transit/controllers/transit.controller.ts",{"_index":1880,"title":{},"body":{"controllers/TransitController.html":{},"coverage.html":{}}}],["src/transit/controllers/transit.controller.ts:19",{"_index":1886,"title":{},"body":{"controllers/TransitController.html":{}}}],["src/transit/controllers/transit.controller.ts:25",{"_index":1895,"title":{},"body":{"controllers/TransitController.html":{}}}],["src/transit/controllers/transit.controller.ts:31",{"_index":1885,"title":{},"body":{"controllers/TransitController.html":{}}}],["src/transit/controllers/transit.controller.ts:37",{"_index":1891,"title":{},"body":{"controllers/TransitController.html":{}}}],["src/transit/controllers/transit.controller.ts:49",{"_index":1889,"title":{},"body":{"controllers/TransitController.html":{}}}],["src/transit/controllers/transit.controller.ts:58",{"_index":1898,"title":{},"body":{"controllers/TransitController.html":{}}}],["src/transit/controllers/transit.controller.ts:64",{"_index":1894,"title":{},"body":{"controllers/TransitController.html":{}}}],["src/transit/entities/line.entity",{"_index":1839,"title":{},"body":{"classes/StopRepository.html":{}}}],["src/transit/entities/line.entity.ts",{"_index":1061,"title":{},"body":{"entities/Line.html":{},"coverage.html":{}}}],["src/transit/entities/line.entity.ts:12",{"_index":1071,"title":{},"body":{"entities/Line.html":{}}}],["src/transit/entities/line.entity.ts:15",{"_index":1080,"title":{},"body":{"entities/Line.html":{}}}],["src/transit/entities/line.entity.ts:18",{"_index":1067,"title":{},"body":{"entities/Line.html":{}}}],["src/transit/entities/line.entity.ts:21",{"_index":1066,"title":{},"body":{"entities/Line.html":{}}}],["src/transit/entities/line.entity.ts:24",{"_index":1076,"title":{},"body":{"entities/Line.html":{}}}],["src/transit/entities/line.entity.ts:27",{"_index":1079,"title":{},"body":{"entities/Line.html":{}}}],["src/transit/entities/line.entity.ts:9",{"_index":1070,"title":{},"body":{"entities/Line.html":{}}}],["src/transit/entities/live.data",{"_index":1141,"title":{},"body":{"injectables/LiveDataRepository.html":{}}}],["src/transit/entities/live.data.ts",{"_index":1114,"title":{},"body":{"entities/LiveData.html":{},"coverage.html":{}}}],["src/transit/entities/live.data.ts:10",{"_index":1125,"title":{},"body":{"entities/LiveData.html":{}}}],["src/transit/entities/live.data.ts:13",{"_index":1122,"title":{},"body":{"entities/LiveData.html":{}}}],["src/transit/entities/live.data.ts:16",{"_index":1123,"title":{},"body":{"entities/LiveData.html":{}}}],["src/transit/entities/live.data.ts:19",{"_index":1120,"title":{},"body":{"entities/LiveData.html":{}}}],["src/transit/entities/live.data.ts:22",{"_index":1121,"title":{},"body":{"entities/LiveData.html":{}}}],["src/transit/entities/live.data.ts:25",{"_index":1126,"title":{},"body":{"entities/LiveData.html":{}}}],["src/transit/entities/live.data.ts:28",{"_index":1127,"title":{},"body":{"entities/LiveData.html":{}}}],["src/transit/entities/live.data.ts:31",{"_index":1128,"title":{},"body":{"entities/LiveData.html":{}}}],["src/transit/entities/live.data.ts:34",{"_index":1133,"title":{},"body":{"entities/LiveData.html":{}}}],["src/transit/entities/live.data.ts:37",{"_index":1129,"title":{},"body":{"entities/LiveData.html":{}}}],["src/transit/entities/live.data.ts:40",{"_index":1130,"title":{},"body":{"entities/LiveData.html":{}}}],["src/transit/entities/live.data.ts:43",{"_index":1134,"title":{},"body":{"entities/LiveData.html":{}}}],["src/transit/entities/live.data.ts:46",{"_index":1135,"title":{},"body":{"entities/LiveData.html":{}}}],["src/transit/entities/live.data.ts:49",{"_index":1132,"title":{},"body":{"entities/LiveData.html":{}}}],["src/transit/entities/newschedule.entity.ts",{"_index":1248,"title":{},"body":{"entities/NewSchedule.html":{},"coverage.html":{}}}],["src/transit/entities/newschedule.entity.ts:10",{"_index":1260,"title":{},"body":{"entities/NewSchedule.html":{}}}],["src/transit/entities/newschedule.entity.ts:13",{"_index":1252,"title":{},"body":{"entities/NewSchedule.html":{}}}],["src/transit/entities/newschedule.entity.ts:17",{"_index":1257,"title":{},"body":{"entities/NewSchedule.html":{}}}],["src/transit/entities/newschedule.entity.ts:21",{"_index":1258,"title":{},"body":{"entities/NewSchedule.html":{}}}],["src/transit/entities/newschedule.entity.ts:24",{"_index":1255,"title":{},"body":{"entities/NewSchedule.html":{}}}],["src/transit/entities/newschedule.entity.ts:27",{"_index":1261,"title":{},"body":{"entities/NewSchedule.html":{}}}],["src/transit/entities/newschedule.entity.ts:30",{"_index":1262,"title":{},"body":{"entities/NewSchedule.html":{}}}],["src/transit/entities/newschedule.entity.ts:33",{"_index":1263,"title":{},"body":{"entities/NewSchedule.html":{}}}],["src/transit/entities/newschedule.entity.ts:7",{"_index":1254,"title":{},"body":{"entities/NewSchedule.html":{}}}],["src/transit/entities/point.entity",{"_index":1510,"title":{},"body":{"classes/RouteDto.html":{},"classes/RouteInfoDto.html":{}}}],["src/transit/entities/point.entity.ts",{"_index":1433,"title":{},"body":{"entities/Point.html":{},"coverage.html":{}}}],["src/transit/entities/point.entity.ts:11",{"_index":1437,"title":{},"body":{"entities/Point.html":{}}}],["src/transit/entities/point.entity.ts:14",{"_index":1436,"title":{},"body":{"entities/Point.html":{}}}],["src/transit/entities/point.entity.ts:17",{"_index":1444,"title":{},"body":{"entities/Point.html":{}}}],["src/transit/entities/point.entity.ts:21",{"_index":1443,"title":{},"body":{"entities/Point.html":{}}}],["src/transit/entities/point.entity.ts:25",{"_index":1441,"title":{},"body":{"entities/Point.html":{}}}],["src/transit/entities/point.entity.ts:8",{"_index":1435,"title":{},"body":{"entities/Point.html":{}}}],["src/transit/entities/route.entity",{"_index":1423,"title":{},"body":{"classes/OTPStrategy.html":{},"controllers/SavedController.html":{},"classes/SingleRouteStrategy.html":{}}}],["src/transit/entities/route.entity.ts",{"_index":1480,"title":{},"body":{"entities/Route.html":{},"coverage.html":{}}}],["src/transit/entities/route.entity.ts:11",{"_index":1487,"title":{},"body":{"entities/Route.html":{}}}],["src/transit/entities/route.entity.ts:15",{"_index":1482,"title":{},"body":{"entities/Route.html":{}}}],["src/transit/entities/route.entity.ts:18",{"_index":1492,"title":{},"body":{"entities/Route.html":{}}}],["src/transit/entities/route.entity.ts:21",{"_index":1485,"title":{},"body":{"entities/Route.html":{}}}],["src/transit/entities/route.entity.ts:24",{"_index":1484,"title":{},"body":{"entities/Route.html":{}}}],["src/transit/entities/route.entity.ts:27",{"_index":1483,"title":{},"body":{"entities/Route.html":{}}}],["src/transit/entities/route.entity.ts:30",{"_index":1496,"title":{},"body":{"entities/Route.html":{}}}],["src/transit/entities/route.entity.ts:37",{"_index":1491,"title":{},"body":{"entities/Route.html":{}}}],["src/transit/entities/route.entity.ts:40",{"_index":1494,"title":{},"body":{"entities/Route.html":{}}}],["src/transit/entities/routestops.entity",{"_index":1601,"title":{},"body":{"classes/RouteStopRepository.html":{}}}],["src/transit/entities/routestops.entity.ts",{"_index":1591,"title":{},"body":{"entities/RouteStop.html":{},"coverage.html":{}}}],["src/transit/entities/routestops.entity.ts:11",{"_index":1595,"title":{},"body":{"entities/RouteStop.html":{}}}],["src/transit/entities/routestops.entity.ts:15",{"_index":1594,"title":{},"body":{"entities/RouteStop.html":{}}}],["src/transit/entities/routestops.entity.ts:7",{"_index":1592,"title":{},"body":{"entities/RouteStop.html":{}}}],["src/transit/entities/schedule.entity",{"_index":1721,"title":{},"body":{"classes/ScheduleDetailsDto.html":{}}}],["src/transit/entities/schedule.entity.ts",{"_index":1698,"title":{},"body":{"entities/Schedule.html":{},"coverage.html":{}}}],["src/transit/entities/schedule.entity.ts:10",{"_index":1704,"title":{},"body":{"entities/Schedule.html":{}}}],["src/transit/entities/schedule.entity.ts:13",{"_index":1699,"title":{},"body":{"entities/Schedule.html":{}}}],["src/transit/entities/schedule.entity.ts:17",{"_index":1702,"title":{},"body":{"entities/Schedule.html":{}}}],["src/transit/entities/schedule.entity.ts:21",{"_index":1703,"title":{},"body":{"entities/Schedule.html":{}}}],["src/transit/entities/schedule.entity.ts:24",{"_index":1701,"title":{},"body":{"entities/Schedule.html":{}}}],["src/transit/entities/schedule.entity.ts:27",{"_index":1705,"title":{},"body":{"entities/Schedule.html":{}}}],["src/transit/entities/schedule.entity.ts:30",{"_index":1706,"title":{},"body":{"entities/Schedule.html":{}}}],["src/transit/entities/schedule.entity.ts:33",{"_index":1707,"title":{},"body":{"entities/Schedule.html":{}}}],["src/transit/entities/schedule.entity.ts:7",{"_index":1700,"title":{},"body":{"entities/Schedule.html":{}}}],["src/transit/entities/stop.entity",{"_index":149,"title":{},"body":{"classes/ArrivalDto.html":{},"classes/RouteDto.html":{},"classes/RouteInfoDto.html":{},"controllers/SavedController.html":{}}}],["src/transit/entities/stop.entity.ts",{"_index":1804,"title":{},"body":{"entities/Stop.html":{},"coverage.html":{}}}],["src/transit/entities/stop.entity.ts:11",{"_index":1805,"title":{},"body":{"entities/Stop.html":{}}}],["src/transit/entities/stop.entity.ts:14",{"_index":1809,"title":{},"body":{"entities/Stop.html":{}}}],["src/transit/entities/stop.entity.ts:17",{"_index":1811,"title":{},"body":{"entities/Stop.html":{}}}],["src/transit/entities/stop.entity.ts:20",{"_index":1807,"title":{},"body":{"entities/Stop.html":{}}}],["src/transit/entities/stop.entity.ts:23",{"_index":1806,"title":{},"body":{"entities/Stop.html":{}}}],["src/transit/entities/stop.entity.ts:26",{"_index":1810,"title":{},"body":{"entities/Stop.html":{}}}],["src/transit/entities/stop.entity.ts:7",{"_index":1808,"title":{},"body":{"entities/Stop.html":{}}}],["src/transit/entities/trip.entity",{"_index":2034,"title":{},"body":{"injectables/TripRepository.html":{}}}],["src/transit/entities/trip.entity.ts",{"_index":1976,"title":{},"body":{"entities/Trip.html":{},"coverage.html":{}}}],["src/transit/entities/trip.entity.ts:11",{"_index":1986,"title":{},"body":{"entities/Trip.html":{}}}],["src/transit/entities/trip.entity.ts:14",{"_index":1983,"title":{},"body":{"entities/Trip.html":{}}}],["src/transit/entities/trip.entity.ts:17",{"_index":1984,"title":{},"body":{"entities/Trip.html":{}}}],["src/transit/entities/trip.entity.ts:20",{"_index":1988,"title":{},"body":{"entities/Trip.html":{}}}],["src/transit/entities/trip.entity.ts:23",{"_index":1982,"title":{},"body":{"entities/Trip.html":{}}}],["src/transit/entities/trip.entity.ts:26",{"_index":1981,"title":{},"body":{"entities/Trip.html":{}}}],["src/transit/entities/trip.entity.ts:29",{"_index":1985,"title":{},"body":{"entities/Trip.html":{}}}],["src/transit/entities/trip.entity.ts:32",{"_index":1987,"title":{},"body":{"entities/Trip.html":{}}}],["src/transit/entities/trip.entity.ts:8",{"_index":1989,"title":{},"body":{"entities/Trip.html":{}}}],["src/transit/events/trips.update.event.ts",{"_index":2099,"title":{},"body":{"classes/UpdateTrips.html":{},"coverage.html":{}}}],["src/transit/events/trips.update.event.ts:13",{"_index":2104,"title":{},"body":{"classes/UpdateTrips.html":{}}}],["src/transit/events/trips.update.event.ts:17",{"_index":2106,"title":{},"body":{"classes/UpdateTrips.html":{}}}],["src/transit/events/trips.update.event.ts:21",{"_index":2108,"title":{},"body":{"classes/UpdateTrips.html":{}}}],["src/transit/events/trips.update.event.ts:5",{"_index":2102,"title":{},"body":{"classes/UpdateTrips.html":{}}}],["src/transit/listeners/trips.update.listener.ts",{"_index":2067,"title":{},"body":{"injectables/TripUpdatesListener.html":{},"coverage.html":{}}}],["src/transit/listeners/trips.update.listener.ts:14",{"_index":2076,"title":{},"body":{"injectables/TripUpdatesListener.html":{}}}],["src/transit/listeners/trips.update.listener.ts:23",{"_index":2080,"title":{},"body":{"injectables/TripUpdatesListener.html":{}}}],["src/transit/listeners/trips.update.listener.ts:36",{"_index":2082,"title":{},"body":{"injectables/TripUpdatesListener.html":{}}}],["src/transit/listeners/trips.update.listener.ts:9",{"_index":2072,"title":{},"body":{"injectables/TripUpdatesListener.html":{}}}],["src/transit/navigator/context.ts",{"_index":415,"title":{},"body":{"classes/Context.html":{},"coverage.html":{}}}],["src/transit/navigator/context.ts:10",{"_index":422,"title":{},"body":{"classes/Context.html":{}}}],["src/transit/navigator/context.ts:11",{"_index":421,"title":{},"body":{"classes/Context.html":{}}}],["src/transit/navigator/context.ts:13",{"_index":427,"title":{},"body":{"classes/Context.html":{}}}],["src/transit/navigator/context.ts:17",{"_index":429,"title":{},"body":{"classes/Context.html":{}}}],["src/transit/navigator/context.ts:9",{"_index":424,"title":{},"body":{"classes/Context.html":{}}}],["src/transit/navigator/navigatorstrategy.ts",{"_index":1244,"title":{},"body":{"interfaces/NavigatorStrategy.html":{},"coverage.html":{}}}],["src/transit/navigator/navigatorstrategy.ts:6",{"_index":1247,"title":{},"body":{"interfaces/NavigatorStrategy.html":{}}}],["src/transit/navigator/strategies/otp.strategy.ts",{"_index":1418,"title":{},"body":{"classes/OTPStrategy.html":{},"coverage.html":{}}}],["src/transit/navigator/strategies/otp.strategy.ts:11",{"_index":1422,"title":{},"body":{"classes/OTPStrategy.html":{}}}],["src/transit/navigator/strategies/transitbusstrategy.ts",{"_index":1785,"title":{},"body":{"classes/SingleRouteStrategy.html":{},"coverage.html":{}}}],["src/transit/navigator/strategies/transitbusstrategy.ts:9",{"_index":1786,"title":{},"body":{"classes/SingleRouteStrategy.html":{}}}],["src/transit/proto/position.ts",{"_index":750,"title":{},"body":{"interfaces/FeedEntity.html":{},"interfaces/FeedHeader.html":{},"interfaces/FeedMessage.html":{},"interfaces/Long.html":{},"interfaces/Position.html":{},"classes/PositionProto.html":{},"interfaces/TripDescriptor.html":{},"interfaces/VehicleDescriptor.html":{},"interfaces/VehiclePosition.html":{},"coverage.html":{}}}],["src/transit/proto/position.ts:51",{"_index":1478,"title":{},"body":{"classes/PositionProto.html":{}}}],["src/transit/proto/position.ts:55",{"_index":1479,"title":{},"body":{"classes/PositionProto.html":{}}}],["src/transit/proto/trips.ts",{"_index":776,"title":{},"body":{"interfaces/FeedEntity-1.html":{},"interfaces/FeedHeader-1.html":{},"interfaces/FeedMessage-1.html":{},"interfaces/StopTimeEvent.html":{},"interfaces/StopTimeUpdate.html":{},"classes/Trip-1.html":{},"interfaces/TripDescriptor-1.html":{},"interfaces/TripUpdate.html":{},"coverage.html":{}}}],["src/transit/proto/trips.ts:121",{"_index":2005,"title":{},"body":{"classes/Trip-1.html":{}}}],["src/transit/proto/trips.ts:51",{"_index":1997,"title":{},"body":{"classes/Trip-1.html":{}}}],["src/transit/proto/trips.ts:52",{"_index":2001,"title":{},"body":{"classes/Trip-1.html":{}}}],["src/transit/proto/trips.ts:53",{"_index":1995,"title":{},"body":{"classes/Trip-1.html":{}}}],["src/transit/proto/trips.ts:55",{"_index":2003,"title":{},"body":{"classes/Trip-1.html":{}}}],["src/transit/proto/trips.ts:56",{"_index":2000,"title":{},"body":{"classes/Trip-1.html":{}}}],["src/transit/proto/trips.ts:57",{"_index":1994,"title":{},"body":{"classes/Trip-1.html":{}}}],["src/transit/proto/trips.ts:58",{"_index":1998,"title":{},"body":{"classes/Trip-1.html":{}}}],["src/transit/proto/trips.ts:59",{"_index":2002,"title":{},"body":{"classes/Trip-1.html":{}}}],["src/transit/proto/trips.ts:60",{"_index":2004,"title":{},"body":{"classes/Trip-1.html":{}}}],["src/transit/proto/trips.ts:61",{"_index":1999,"title":{},"body":{"classes/Trip-1.html":{}}}],["src/transit/proto/trips.ts:62",{"_index":1993,"title":{},"body":{"classes/Trip-1.html":{}}}],["src/transit/proto/trips.ts:69",{"_index":2008,"title":{},"body":{"classes/Trip-1.html":{}}}],["src/transit/proto/trips.ts:73",{"_index":2006,"title":{},"body":{"classes/Trip-1.html":{}}}],["src/transit/services/data.service",{"_index":346,"title":{},"body":{"injectables/BookingService.html":{},"controllers/BookingsController.html":{},"injectables/SavedService.html":{}}}],["src/transit/services/data.service.ts",{"_index":692,"title":{},"body":{"injectables/DataService.html":{},"coverage.html":{}}}],["src/transit/services/data.service.ts:14",{"_index":712,"title":{},"body":{"injectables/DataService.html":{}}}],["src/transit/services/data.service.ts:25",{"_index":715,"title":{},"body":{"injectables/DataService.html":{}}}],["src/transit/services/data.service.ts:26",{"_index":714,"title":{},"body":{"injectables/DataService.html":{}}}],["src/transit/services/data.service.ts:29",{"_index":716,"title":{},"body":{"injectables/DataService.html":{}}}],["src/transit/services/data.service.ts:33",{"_index":717,"title":{},"body":{"injectables/DataService.html":{}}}],["src/transit/services/data.service.ts:37",{"_index":718,"title":{},"body":{"injectables/DataService.html":{}}}],["src/transit/services/data.service.ts:41",{"_index":720,"title":{},"body":{"injectables/DataService.html":{}}}],["src/transit/services/data.service.ts:45",{"_index":722,"title":{},"body":{"injectables/DataService.html":{}}}],["src/transit/services/data.service.ts:49",{"_index":724,"title":{},"body":{"injectables/DataService.html":{}}}],["src/transit/services/data.service.ts:53",{"_index":726,"title":{},"body":{"injectables/DataService.html":{}}}],["src/transit/services/data.service.ts:57",{"_index":728,"title":{},"body":{"injectables/DataService.html":{}}}],["src/transit/services/db.update.service.ts",{"_index":452,"title":{},"body":{"injectables/DBUpdateService.html":{},"coverage.html":{}}}],["src/transit/services/db.update.service.ts:13",{"_index":463,"title":{},"body":{"injectables/DBUpdateService.html":{}}}],["src/transit/services/db.update.service.ts:19",{"_index":472,"title":{},"body":{"injectables/DBUpdateService.html":{}}}],["src/transit/services/db.update.service.ts:25",{"_index":469,"title":{},"body":{"injectables/DBUpdateService.html":{}}}],["src/transit/services/db.update.service.ts:31",{"_index":465,"title":{},"body":{"injectables/DBUpdateService.html":{}}}],["src/transit/services/db.update.service.ts:37",{"_index":468,"title":{},"body":{"injectables/DBUpdateService.html":{}}}],["src/transit/services/db.update.service.ts:43",{"_index":471,"title":{},"body":{"injectables/DBUpdateService.html":{}}}],["src/transit/services/db.update.service.ts:8",{"_index":478,"title":{},"body":{"injectables/DBUpdateService.html":{}}}],["src/transit/services/db.update.service.ts:9",{"_index":462,"title":{},"body":{"injectables/DBUpdateService.html":{}}}],["src/transit/services/line.service.ts",{"_index":1106,"title":{},"body":{"injectables/LineService.html":{},"coverage.html":{}}}],["src/transit/services/line.service.ts:10",{"_index":1108,"title":{},"body":{"injectables/LineService.html":{}}}],["src/transit/services/line.service.ts:14",{"_index":1109,"title":{},"body":{"injectables/LineService.html":{}}}],["src/transit/services/line.service.ts:6",{"_index":1107,"title":{},"body":{"injectables/LineService.html":{}}}],["src/transit/services/live.updates.service.ts",{"_index":1196,"title":{},"body":{"injectables/LiveUpdatesService.html":{},"coverage.html":{}}}],["src/transit/services/live.updates.service.ts:15",{"_index":1206,"title":{},"body":{"injectables/LiveUpdatesService.html":{}}}],["src/transit/services/live.updates.service.ts:16",{"_index":1200,"title":{},"body":{"injectables/LiveUpdatesService.html":{}}}],["src/transit/services/live.updates.service.ts:20",{"_index":1202,"title":{},"body":{"injectables/LiveUpdatesService.html":{}}}],["src/transit/services/live.updates.service.ts:27",{"_index":1204,"title":{},"body":{"injectables/LiveUpdatesService.html":{}}}],["src/transit/services/newschedule.service.ts",{"_index":1267,"title":{},"body":{"classes/NewScheduleService.html":{},"coverage.html":{}}}],["src/transit/services/newschedule.service.ts:10",{"_index":1270,"title":{},"body":{"classes/NewScheduleService.html":{}}}],["src/transit/services/newschedule.service.ts:14",{"_index":1269,"title":{},"body":{"classes/NewScheduleService.html":{}}}],["src/transit/services/newschedule.service.ts:6",{"_index":1268,"title":{},"body":{"classes/NewScheduleService.html":{}}}],["src/transit/services/otp.service",{"_index":1425,"title":{},"body":{"classes/OTPStrategy.html":{}}}],["src/transit/services/otp.service.ts",{"_index":1347,"title":{},"body":{"injectables/OTPService.html":{},"coverage.html":{}}}],["src/transit/services/otp.service.ts:13",{"_index":1353,"title":{},"body":{"injectables/OTPService.html":{}}}],["src/transit/services/otp.service.ts:17",{"_index":1362,"title":{},"body":{"injectables/OTPService.html":{}}}],["src/transit/services/otp.service.ts:21",{"_index":1357,"title":{},"body":{"injectables/OTPService.html":{}}}],["src/transit/services/otp.service.ts:27",{"_index":1355,"title":{},"body":{"injectables/OTPService.html":{}}}],["src/transit/services/otp.service.ts:53",{"_index":1359,"title":{},"body":{"injectables/OTPService.html":{}}}],["src/transit/services/otp.service.ts:63",{"_index":1364,"title":{},"body":{"injectables/OTPService.html":{}}}],["src/transit/services/points.service.ts",{"_index":1468,"title":{},"body":{"injectables/PointService.html":{},"coverage.html":{}}}],["src/transit/services/points.service.ts:10",{"_index":1471,"title":{},"body":{"injectables/PointService.html":{}}}],["src/transit/services/points.service.ts:14",{"_index":1473,"title":{},"body":{"injectables/PointService.html":{}}}],["src/transit/services/points.service.ts:6",{"_index":1469,"title":{},"body":{"injectables/PointService.html":{}}}],["src/transit/services/routes.service.ts",{"_index":1571,"title":{},"body":{"injectables/RouteService.html":{},"coverage.html":{}}}],["src/transit/services/routes.service.ts:10",{"_index":1578,"title":{},"body":{"injectables/RouteService.html":{}}}],["src/transit/services/routes.service.ts:14",{"_index":1575,"title":{},"body":{"injectables/RouteService.html":{}}}],["src/transit/services/routes.service.ts:18",{"_index":1577,"title":{},"body":{"injectables/RouteService.html":{}}}],["src/transit/services/routes.service.ts:22",{"_index":1580,"title":{},"body":{"injectables/RouteService.html":{}}}],["src/transit/services/routes.service.ts:26",{"_index":1579,"title":{},"body":{"injectables/RouteService.html":{}}}],["src/transit/services/routes.service.ts:30",{"_index":1581,"title":{},"body":{"injectables/RouteService.html":{}}}],["src/transit/services/routes.service.ts:34",{"_index":1583,"title":{},"body":{"injectables/RouteService.html":{}}}],["src/transit/services/routes.service.ts:6",{"_index":1574,"title":{},"body":{"injectables/RouteService.html":{}}}],["src/transit/services/routestop.service.ts",{"_index":1604,"title":{},"body":{"injectables/RouteStopService.html":{},"coverage.html":{}}}],["src/transit/services/routestop.service.ts:12",{"_index":1607,"title":{},"body":{"injectables/RouteStopService.html":{}}}],["src/transit/services/routestop.service.ts:8",{"_index":1605,"title":{},"body":{"injectables/RouteStopService.html":{}}}],["src/transit/services/schedule.service.ts",{"_index":1763,"title":{},"body":{"injectables/ScheduleService.html":{},"coverage.html":{}}}],["src/transit/services/schedule.service.ts:10",{"_index":1772,"title":{},"body":{"injectables/ScheduleService.html":{}}}],["src/transit/services/schedule.service.ts:14",{"_index":1777,"title":{},"body":{"injectables/ScheduleService.html":{}}}],["src/transit/services/schedule.service.ts:18",{"_index":1770,"title":{},"body":{"injectables/ScheduleService.html":{}}}],["src/transit/services/schedule.service.ts:22",{"_index":1773,"title":{},"body":{"injectables/ScheduleService.html":{}}}],["src/transit/services/schedule.service.ts:26",{"_index":1775,"title":{},"body":{"injectables/ScheduleService.html":{}}}],["src/transit/services/schedule.service.ts:30",{"_index":1767,"title":{},"body":{"injectables/ScheduleService.html":{}}}],["src/transit/services/schedule.service.ts:34",{"_index":1769,"title":{},"body":{"injectables/ScheduleService.html":{}}}],["src/transit/services/schedule.service.ts:6",{"_index":1766,"title":{},"body":{"injectables/ScheduleService.html":{}}}],["src/transit/services/stop.service.ts",{"_index":1860,"title":{},"body":{"injectables/StopService.html":{},"coverage.html":{}}}],["src/transit/services/stop.service.ts:10",{"_index":1869,"title":{},"body":{"injectables/StopService.html":{}}}],["src/transit/services/stop.service.ts:14",{"_index":1866,"title":{},"body":{"injectables/StopService.html":{}}}],["src/transit/services/stop.service.ts:18",{"_index":1868,"title":{},"body":{"injectables/StopService.html":{}}}],["src/transit/services/stop.service.ts:22",{"_index":1872,"title":{},"body":{"injectables/StopService.html":{}}}],["src/transit/services/stop.service.ts:26",{"_index":1862,"title":{},"body":{"injectables/StopService.html":{}}}],["src/transit/services/stop.service.ts:30",{"_index":1867,"title":{},"body":{"injectables/StopService.html":{}}}],["src/transit/services/stop.service.ts:34",{"_index":1870,"title":{},"body":{"injectables/StopService.html":{}}}],["src/transit/services/stop.service.ts:38",{"_index":1864,"title":{},"body":{"injectables/StopService.html":{}}}],["src/transit/services/stop.service.ts:6",{"_index":1861,"title":{},"body":{"injectables/StopService.html":{}}}],["src/transit/services/trip.service.ts",{"_index":2050,"title":{},"body":{"injectables/TripService.html":{},"coverage.html":{}}}],["src/transit/services/trip.service.ts:10",{"_index":2056,"title":{},"body":{"injectables/TripService.html":{}}}],["src/transit/services/trip.service.ts:14",{"_index":2055,"title":{},"body":{"injectables/TripService.html":{}}}],["src/transit/services/trip.service.ts:18",{"_index":2058,"title":{},"body":{"injectables/TripService.html":{}}}],["src/transit/services/trip.service.ts:22",{"_index":2057,"title":{},"body":{"injectables/TripService.html":{}}}],["src/transit/services/trip.service.ts:26",{"_index":2053,"title":{},"body":{"injectables/TripService.html":{}}}],["src/transit/services/trip.service.ts:30",{"_index":2054,"title":{},"body":{"injectables/TripService.html":{}}}],["src/transit/services/trip.service.ts:34",{"_index":2059,"title":{},"body":{"injectables/TripService.html":{}}}],["src/transit/services/trip.service.ts:38",{"_index":2052,"title":{},"body":{"injectables/TripService.html":{}}}],["src/transit/services/trip.service.ts:6",{"_index":2051,"title":{},"body":{"injectables/TripService.html":{}}}],["src/transit/transit.module",{"_index":2137,"title":{},"body":{"modules/UserModule.html":{}}}],["src/transit/transit.module.ts",{"_index":1959,"title":{},"body":{"modules/TransitModule.html":{}}}],["src/transit/transitdtos/arrival.dto.ts",{"_index":119,"title":{},"body":{"classes/ArrivalDto.html":{},"coverage.html":{}}}],["src/transit/transitdtos/arrival.dto.ts:10",{"_index":145,"title":{},"body":{"classes/ArrivalDto.html":{}}}],["src/transit/transitdtos/arrival.dto.ts:11",{"_index":147,"title":{},"body":{"classes/ArrivalDto.html":{}}}],["src/transit/transitdtos/arrival.dto.ts:12",{"_index":146,"title":{},"body":{"classes/ArrivalDto.html":{}}}],["src/transit/transitdtos/arrival.dto.ts:13",{"_index":142,"title":{},"body":{"classes/ArrivalDto.html":{}}}],["src/transit/transitdtos/arrival.dto.ts:14",{"_index":143,"title":{},"body":{"classes/ArrivalDto.html":{}}}],["src/transit/transitdtos/arrival.dto.ts:15",{"_index":134,"title":{},"body":{"classes/ArrivalDto.html":{}}}],["src/transit/transitdtos/arrival.dto.ts:5",{"_index":139,"title":{},"body":{"classes/ArrivalDto.html":{}}}],["src/transit/transitdtos/arrival.dto.ts:6",{"_index":140,"title":{},"body":{"classes/ArrivalDto.html":{}}}],["src/transit/transitdtos/arrival.dto.ts:7",{"_index":137,"title":{},"body":{"classes/ArrivalDto.html":{}}}],["src/transit/transitdtos/arrival.dto.ts:8",{"_index":138,"title":{},"body":{"classes/ArrivalDto.html":{}}}],["src/transit/transitdtos/arrival.dto.ts:9",{"_index":144,"title":{},"body":{"classes/ArrivalDto.html":{}}}],["src/transit/transitdtos/itinerary.dto",{"_index":399,"title":{},"body":{"controllers/BookingsController.html":{},"classes/OTPStrategy.html":{}}}],["src/transit/transitdtos/itinerary.dto.ts",{"_index":858,"title":{},"body":{"classes/Itinerary.html":{},"classes/Leg.html":{},"classes/Plan.html":{},"classes/Step.html":{},"classes/Vertex.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/transit/transitdtos/itinerary.dto.ts:10",{"_index":1801,"title":{},"body":{"classes/Step.html":{}}}],["src/transit/transitdtos/itinerary.dto.ts:105",{"_index":1059,"title":{},"body":{"classes/Leg.html":{}}}],["src/transit/transitdtos/itinerary.dto.ts:11",{"_index":1797,"title":{},"body":{"classes/Step.html":{}}}],["src/transit/transitdtos/itinerary.dto.ts:113",{"_index":1060,"title":{},"body":{"classes/Leg.html":{}}}],["src/transit/transitdtos/itinerary.dto.ts:121",{"_index":1056,"title":{},"body":{"classes/Leg.html":{}}}],["src/transit/transitdtos/itinerary.dto.ts:126",{"_index":1057,"title":{},"body":{"classes/Leg.html":{}}}],["src/transit/transitdtos/itinerary.dto.ts:134",{"_index":874,"title":{},"body":{"classes/Itinerary.html":{}}}],["src/transit/transitdtos/itinerary.dto.ts:135",{"_index":877,"title":{},"body":{"classes/Itinerary.html":{}}}],["src/transit/transitdtos/itinerary.dto.ts:136",{"_index":875,"title":{},"body":{"classes/Itinerary.html":{}}}],["src/transit/transitdtos/itinerary.dto.ts:137",{"_index":881,"title":{},"body":{"classes/Itinerary.html":{}}}],["src/transit/transitdtos/itinerary.dto.ts:138",{"_index":878,"title":{},"body":{"classes/Itinerary.html":{}}}],["src/transit/transitdtos/itinerary.dto.ts:139",{"_index":879,"title":{},"body":{"classes/Itinerary.html":{}}}],["src/transit/transitdtos/itinerary.dto.ts:140",{"_index":880,"title":{},"body":{"classes/Itinerary.html":{}}}],["src/transit/transitdtos/itinerary.dto.ts:141",{"_index":872,"title":{},"body":{"classes/Itinerary.html":{}}}],["src/transit/transitdtos/itinerary.dto.ts:142",{"_index":873,"title":{},"body":{"classes/Itinerary.html":{}}}],["src/transit/transitdtos/itinerary.dto.ts:143",{"_index":876,"title":{},"body":{"classes/Itinerary.html":{}}}],["src/transit/transitdtos/itinerary.dto.ts:144",{"_index":871,"title":{},"body":{"classes/Itinerary.html":{}}}],["src/transit/transitdtos/itinerary.dto.ts:160",{"_index":883,"title":{},"body":{"classes/Itinerary.html":{}}}],["src/transit/transitdtos/itinerary.dto.ts:168",{"_index":1428,"title":{},"body":{"classes/Plan.html":{}}}],["src/transit/transitdtos/itinerary.dto.ts:169",{"_index":1429,"title":{},"body":{"classes/Plan.html":{}}}],["src/transit/transitdtos/itinerary.dto.ts:170",{"_index":1432,"title":{},"body":{"classes/Plan.html":{}}}],["src/transit/transitdtos/itinerary.dto.ts:171",{"_index":1427,"title":{},"body":{"classes/Plan.html":{}}}],["src/transit/transitdtos/itinerary.dto.ts:172",{"_index":1430,"title":{},"body":{"classes/Plan.html":{}}}],["src/transit/transitdtos/itinerary.dto.ts:173",{"_index":1431,"title":{},"body":{"classes/Plan.html":{}}}],["src/transit/transitdtos/itinerary.dto.ts:174",{"_index":1426,"title":{},"body":{"classes/Plan.html":{}}}],["src/transit/transitdtos/itinerary.dto.ts:27",{"_index":2204,"title":{},"body":{"classes/Vertex.html":{}}}],["src/transit/transitdtos/itinerary.dto.ts:28",{"_index":2203,"title":{},"body":{"classes/Vertex.html":{}}}],["src/transit/transitdtos/itinerary.dto.ts:29",{"_index":2202,"title":{},"body":{"classes/Vertex.html":{}}}],["src/transit/transitdtos/itinerary.dto.ts:30",{"_index":2208,"title":{},"body":{"classes/Vertex.html":{}}}],["src/transit/transitdtos/itinerary.dto.ts:31",{"_index":2201,"title":{},"body":{"classes/Vertex.html":{}}}],["src/transit/transitdtos/itinerary.dto.ts:32",{"_index":2200,"title":{},"body":{"classes/Vertex.html":{}}}],["src/transit/transitdtos/itinerary.dto.ts:33",{"_index":2205,"title":{},"body":{"classes/Vertex.html":{}}}],["src/transit/transitdtos/itinerary.dto.ts:34",{"_index":2206,"title":{},"body":{"classes/Vertex.html":{}}}],["src/transit/transitdtos/itinerary.dto.ts:35",{"_index":2207,"title":{},"body":{"classes/Vertex.html":{}}}],["src/transit/transitdtos/itinerary.dto.ts:36",{"_index":2199,"title":{},"body":{"classes/Vertex.html":{}}}],["src/transit/transitdtos/itinerary.dto.ts:5",{"_index":1799,"title":{},"body":{"classes/Step.html":{}}}],["src/transit/transitdtos/itinerary.dto.ts:51",{"_index":2209,"title":{},"body":{"classes/Vertex.html":{}}}],["src/transit/transitdtos/itinerary.dto.ts:6",{"_index":1802,"title":{},"body":{"classes/Step.html":{}}}],["src/transit/transitdtos/itinerary.dto.ts:60",{"_index":1047,"title":{},"body":{"classes/Leg.html":{}}}],["src/transit/transitdtos/itinerary.dto.ts:61",{"_index":1040,"title":{},"body":{"classes/Leg.html":{}}}],["src/transit/transitdtos/itinerary.dto.ts:62",{"_index":1054,"title":{},"body":{"classes/Leg.html":{}}}],["src/transit/transitdtos/itinerary.dto.ts:63",{"_index":1046,"title":{},"body":{"classes/Leg.html":{}}}],["src/transit/transitdtos/itinerary.dto.ts:64",{"_index":1052,"title":{},"body":{"classes/Leg.html":{}}}],["src/transit/transitdtos/itinerary.dto.ts:65",{"_index":1048,"title":{},"body":{"classes/Leg.html":{}}}],["src/transit/transitdtos/itinerary.dto.ts:66",{"_index":1055,"title":{},"body":{"classes/Leg.html":{}}}],["src/transit/transitdtos/itinerary.dto.ts:67",{"_index":1050,"title":{},"body":{"classes/Leg.html":{}}}],["src/transit/transitdtos/itinerary.dto.ts:68",{"_index":1035,"title":{},"body":{"classes/Leg.html":{}}}],["src/transit/transitdtos/itinerary.dto.ts:69",{"_index":1036,"title":{},"body":{"classes/Leg.html":{}}}],["src/transit/transitdtos/itinerary.dto.ts:7",{"_index":1803,"title":{},"body":{"classes/Step.html":{}}}],["src/transit/transitdtos/itinerary.dto.ts:70",{"_index":1051,"title":{},"body":{"classes/Leg.html":{}}}],["src/transit/transitdtos/itinerary.dto.ts:71",{"_index":1041,"title":{},"body":{"classes/Leg.html":{}}}],["src/transit/transitdtos/itinerary.dto.ts:72",{"_index":1039,"title":{},"body":{"classes/Leg.html":{}}}],["src/transit/transitdtos/itinerary.dto.ts:73",{"_index":1038,"title":{},"body":{"classes/Leg.html":{}}}],["src/transit/transitdtos/itinerary.dto.ts:74",{"_index":1037,"title":{},"body":{"classes/Leg.html":{}}}],["src/transit/transitdtos/itinerary.dto.ts:75",{"_index":1049,"title":{},"body":{"classes/Leg.html":{}}}],["src/transit/transitdtos/itinerary.dto.ts:76",{"_index":1043,"title":{},"body":{"classes/Leg.html":{}}}],["src/transit/transitdtos/itinerary.dto.ts:77",{"_index":1053,"title":{},"body":{"classes/Leg.html":{}}}],["src/transit/transitdtos/itinerary.dto.ts:78",{"_index":1044,"title":{},"body":{"classes/Leg.html":{}}}],["src/transit/transitdtos/itinerary.dto.ts:79",{"_index":1045,"title":{},"body":{"classes/Leg.html":{}}}],["src/transit/transitdtos/itinerary.dto.ts:8",{"_index":1798,"title":{},"body":{"classes/Step.html":{}}}],["src/transit/transitdtos/itinerary.dto.ts:80",{"_index":1042,"title":{},"body":{"classes/Leg.html":{}}}],["src/transit/transitdtos/itinerary.dto.ts:81",{"_index":1034,"title":{},"body":{"classes/Leg.html":{}}}],["src/transit/transitdtos/itinerary.dto.ts:9",{"_index":1800,"title":{},"body":{"classes/Step.html":{}}}],["src/transit/transitdtos/line.dto.ts",{"_index":1084,"title":{},"body":{"classes/LineDto.html":{},"coverage.html":{}}}],["src/transit/transitdtos/line.dto.ts:3",{"_index":1087,"title":{},"body":{"classes/LineDto.html":{}}}],["src/transit/transitdtos/line.dto.ts:4",{"_index":1088,"title":{},"body":{"classes/LineDto.html":{}}}],["src/transit/transitdtos/line.dto.ts:5",{"_index":1089,"title":{},"body":{"classes/LineDto.html":{}}}],["src/transit/transitdtos/line.dto.ts:6",{"_index":1086,"title":{},"body":{"classes/LineDto.html":{}}}],["src/transit/transitdtos/line.dto.ts:7",{"_index":1085,"title":{},"body":{"classes/LineDto.html":{}}}],["src/transit/transitdtos/point.dto.ts",{"_index":1449,"title":{},"body":{"classes/PointDto.html":{},"coverage.html":{}}}],["src/transit/transitdtos/point.dto.ts:3",{"_index":1450,"title":{},"body":{"classes/PointDto.html":{}}}],["src/transit/transitdtos/point.dto.ts:4",{"_index":1454,"title":{},"body":{"classes/PointDto.html":{}}}],["src/transit/transitdtos/point.dto.ts:5",{"_index":1452,"title":{},"body":{"classes/PointDto.html":{}}}],["src/transit/transitdtos/point.dto.ts:6",{"_index":1451,"title":{},"body":{"classes/PointDto.html":{}}}],["src/transit/transitdtos/point.dto.ts:7",{"_index":1453,"title":{},"body":{"classes/PointDto.html":{}}}],["src/transit/transitdtos/route.dto.ts",{"_index":1503,"title":{},"body":{"classes/RouteDto.html":{},"classes/RouteInfoDto.html":{},"coverage.html":{}}}],["src/transit/transitdtos/route.dto.ts:10",{"_index":1505,"title":{},"body":{"classes/RouteDto.html":{}}}],["src/transit/transitdtos/route.dto.ts:15",{"_index":1517,"title":{},"body":{"classes/RouteInfoDto.html":{}}}],["src/transit/transitdtos/route.dto.ts:16",{"_index":1516,"title":{},"body":{"classes/RouteInfoDto.html":{}}}],["src/transit/transitdtos/route.dto.ts:17",{"_index":1515,"title":{},"body":{"classes/RouteInfoDto.html":{}}}],["src/transit/transitdtos/route.dto.ts:5",{"_index":1508,"title":{},"body":{"classes/RouteDto.html":{}}}],["src/transit/transitdtos/route.dto.ts:6",{"_index":1504,"title":{},"body":{"classes/RouteDto.html":{}}}],["src/transit/transitdtos/route.dto.ts:7",{"_index":1509,"title":{},"body":{"classes/RouteDto.html":{}}}],["src/transit/transitdtos/route.dto.ts:8",{"_index":1507,"title":{},"body":{"classes/RouteDto.html":{}}}],["src/transit/transitdtos/route.dto.ts:9",{"_index":1506,"title":{},"body":{"classes/RouteDto.html":{}}}],["src/transit/transitdtos/schedule.details.ts",{"_index":1717,"title":{},"body":{"classes/ScheduleDetailsDto.html":{},"coverage.html":{}}}],["src/transit/transitdtos/schedule.details.ts:5",{"_index":1720,"title":{},"body":{"classes/ScheduleDetailsDto.html":{}}}],["src/transit/transitdtos/schedule.details.ts:6",{"_index":1719,"title":{},"body":{"classes/ScheduleDetailsDto.html":{}}}],["src/transit/transitdtos/schedule.dto.ts",{"_index":1724,"title":{},"body":{"classes/ScheduleDto.html":{},"coverage.html":{}}}],["src/transit/transitdtos/schedule.dto.ts:3",{"_index":1733,"title":{},"body":{"classes/ScheduleDto.html":{}}}],["src/transit/transitdtos/schedule.dto.ts:4",{"_index":1731,"title":{},"body":{"classes/ScheduleDto.html":{}}}],["src/transit/transitdtos/schedule.dto.ts:5",{"_index":1732,"title":{},"body":{"classes/ScheduleDto.html":{}}}],["src/transit/transitdtos/schedule.dto.ts:6",{"_index":1736,"title":{},"body":{"classes/ScheduleDto.html":{}}}],["src/transit/transitdtos/schedule.dto.ts:7",{"_index":1734,"title":{},"body":{"classes/ScheduleDto.html":{}}}],["src/transit/transitdtos/schedule.dto.ts:8",{"_index":1737,"title":{},"body":{"classes/ScheduleDto.html":{}}}],["src/transit/transitdtos/schedule.dto.ts:9",{"_index":1735,"title":{},"body":{"classes/ScheduleDto.html":{}}}],["src/transit/transitdtos/scheduledays.dto.ts",{"_index":1709,"title":{},"body":{"classes/ScheduleDayDto.html":{},"coverage.html":{}}}],["src/transit/transitdtos/scheduledays.dto.ts:3",{"_index":1713,"title":{},"body":{"classes/ScheduleDayDto.html":{}}}],["src/transit/transitdtos/scheduledays.dto.ts:4",{"_index":1714,"title":{},"body":{"classes/ScheduleDayDto.html":{}}}],["src/transit/transitdtos/scheduledays.dto.ts:5",{"_index":1715,"title":{},"body":{"classes/ScheduleDayDto.html":{}}}],["src/transit/transitdtos/stop.dto.ts",{"_index":1813,"title":{},"body":{"classes/StopDto.html":{},"coverage.html":{}}}],["src/transit/transitdtos/stop.dto.ts:3",{"_index":1817,"title":{},"body":{"classes/StopDto.html":{}}}],["src/transit/transitdtos/stop.dto.ts:4",{"_index":1814,"title":{},"body":{"classes/StopDto.html":{}}}],["src/transit/transitdtos/stop.dto.ts:5",{"_index":1818,"title":{},"body":{"classes/StopDto.html":{}}}],["src/transit/transitdtos/stop.dto.ts:6",{"_index":1819,"title":{},"body":{"classes/StopDto.html":{}}}],["src/transit/transitdtos/stop.dto.ts:7",{"_index":1816,"title":{},"body":{"classes/StopDto.html":{}}}],["src/transit/transitdtos/stop.dto.ts:8",{"_index":1815,"title":{},"body":{"classes/StopDto.html":{}}}],["src/transit/transitdtos/stop.dto.ts:9",{"_index":1820,"title":{},"body":{"classes/StopDto.html":{}}}],["src/transit/transitdtos/trip.state",{"_index":431,"title":{},"body":{"classes/Context.html":{},"interfaces/NavigatorStrategy.html":{},"classes/OTPStrategy.html":{},"classes/SingleRouteStrategy.html":{}}}],["src/transit/transitdtos/trip.state.ts",{"_index":1275,"title":{},"body":{"classes/OTPParams.html":{},"interfaces/TripState.html":{},"coverage.html":{}}}],["src/transit/transitdtos/trip.state.ts:15",{"_index":1293,"title":{},"body":{"classes/OTPParams.html":{}}}],["src/transit/transitdtos/trip.state.ts:16",{"_index":1304,"title":{},"body":{"classes/OTPParams.html":{}}}],["src/transit/transitdtos/trip.state.ts:17",{"_index":1303,"title":{},"body":{"classes/OTPParams.html":{}}}],["src/transit/transitdtos/trip.state.ts:18",{"_index":1291,"title":{},"body":{"classes/OTPParams.html":{}}}],["src/transit/transitdtos/trip.state.ts:19",{"_index":1290,"title":{},"body":{"classes/OTPParams.html":{}}}],["src/transit/transitdtos/trip.state.ts:20",{"_index":1298,"title":{},"body":{"classes/OTPParams.html":{}}}],["src/transit/transitdtos/trip.state.ts:21",{"_index":1296,"title":{},"body":{"classes/OTPParams.html":{}}}],["src/transit/transitdtos/trip.state.ts:22",{"_index":1305,"title":{},"body":{"classes/OTPParams.html":{}}}],["src/transit/transitdtos/trip.state.ts:23",{"_index":1301,"title":{},"body":{"classes/OTPParams.html":{}}}],["src/transit/transitdtos/trip.state.ts:24",{"_index":1299,"title":{},"body":{"classes/OTPParams.html":{}}}],["src/transit/transitdtos/trip.state.ts:25",{"_index":1302,"title":{},"body":{"classes/OTPParams.html":{}}}],["src/transit/transitdtos/trip.state.ts:26",{"_index":1292,"title":{},"body":{"classes/OTPParams.html":{}}}],["src/transit/transitdtos/trip.state.ts:27",{"_index":1288,"title":{},"body":{"classes/OTPParams.html":{}}}],["src/transit/transitdtos/trip.state.ts:44",{"_index":1308,"title":{},"body":{"classes/OTPParams.html":{}}}],["src/transit/transitdtos/trip.state.ts:65",{"_index":1307,"title":{},"body":{"classes/OTPParams.html":{}}}],["src/user/controllers/bookings.controller.ts",{"_index":380,"title":{},"body":{"controllers/BookingsController.html":{},"coverage.html":{}}}],["src/user/controllers/bookings.controller.ts:17",{"_index":396,"title":{},"body":{"controllers/BookingsController.html":{}}}],["src/user/controllers/bookings.controller.ts:24",{"_index":387,"title":{},"body":{"controllers/BookingsController.html":{}}}],["src/user/controllers/bookings.controller.ts:31",{"_index":393,"title":{},"body":{"controllers/BookingsController.html":{}}}],["src/user/controllers/bookings.controller.ts:38",{"_index":390,"title":{},"body":{"controllers/BookingsController.html":{}}}],["src/user/controllers/saved.controller.ts",{"_index":1611,"title":{},"body":{"controllers/SavedController.html":{},"coverage.html":{}}}],["src/user/controllers/saved.controller.ts:15",{"_index":1623,"title":{},"body":{"controllers/SavedController.html":{}}}],["src/user/controllers/saved.controller.ts:22",{"_index":1625,"title":{},"body":{"controllers/SavedController.html":{}}}],["src/user/controllers/saved.controller.ts:29",{"_index":1620,"title":{},"body":{"controllers/SavedController.html":{}}}],["src/user/controllers/saved.controller.ts:36",{"_index":1628,"title":{},"body":{"controllers/SavedController.html":{}}}],["src/user/controllers/saved.controller.ts:43",{"_index":1631,"title":{},"body":{"controllers/SavedController.html":{}}}],["src/user/controllers/saved.controller.ts:50",{"_index":1634,"title":{},"body":{"controllers/SavedController.html":{}}}],["src/user/controllers/saved.controller.ts:57",{"_index":1637,"title":{},"body":{"controllers/SavedController.html":{}}}],["src/user/controllers/user.controller.ts",{"_index":2123,"title":{},"body":{"controllers/UserController.html":{},"coverage.html":{}}}],["src/user/controllers/user.controller.ts:17",{"_index":2124,"title":{},"body":{"controllers/UserController.html":{}}}],["src/user/controllers/user.controller.ts:34",{"_index":2126,"title":{},"body":{"controllers/UserController.html":{}}}],["src/user/controllers/user.controller.ts:40",{"_index":2125,"title":{},"body":{"controllers/UserController.html":{}}}],["src/user/dto/user.dto.ts",{"_index":438,"title":{},"body":{"classes/CreateUserDto.html":{},"coverage.html":{}}}],["src/user/dto/user.dto.ts:11",{"_index":440,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["src/user/dto/user.dto.ts:15",{"_index":442,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["src/user/dto/user.dto.ts:7",{"_index":444,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["src/user/entities/booking.entity",{"_index":312,"title":{},"body":{"injectables/BookingRepository.html":{},"injectables/OTPService.html":{},"injectables/TripUpdatesListener.html":{},"classes/UpdateTrips.html":{}}}],["src/user/entities/booking.entity.ts",{"_index":243,"title":{},"body":{"entities/Booking.html":{},"coverage.html":{}}}],["src/user/entities/booking.entity.ts:10",{"_index":268,"title":{},"body":{"entities/Booking.html":{}}}],["src/user/entities/booking.entity.ts:13",{"_index":263,"title":{},"body":{"entities/Booking.html":{}}}],["src/user/entities/booking.entity.ts:16",{"_index":259,"title":{},"body":{"entities/Booking.html":{}}}],["src/user/entities/booking.entity.ts:19",{"_index":262,"title":{},"body":{"entities/Booking.html":{}}}],["src/user/entities/booking.entity.ts:22",{"_index":257,"title":{},"body":{"entities/Booking.html":{}}}],["src/user/entities/booking.entity.ts:25",{"_index":260,"title":{},"body":{"entities/Booking.html":{}}}],["src/user/entities/booking.entity.ts:28",{"_index":261,"title":{},"body":{"entities/Booking.html":{}}}],["src/user/entities/booking.entity.ts:31",{"_index":265,"title":{},"body":{"entities/Booking.html":{}}}],["src/user/entities/booking.entity.ts:33",{"_index":264,"title":{},"body":{"entities/Booking.html":{}}}],["src/user/entities/booking.entity.ts:7",{"_index":267,"title":{},"body":{"entities/Booking.html":{}}}],["src/user/entities/user.entity",{"_index":221,"title":{},"body":{"injectables/AuthService.html":{},"injectables/LocalStrategy.html":{},"entities/Route.html":{},"injectables/UserRepository.html":{}}}],["src/user/entities/user.entity.ts",{"_index":2111,"title":{},"body":{"entities/User.html":{},"coverage.html":{}}}],["src/user/entities/user.entity.ts:10",{"_index":2119,"title":{},"body":{"entities/User.html":{}}}],["src/user/entities/user.entity.ts:16",{"_index":2113,"title":{},"body":{"entities/User.html":{}}}],["src/user/entities/user.entity.ts:21",{"_index":2117,"title":{},"body":{"entities/User.html":{}}}],["src/user/entities/user.entity.ts:26",{"_index":2115,"title":{},"body":{"entities/User.html":{}}}],["src/user/entities/userroute.entity",{"_index":2168,"title":{},"body":{"injectables/UserRepository.html":{}}}],["src/user/entities/userroute.entity.ts",{"_index":2184,"title":{},"body":{"entities/UserRoute.html":{},"coverage.html":{}}}],["src/user/entities/userroute.entity.ts:11",{"_index":2187,"title":{},"body":{"entities/UserRoute.html":{}}}],["src/user/entities/userroute.entity.ts:15",{"_index":2186,"title":{},"body":{"entities/UserRoute.html":{}}}],["src/user/entities/userroute.entity.ts:7",{"_index":2185,"title":{},"body":{"entities/UserRoute.html":{}}}],["src/user/entities/userstop.entity",{"_index":2167,"title":{},"body":{"injectables/UserRepository.html":{}}}],["src/user/entities/userstop.entity.ts",{"_index":2194,"title":{},"body":{"entities/UserStop.html":{},"coverage.html":{}}}],["src/user/entities/userstop.entity.ts:12",{"_index":2198,"title":{},"body":{"entities/UserStop.html":{}}}],["src/user/entities/userstop.entity.ts:16",{"_index":2197,"title":{},"body":{"entities/UserStop.html":{}}}],["src/user/entities/userstop.entity.ts:8",{"_index":2195,"title":{},"body":{"entities/UserStop.html":{}}}],["src/user/services/booking.service.ts",{"_index":322,"title":{},"body":{"injectables/BookingService.html":{},"coverage.html":{}}}],["src/user/services/booking.service.ts:10",{"_index":330,"title":{},"body":{"injectables/BookingService.html":{}}}],["src/user/services/booking.service.ts:18",{"_index":336,"title":{},"body":{"injectables/BookingService.html":{}}}],["src/user/services/booking.service.ts:22",{"_index":333,"title":{},"body":{"injectables/BookingService.html":{}}}],["src/user/services/booking.service.ts:28",{"_index":338,"title":{},"body":{"injectables/BookingService.html":{}}}],["src/user/services/booking.service.ts:55",{"_index":340,"title":{},"body":{"injectables/BookingService.html":{}}}],["src/user/services/saved.service.ts",{"_index":1663,"title":{},"body":{"injectables/SavedService.html":{},"coverage.html":{}}}],["src/user/services/saved.service.ts:11",{"_index":1684,"title":{},"body":{"injectables/SavedService.html":{}}}],["src/user/services/saved.service.ts:15",{"_index":1682,"title":{},"body":{"injectables/SavedService.html":{}}}],["src/user/services/saved.service.ts:19",{"_index":1672,"title":{},"body":{"injectables/SavedService.html":{}}}],["src/user/services/saved.service.ts:23",{"_index":1674,"title":{},"body":{"injectables/SavedService.html":{}}}],["src/user/services/saved.service.ts:27",{"_index":1680,"title":{},"body":{"injectables/SavedService.html":{}}}],["src/user/services/saved.service.ts:31",{"_index":1678,"title":{},"body":{"injectables/SavedService.html":{}}}],["src/user/services/saved.service.ts:35",{"_index":1676,"title":{},"body":{"injectables/SavedService.html":{}}}],["src/user/services/saved.service.ts:7",{"_index":1670,"title":{},"body":{"injectables/SavedService.html":{}}}],["src/user/services/user.service",{"_index":183,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{}}}],["src/user/services/user.service.ts",{"_index":2188,"title":{},"body":{"injectables/UserService.html":{},"coverage.html":{}}}],["src/user/services/user.service.ts:11",{"_index":2190,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/services/user.service.ts:15",{"_index":2191,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/services/user.service.ts:7",{"_index":2189,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.module",{"_index":184,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/user/user.module.ts",{"_index":2135,"title":{},"body":{"modules/UserModule.html":{}}}],["start",{"_index":248,"title":{},"body":{"entities/Booking.html":{},"classes/OTPParams.html":{},"injectables/OTPService.html":{},"classes/RouteRepository.html":{},"classes/SingleRouteStrategy.html":{},"interfaces/TripState.html":{},"index.html":{}}}],["start:dev",{"_index":2311,"title":{},"body":{"index.html":{}}}],["start:prodtest",{"_index":2313,"title":{},"body":{"index.html":{}}}],["startdate",{"_index":759,"title":{},"body":{"interfaces/FeedEntity.html":{},"interfaces/FeedEntity-1.html":{},"interfaces/FeedHeader.html":{},"interfaces/FeedHeader-1.html":{},"interfaces/FeedMessage.html":{},"interfaces/FeedMessage-1.html":{},"interfaces/Long.html":{},"interfaces/Position.html":{},"classes/PositionProto.html":{},"interfaces/StopTimeEvent.html":{},"interfaces/StopTimeUpdate.html":{},"classes/Trip-1.html":{},"interfaces/TripDescriptor.html":{},"interfaces/TripDescriptor-1.html":{},"interfaces/TripUpdate.html":{},"interfaces/VehicleDescriptor.html":{},"interfaces/VehiclePosition.html":{}}}],["started",{"_index":2291,"title":{"index.html":{}},"body":{}}],["starter",{"_index":2303,"title":{},"body":{"index.html":{}}}],["startindex",{"_index":1792,"title":{},"body":{"classes/SingleRouteStrategy.html":{}}}],["startstop",{"_index":249,"title":{},"body":{"entities/Booking.html":{},"injectables/BookingRepository.html":{}}}],["starttime",{"_index":788,"title":{},"body":{"interfaces/FeedEntity-1.html":{},"interfaces/FeedHeader-1.html":{},"interfaces/FeedMessage-1.html":{},"classes/Itinerary.html":{},"classes/Leg.html":{},"classes/Plan.html":{},"classes/Step.html":{},"interfaces/StopTimeEvent.html":{},"interfaces/StopTimeUpdate.html":{},"classes/Trip-1.html":{},"interfaces/TripDescriptor-1.html":{},"interfaces/TripUpdate.html":{},"classes/Vertex.html":{}}}],["state",{"_index":1360,"title":{},"body":{"injectables/OTPService.html":{}}}],["statements",{"_index":2213,"title":{},"body":{"coverage.html":{}}}],["status",{"_index":237,"title":{},"body":{"injectables/AuthService.html":{},"injectables/BookingService.html":{}}}],["stay",{"_index":2334,"title":{},"body":{"index.html":{}}}],["step",{"_index":888,"title":{"classes/Step.html":{}},"body":{"classes/Itinerary.html":{},"classes/Leg.html":{},"injectables/OTPService.html":{},"classes/OTPStrategy.html":{},"classes/Plan.html":{},"classes/Step.html":{},"classes/Vertex.html":{},"coverage.html":{}}}],["step(s",{"_index":1397,"title":{},"body":{"injectables/OTPService.html":{}}}],["step.absolutedirection",{"_index":904,"title":{},"body":{"classes/Itinerary.html":{},"classes/Leg.html":{},"classes/Plan.html":{},"classes/Step.html":{},"classes/Vertex.html":{}}}],["step.exit",{"_index":906,"title":{},"body":{"classes/Itinerary.html":{},"classes/Leg.html":{},"classes/Plan.html":{},"classes/Step.html":{},"classes/Vertex.html":{}}}],["step.lat",{"_index":910,"title":{},"body":{"classes/Itinerary.html":{},"classes/Leg.html":{},"classes/Plan.html":{},"classes/Step.html":{},"classes/Vertex.html":{}}}],["step.lon",{"_index":908,"title":{},"body":{"classes/Itinerary.html":{},"classes/Leg.html":{},"classes/Plan.html":{},"classes/Step.html":{},"classes/Vertex.html":{}}}],["step.relativedirection",{"_index":900,"title":{},"body":{"classes/Itinerary.html":{},"classes/Leg.html":{},"classes/Plan.html":{},"classes/Step.html":{},"classes/Vertex.html":{}}}],["step.streetname",{"_index":902,"title":{},"body":{"classes/Itinerary.html":{},"classes/Leg.html":{},"classes/Plan.html":{},"classes/Step.html":{},"classes/Vertex.html":{}}}],["steps",{"_index":935,"title":{},"body":{"classes/Itinerary.html":{},"classes/Leg.html":{},"injectables/OTPService.html":{},"classes/Plan.html":{},"classes/Step.html":{},"classes/Vertex.html":{}}}],["stop",{"_index":148,"title":{"entities/Stop.html":{}},"body":{"classes/ArrivalDto.html":{},"controllers/DBupdateController.html":{},"interfaces/FeedEntity-1.html":{},"interfaces/FeedHeader-1.html":{},"interfaces/FeedMessage-1.html":{},"entities/LiveData.html":{},"controllers/LiveUpdatesController.html":{},"injectables/LiveUpdatesService.html":{},"entities/Route.html":{},"classes/RouteDto.html":{},"classes/RouteInfoDto.html":{},"controllers/SavedController.html":{},"entities/Stop.html":{},"classes/StopRepository.html":{},"injectables/StopService.html":{},"interfaces/StopTimeEvent.html":{},"interfaces/StopTimeUpdate.html":{},"controllers/TransitController.html":{},"modules/TransitModule.html":{},"classes/Trip-1.html":{},"interfaces/TripDescriptor-1.html":{},"injectables/TripRepository.html":{},"interfaces/TripUpdate.html":{},"coverage.html":{}}}],["stop.code",{"_index":595,"title":{},"body":{"controllers/DBupdateController.html":{},"interfaces/FeedEntity-1.html":{},"interfaces/FeedHeader-1.html":{},"interfaces/FeedMessage-1.html":{},"interfaces/StopTimeEvent.html":{},"interfaces/StopTimeUpdate.html":{},"classes/Trip-1.html":{},"interfaces/TripDescriptor-1.html":{},"interfaces/TripUpdate.html":{}}}],["stop.entity",{"_index":1137,"title":{},"body":{"entities/LiveData.html":{},"entities/Route.html":{}}}],["stop.id",{"_index":597,"title":{},"body":{"controllers/DBupdateController.html":{}}}],["stop.latitude",{"_index":603,"title":{},"body":{"controllers/DBupdateController.html":{},"injectables/LiveUpdatesService.html":{}}}],["stop.linecodes",{"_index":607,"title":{},"body":{"controllers/DBupdateController.html":{}}}],["stop.longitude",{"_index":605,"title":{},"body":{"controllers/DBupdateController.html":{},"injectables/LiveUpdatesService.html":{}}}],["stop.name",{"_index":599,"title":{},"body":{"controllers/DBupdateController.html":{}}}],["stop.service",{"_index":733,"title":{},"body":{"injectables/DataService.html":{}}}],["stop_code",{"_index":2175,"title":{},"body":{"injectables/UserRepository.html":{},"entities/UserStop.html":{}}}],["stopcode",{"_index":820,"title":{},"body":{"interfaces/FeedEntity-1.html":{},"interfaces/FeedHeader-1.html":{},"interfaces/FeedMessage-1.html":{},"classes/Itinerary.html":{},"classes/Leg.html":{},"entities/LiveData.html":{},"injectables/LiveUpdatesService.html":{},"entities/NewSchedule.html":{},"classes/Plan.html":{},"entities/Route.html":{},"classes/RouteRepository.html":{},"injectables/RouteService.html":{},"entities/RouteStop.html":{},"entities/Schedule.html":{},"classes/ScheduleRepository.html":{},"injectables/ScheduleService.html":{},"classes/Step.html":{},"interfaces/StopTimeEvent.html":{},"interfaces/StopTimeUpdate.html":{},"entities/Trip.html":{},"classes/Trip-1.html":{},"interfaces/TripDescriptor-1.html":{},"injectables/TripRepository.html":{},"injectables/TripService.html":{},"interfaces/TripUpdate.html":{},"classes/Vertex.html":{}}}],["stopcodes",{"_index":250,"title":{},"body":{"entities/Booking.html":{},"controllers/DBupdateController.html":{},"injectables/OTPService.html":{},"entities/Route.html":{},"classes/RouteRepository.html":{},"injectables/TripRepository.html":{},"injectables/TripService.html":{}}}],["stopcodes.push(leg.from.stopcode",{"_index":1404,"title":{},"body":{"injectables/OTPService.html":{}}}],["stopcodes.push(stop.code",{"_index":628,"title":{},"body":{"controllers/DBupdateController.html":{}}}],["stopdto",{"_index":1812,"title":{"classes/StopDto.html":{}},"body":{"classes/StopDto.html":{},"coverage.html":{}}}],["stopid",{"_index":771,"title":{},"body":{"interfaces/FeedEntity.html":{},"interfaces/FeedEntity-1.html":{},"interfaces/FeedHeader.html":{},"interfaces/FeedHeader-1.html":{},"interfaces/FeedMessage.html":{},"interfaces/FeedMessage-1.html":{},"classes/Itinerary.html":{},"classes/Leg.html":{},"interfaces/Long.html":{},"classes/Plan.html":{},"interfaces/Position.html":{},"classes/PositionProto.html":{},"classes/Step.html":{},"interfaces/StopTimeEvent.html":{},"interfaces/StopTimeUpdate.html":{},"classes/Trip-1.html":{},"interfaces/TripDescriptor.html":{},"interfaces/TripDescriptor-1.html":{},"interfaces/TripUpdate.html":{},"interfaces/VehicleDescriptor.html":{},"interfaces/VehiclePosition.html":{},"classes/Vertex.html":{}}}],["stopindex",{"_index":913,"title":{},"body":{"classes/Itinerary.html":{},"classes/Leg.html":{},"classes/Plan.html":{},"classes/Step.html":{},"classes/Vertex.html":{}}}],["stoplat",{"_index":1115,"title":{},"body":{"entities/LiveData.html":{}}}],["stoplng",{"_index":1116,"title":{},"body":{"entities/LiveData.html":{}}}],["stoprepo",{"_index":1828,"title":{},"body":{"classes/StopRepository.html":{}}}],["stoprepository",{"_index":1821,"title":{"classes/StopRepository.html":{}},"body":{"classes/StopRepository.html":{},"injectables/StopService.html":{},"modules/TransitModule.html":{},"coverage.html":{}}}],["stops",{"_index":491,"title":{},"body":{"injectables/DBUpdateService.html":{},"controllers/DBupdateController.html":{},"injectables/DataService.html":{},"interfaces/FeedEntity-1.html":{},"interfaces/FeedHeader-1.html":{},"interfaces/FeedMessage-1.html":{},"classes/Itinerary.html":{},"classes/Leg.html":{},"controllers/LiveUpdatesController.html":{},"injectables/OTPService.html":{},"classes/Plan.html":{},"entities/Route.html":{},"classes/RouteDto.html":{},"classes/RouteInfoDto.html":{},"injectables/SavedService.html":{},"classes/SingleRouteStrategy.html":{},"classes/Step.html":{},"classes/StopRepository.html":{},"injectables/StopService.html":{},"interfaces/StopTimeEvent.html":{},"interfaces/StopTimeUpdate.html":{},"classes/Trip-1.html":{},"interfaces/TripDescriptor-1.html":{},"interfaces/TripUpdate.html":{},"injectables/TripUpdatesListener.html":{},"classes/Vertex.html":{}}}],["stops.findindex((v",{"_index":1793,"title":{},"body":{"classes/SingleRouteStrategy.html":{}}}],["stops.indexof(booking.endstop",{"_index":2091,"title":{},"body":{"injectables/TripUpdatesListener.html":{}}}],["stops.indexof(booking.startstop",{"_index":2090,"title":{},"body":{"injectables/TripUpdatesListener.html":{}}}],["stops.map(stop",{"_index":1190,"title":{},"body":{"controllers/LiveUpdatesController.html":{}}}],["stops.push(new",{"_index":1400,"title":{},"body":{"injectables/OTPService.html":{}}}],["stops.push(newstop",{"_index":608,"title":{},"body":{"controllers/DBupdateController.html":{}}}],["stops.splice(s",{"_index":2092,"title":{},"body":{"injectables/TripUpdatesListener.html":{}}}],["stops/live",{"_index":811,"title":{},"body":{"interfaces/FeedEntity-1.html":{},"interfaces/FeedHeader-1.html":{},"interfaces/FeedMessage-1.html":{},"injectables/LiveUpdatesService.html":{},"interfaces/StopTimeEvent.html":{},"interfaces/StopTimeUpdate.html":{},"classes/Trip-1.html":{},"interfaces/TripDescriptor-1.html":{},"interfaces/TripUpdate.html":{}}}],["stopsequence",{"_index":786,"title":{},"body":{"interfaces/FeedEntity-1.html":{},"interfaces/FeedHeader-1.html":{},"interfaces/FeedMessage-1.html":{},"classes/Itinerary.html":{},"classes/Leg.html":{},"classes/Plan.html":{},"classes/Step.html":{},"interfaces/StopTimeEvent.html":{},"interfaces/StopTimeUpdate.html":{},"classes/Trip-1.html":{},"interfaces/TripDescriptor-1.html":{},"interfaces/TripUpdate.html":{},"classes/Vertex.html":{}}}],["stopservice",{"_index":702,"title":{"injectables/StopService.html":{}},"body":{"injectables/DataService.html":{},"injectables/StopService.html":{},"modules/TransitModule.html":{},"coverage.html":{},"overview.html":{}}}],["stopsservice",{"_index":701,"title":{},"body":{"injectables/DataService.html":{}}}],["stoptimeevent",{"_index":782,"title":{"interfaces/StopTimeEvent.html":{}},"body":{"interfaces/FeedEntity-1.html":{},"interfaces/FeedHeader-1.html":{},"interfaces/FeedMessage-1.html":{},"interfaces/StopTimeEvent.html":{},"interfaces/StopTimeUpdate.html":{},"classes/Trip-1.html":{},"interfaces/TripDescriptor-1.html":{},"interfaces/TripUpdate.html":{},"coverage.html":{}}}],["stoptimeupdate",{"_index":785,"title":{"interfaces/StopTimeUpdate.html":{}},"body":{"interfaces/FeedEntity-1.html":{},"interfaces/FeedHeader-1.html":{},"interfaces/FeedMessage-1.html":{},"interfaces/StopTimeEvent.html":{},"interfaces/StopTimeUpdate.html":{},"classes/Trip-1.html":{},"interfaces/TripDescriptor-1.html":{},"interfaces/TripUpdate.html":{},"coverage.html":{}}}],["strategy",{"_index":417,"title":{},"body":{"classes/Context.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["streetname",{"_index":891,"title":{},"body":{"classes/Itinerary.html":{},"classes/Leg.html":{},"classes/Plan.html":{},"classes/Step.html":{},"classes/Vertex.html":{}}}],["string",{"_index":141,"title":{},"body":{"classes/ArrivalDto.html":{},"injectables/AuthService.html":{},"entities/Booking.html":{},"injectables/BookingRepository.html":{},"injectables/BookingService.html":{},"classes/CreateUserDto.html":{},"injectables/DBUpdateService.html":{},"controllers/DBupdateController.html":{},"interfaces/FeedEntity.html":{},"interfaces/FeedEntity-1.html":{},"interfaces/FeedHeader.html":{},"interfaces/FeedHeader-1.html":{},"interfaces/FeedMessage.html":{},"interfaces/FeedMessage-1.html":{},"classes/Itinerary.html":{},"classes/Leg.html":{},"entities/Line.html":{},"classes/LineDto.html":{},"entities/LiveData.html":{},"controllers/LiveUpdatesController.html":{},"injectables/LiveUpdatesService.html":{},"injectables/LocalStrategy.html":{},"interfaces/Long.html":{},"entities/NewSchedule.html":{},"classes/OTPParams.html":{},"injectables/OTPService.html":{},"classes/Plan.html":{},"entities/Point.html":{},"classes/PointDto.html":{},"classes/PointRepository.html":{},"injectables/PointService.html":{},"interfaces/Position.html":{},"classes/PositionProto.html":{},"entities/Route.html":{},"classes/RouteDto.html":{},"classes/RouteInfoDto.html":{},"classes/RouteRepository.html":{},"injectables/RouteService.html":{},"entities/RouteStop.html":{},"controllers/SavedController.html":{},"injectables/SavedService.html":{},"entities/Schedule.html":{},"classes/ScheduleDayDto.html":{},"classes/ScheduleDetailsDto.html":{},"classes/ScheduleDto.html":{},"classes/ScheduleRepository.html":{},"injectables/ScheduleService.html":{},"classes/SingleRouteStrategy.html":{},"classes/Step.html":{},"entities/Stop.html":{},"classes/StopDto.html":{},"classes/StopRepository.html":{},"injectables/StopService.html":{},"interfaces/StopTimeEvent.html":{},"interfaces/StopTimeUpdate.html":{},"controllers/TransitController.html":{},"entities/Trip.html":{},"classes/Trip-1.html":{},"interfaces/TripDescriptor.html":{},"interfaces/TripDescriptor-1.html":{},"injectables/TripRepository.html":{},"injectables/TripService.html":{},"interfaces/TripState.html":{},"interfaces/TripUpdate.html":{},"injectables/TripUpdatesListener.html":{},"entities/User.html":{},"injectables/UserRepository.html":{},"entities/UserRoute.html":{},"injectables/UserService.html":{},"entities/UserStop.html":{},"interfaces/VehicleDescriptor.html":{},"interfaces/VehiclePosition.html":{},"classes/Vertex.html":{}}}],["subscribemessage",{"_index":1942,"title":{},"body":{"classes/TransitGateWay.html":{}}}],["super",{"_index":1023,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["super(bookingrepo",{"_index":314,"title":{},"body":{"injectables/BookingRepository.html":{}}}],["super(linerepo",{"_index":1103,"title":{},"body":{"injectables/LineRepository.html":{}}}],["super(pointrepo",{"_index":1466,"title":{},"body":{"classes/PointRepository.html":{}}}],["super(repo",{"_index":1143,"title":{},"body":{"injectables/LiveDataRepository.html":{}}}],["super(routerepo",{"_index":1541,"title":{},"body":{"classes/RouteRepository.html":{}}}],["super(rsrepo",{"_index":1603,"title":{},"body":{"classes/RouteStopRepository.html":{}}}],["super(schedulerepo",{"_index":1757,"title":{},"body":{"classes/ScheduleRepository.html":{}}}],["super(stoprepo",{"_index":1841,"title":{},"body":{"classes/StopRepository.html":{}}}],["super(triprepo",{"_index":2036,"title":{},"body":{"injectables/TripRepository.html":{}}}],["super(userrepo",{"_index":2170,"title":{},"body":{"injectables/UserRepository.html":{}}}],["super.deleteone({trip_id",{"_index":319,"title":{},"body":{"injectables/BookingRepository.html":{}}}],["super.get(spec",{"_index":1542,"title":{},"body":{"classes/RouteRepository.html":{},"classes/StopRepository.html":{}}}],["super.get({routecode",{"_index":1467,"title":{},"body":{"classes/PointRepository.html":{},"classes/ScheduleRepository.html":{}}}],["super.get({user_id",{"_index":316,"title":{},"body":{"injectables/BookingRepository.html":{}}}],["super.getall",{"_index":1104,"title":{},"body":{"injectables/LineRepository.html":{},"classes/PointRepository.html":{},"classes/RouteRepository.html":{},"classes/ScheduleRepository.html":{},"classes/StopRepository.html":{}}}],["super.getone(spec",{"_index":1843,"title":{},"body":{"classes/StopRepository.html":{}}}],["super.getone({email",{"_index":2171,"title":{},"body":{"injectables/UserRepository.html":{}}}],["super.getone({trip_id",{"_index":317,"title":{},"body":{"injectables/BookingRepository.html":{},"injectables/TripRepository.html":{}}}],["super.insert(data",{"_index":320,"title":{},"body":{"injectables/BookingRepository.html":{},"injectables/LiveDataRepository.html":{},"classes/PointRepository.html":{},"classes/RouteStopRepository.html":{},"classes/ScheduleRepository.html":{},"injectables/TripRepository.html":{}}}],["super.insert(lines",{"_index":1105,"title":{},"body":{"injectables/LineRepository.html":{}}}],["super.insert(routes",{"_index":1543,"title":{},"body":{"classes/RouteRepository.html":{}}}],["super.insert(stops",{"_index":1842,"title":{},"body":{"classes/StopRepository.html":{}}}],["super.insertone(booking",{"_index":318,"title":{},"body":{"injectables/BookingRepository.html":{}}}],["super.insertone(data",{"_index":2172,"title":{},"body":{"injectables/UserRepository.html":{}}}],["super.updateone(spec",{"_index":2037,"title":{},"body":{"injectables/TripRepository.html":{}}}],["super.updateone({code",{"_index":1544,"title":{},"body":{"classes/RouteRepository.html":{},"classes/StopRepository.html":{}}}],["support",{"_index":2326,"title":{},"body":{"index.html":{},"modules.html":{}}}],["svg",{"_index":2345,"title":{},"body":{"modules.html":{}}}],["synchronize",{"_index":2373,"title":{},"body":{"miscellaneous/variables.html":{}}}],["t",{"_index":650,"title":{},"body":{"controllers/DBupdateController.html":{},"classes/IGenericRepository.html":{},"injectables/LineRepository.html":{},"injectables/LiveDataRepository.html":{},"classes/PointRepository.html":{},"classes/RouteRepository.html":{},"classes/RouteStopRepository.html":{},"classes/ScheduleRepository.html":{},"classes/StopRepository.html":{},"injectables/TripRepository.html":{},"injectables/UserRepository.html":{}}}],["t.\"day\"=${day",{"_index":2047,"title":{},"body":{"injectables/TripRepository.html":{}}}],["t.\"routecode\"='${routecode",{"_index":2048,"title":{},"body":{"injectables/TripRepository.html":{}}}],["t.\"stopcode\"='${stopcode",{"_index":2049,"title":{},"body":{"injectables/TripRepository.html":{}}}],["t.stopcode",{"_index":2089,"title":{},"body":{"injectables/TripUpdatesListener.html":{}}}],["t.trip_id",{"_index":1414,"title":{},"body":{"injectables/OTPService.html":{}}}],["table",{"_index":2242,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":2241,"title":{},"body":{"coverage.html":{}}}],["test",{"_index":2223,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["test:covsupport",{"_index":2318,"title":{},"body":{"index.html":{}}}],["test:e2e",{"_index":2317,"title":{},"body":{"index.html":{}}}],["tests",{"_index":2315,"title":{},"body":{"index.html":{}}}],["thanks",{"_index":2324,"title":{},"body":{"index.html":{}}}],["this.absolutedirection",{"_index":903,"title":{},"body":{"classes/Itinerary.html":{},"classes/Leg.html":{},"classes/Plan.html":{},"classes/Step.html":{},"classes/Vertex.html":{}}}],["this.agencyname",{"_index":957,"title":{},"body":{"classes/Itinerary.html":{},"classes/Leg.html":{},"classes/Plan.html":{},"classes/Step.html":{},"classes/Vertex.html":{}}}],["this.agencytimezoneoffset",{"_index":959,"title":{},"body":{"classes/Itinerary.html":{},"classes/Leg.html":{},"classes/Plan.html":{},"classes/Step.html":{},"classes/Vertex.html":{}}}],["this.apidateformat(init.date",{"_index":1317,"title":{},"body":{"classes/OTPParams.html":{},"interfaces/TripState.html":{}}}],["this.arrival",{"_index":790,"title":{},"body":{"interfaces/FeedEntity-1.html":{},"interfaces/FeedHeader-1.html":{},"interfaces/FeedMessage-1.html":{},"classes/Itinerary.html":{},"classes/Leg.html":{},"classes/Plan.html":{},"classes/Step.html":{},"interfaces/StopTimeEvent.html":{},"interfaces/StopTimeUpdate.html":{},"classes/Trip-1.html":{},"interfaces/TripDescriptor-1.html":{},"interfaces/TripUpdate.html":{},"classes/Vertex.html":{}}}],["this.arrivaldelay",{"_index":966,"title":{},"body":{"classes/Itinerary.html":{},"classes/Leg.html":{},"classes/Plan.html":{},"classes/Step.html":{},"classes/Vertex.html":{}}}],["this.arrivalmins",{"_index":166,"title":{},"body":{"classes/ArrivalDto.html":{}}}],["this.arrivalseconds",{"_index":168,"title":{},"body":{"classes/ArrivalDto.html":{}}}],["this.arriveby",{"_index":1322,"title":{},"body":{"classes/OTPParams.html":{},"interfaces/TripState.html":{}}}],["this.auth.createuser(data",{"_index":2130,"title":{},"body":{"controllers/UserController.html":{}}}],["this.auth.finduserbyemail(data.email",{"_index":2129,"title":{},"body":{"controllers/UserController.html":{}}}],["this.auth.login(data",{"_index":66,"title":{},"body":{"controllers/AppController.html":{},"controllers/UserController.html":{}}}],["this.auth.login(req.user",{"_index":72,"title":{},"body":{"controllers/AppController.html":{},"controllers/UserController.html":{}}}],["this.auth.throwerror('email",{"_index":62,"title":{},"body":{"controllers/AppController.html":{},"controllers/UserController.html":{}}}],["this.authservice.validateuser(email",{"_index":1243,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["this.bookings",{"_index":2109,"title":{},"body":{"classes/UpdateTrips.html":{}}}],["this.bookings.deletebooking(req.body",{"_index":407,"title":{},"body":{"controllers/BookingsController.html":{}}}],["this.bookings.getbookings(req.user.email",{"_index":410,"title":{},"body":{"controllers/BookingsController.html":{}}}],["this.bookings.insertbooking(req.body",{"_index":404,"title":{},"body":{"controllers/BookingsController.html":{}}}],["this.code",{"_index":1514,"title":{},"body":{"classes/RouteDto.html":{},"classes/RouteInfoDto.html":{}}}],["this.data",{"_index":355,"title":{},"body":{"injectables/BookingService.html":{},"interfaces/FeedEntity-1.html":{},"interfaces/FeedHeader-1.html":{},"interfaces/FeedMessage-1.html":{},"interfaces/StopTimeEvent.html":{},"interfaces/StopTimeUpdate.html":{},"classes/Trip-1.html":{},"interfaces/TripDescriptor-1.html":{},"interfaces/TripUpdate.html":{},"classes/UpdateTrips.html":{}}}],["this.data.lines.getlines",{"_index":803,"title":{},"body":{"interfaces/FeedEntity-1.html":{},"interfaces/FeedHeader-1.html":{},"interfaces/FeedMessage-1.html":{},"interfaces/StopTimeEvent.html":{},"interfaces/StopTimeUpdate.html":{},"controllers/TransitController.html":{},"classes/Trip-1.html":{},"interfaces/TripDescriptor-1.html":{},"interfaces/TripUpdate.html":{}}}],["this.data.lines.getlines()).map(line",{"_index":1184,"title":{},"body":{"controllers/LiveUpdatesController.html":{}}}],["this.data.lines.insert(lines",{"_index":573,"title":{},"body":{"controllers/DBupdateController.html":{}}}],["this.data.live.insert(livedata",{"_index":1195,"title":{},"body":{"controllers/LiveUpdatesController.html":{}}}],["this.data.ns.getall",{"_index":681,"title":{},"body":{"controllers/DBupdateController.html":{}}}],["this.data.otp.getbookingplan(req.body.data",{"_index":413,"title":{},"body":{"controllers/BookingsController.html":{}}}],["this.data.otp.getbus(s",{"_index":1223,"title":{},"body":{"injectables/LiveUpdatesService.html":{}}}],["this.data.otp.getplan(data.data",{"_index":1921,"title":{},"body":{"controllers/TransitController.html":{}}}],["this.data.points.getroutepoints(code",{"_index":1912,"title":{},"body":{"controllers/TransitController.html":{}}}],["this.data.points.insert(points",{"_index":619,"title":{},"body":{"controllers/DBupdateController.html":{}}}],["this.data.routes.getlineroutes(id",{"_index":1907,"title":{},"body":{"controllers/TransitController.html":{}}}],["this.data.routes.getroutes",{"_index":611,"title":{},"body":{"controllers/DBupdateController.html":{}}}],["this.data.routes.getsaved(user",{"_index":1694,"title":{},"body":{"injectables/SavedService.html":{}}}],["this.data.routes.getstoproutes(code",{"_index":1924,"title":{},"body":{"controllers/TransitController.html":{}}}],["this.data.routes.insert(routes",{"_index":590,"title":{},"body":{"controllers/DBupdateController.html":{}}}],["this.data.routes.insertstopcodes(stopcodes",{"_index":629,"title":{},"body":{"controllers/DBupdateController.html":{}}}],["this.data.rs.insert(rss",{"_index":630,"title":{},"body":{"controllers/DBupdateController.html":{}}}],["this.data.schedule.getall",{"_index":664,"title":{},"body":{"controllers/DBupdateController.html":{}}}],["this.data.schedule.getids",{"_index":644,"title":{},"body":{"controllers/DBupdateController.html":{}}}],["this.data.schedule.getrouteschedules(code",{"_index":1917,"title":{},"body":{"controllers/TransitController.html":{}}}],["this.data.schedule.gettripone(+id.trip_id",{"_index":647,"title":{},"body":{"controllers/DBupdateController.html":{}}}],["this.data.schedule.gettrips(data.routecode",{"_index":813,"title":{},"body":{"interfaces/FeedEntity-1.html":{},"interfaces/FeedHeader-1.html":{},"interfaces/FeedMessage-1.html":{},"interfaces/StopTimeEvent.html":{},"interfaces/StopTimeUpdate.html":{},"classes/Trip-1.html":{},"interfaces/TripDescriptor-1.html":{},"interfaces/TripUpdate.html":{}}}],["this.data.schedule.gettrips(e.routecode",{"_index":818,"title":{},"body":{"interfaces/FeedEntity-1.html":{},"interfaces/FeedHeader-1.html":{},"interfaces/FeedMessage-1.html":{},"interfaces/StopTimeEvent.html":{},"interfaces/StopTimeUpdate.html":{},"classes/Trip-1.html":{},"interfaces/TripDescriptor-1.html":{},"interfaces/TripUpdate.html":{}}}],["this.data.schedule.inserttrips(schedules",{"_index":682,"title":{},"body":{"controllers/DBupdateController.html":{}}}],["this.data.schedule.inserttrips(trips",{"_index":643,"title":{},"body":{"controllers/DBupdateController.html":{}}}],["this.data.stops.getone(stopcode",{"_index":1211,"title":{},"body":{"injectables/LiveUpdatesService.html":{}}}],["this.data.stops.getroutestops(bus.routecode",{"_index":1188,"title":{},"body":{"controllers/LiveUpdatesController.html":{}}}],["this.data.stops.getroutestops(code",{"_index":1911,"title":{},"body":{"controllers/TransitController.html":{}}}],["this.data.stops.getroutestops(e.routecode",{"_index":808,"title":{},"body":{"interfaces/FeedEntity-1.html":{},"interfaces/FeedHeader-1.html":{},"interfaces/FeedMessage-1.html":{},"interfaces/StopTimeEvent.html":{},"interfaces/StopTimeUpdate.html":{},"classes/Trip-1.html":{},"interfaces/TripDescriptor-1.html":{},"interfaces/TripUpdate.html":{}}}],["this.data.stops.getroutestops(trip[0].routecode",{"_index":648,"title":{},"body":{"controllers/DBupdateController.html":{}}}],["this.data.stops.getsaved(user",{"_index":1695,"title":{},"body":{"injectables/SavedService.html":{}}}],["this.data.stops.getstops",{"_index":1904,"title":{},"body":{"controllers/TransitController.html":{}}}],["this.data.stops.insert(stops",{"_index":609,"title":{},"body":{"controllers/DBupdateController.html":{}}}],["this.data.trips.getoccupation(ids",{"_index":367,"title":{},"body":{"injectables/BookingService.html":{}}}],["this.data.trips.inserttrips(trips",{"_index":680,"title":{},"body":{"controllers/DBupdateController.html":{}}}],["this.date",{"_index":1003,"title":{},"body":{"classes/Itinerary.html":{},"classes/Leg.html":{},"classes/OTPParams.html":{},"classes/Plan.html":{},"classes/Step.html":{},"interfaces/TripState.html":{},"classes/Vertex.html":{}}}],["this.db.getlines",{"_index":556,"title":{},"body":{"controllers/DBupdateController.html":{}}}],["this.db.getrepository(userroute",{"_index":2178,"title":{},"body":{"injectables/UserRepository.html":{}}}],["this.db.getrepository(userstop",{"_index":2173,"title":{},"body":{"injectables/UserRepository.html":{}}}],["this.db.getrouteinfo(route.code",{"_index":621,"title":{},"body":{"controllers/DBupdateController.html":{}}}],["this.db.getroutepoints(route.code",{"_index":613,"title":{},"body":{"controllers/DBupdateController.html":{}}}],["this.db.getroutes",{"_index":576,"title":{},"body":{"controllers/DBupdateController.html":{}}}],["this.db.getroutetrips(route.code",{"_index":633,"title":{},"body":{"controllers/DBupdateController.html":{}}}],["this.db.getstops",{"_index":592,"title":{},"body":{"controllers/DBupdateController.html":{}}}],["this.db.query",{"_index":1545,"title":{},"body":{"classes/RouteRepository.html":{},"classes/ScheduleRepository.html":{},"classes/StopRepository.html":{},"injectables/TripRepository.html":{}}}],["this.departure",{"_index":791,"title":{},"body":{"interfaces/FeedEntity-1.html":{},"interfaces/FeedHeader-1.html":{},"interfaces/FeedMessage-1.html":{},"classes/Itinerary.html":{},"classes/Leg.html":{},"classes/Plan.html":{},"classes/Step.html":{},"interfaces/StopTimeEvent.html":{},"interfaces/StopTimeUpdate.html":{},"classes/Trip-1.html":{},"interfaces/TripDescriptor-1.html":{},"interfaces/TripUpdate.html":{},"classes/Vertex.html":{}}}],["this.departuredelay",{"_index":973,"title":{},"body":{"classes/Itinerary.html":{},"classes/Leg.html":{},"classes/Plan.html":{},"classes/Step.html":{},"classes/Vertex.html":{}}}],["this.departuremins",{"_index":150,"title":{},"body":{"classes/ArrivalDto.html":{}}}],["this.departureseconds",{"_index":152,"title":{},"body":{"classes/ArrivalDto.html":{}}}],["this.distance",{"_index":897,"title":{},"body":{"classes/Itinerary.html":{},"classes/Leg.html":{},"classes/Plan.html":{},"classes/Step.html":{},"classes/Vertex.html":{}}}],["this.duration",{"_index":945,"title":{},"body":{"classes/Itinerary.html":{},"classes/Leg.html":{},"classes/Plan.html":{},"classes/Step.html":{},"classes/Vertex.html":{}}}],["this.edit(+it.endtime",{"_index":994,"title":{},"body":{"classes/Itinerary.html":{},"classes/Leg.html":{},"classes/Plan.html":{},"classes/Step.html":{},"classes/Vertex.html":{}}}],["this.edit(+it.starttime",{"_index":993,"title":{},"body":{"classes/Itinerary.html":{},"classes/Leg.html":{},"classes/Plan.html":{},"classes/Step.html":{},"classes/Vertex.html":{}}}],["this.edit(+leg.endtime",{"_index":964,"title":{},"body":{"classes/Itinerary.html":{},"classes/Leg.html":{},"classes/Plan.html":{},"classes/Step.html":{},"classes/Vertex.html":{}}}],["this.edit(+leg.starttime",{"_index":962,"title":{},"body":{"classes/Itinerary.html":{},"classes/Leg.html":{},"classes/Plan.html":{},"classes/Step.html":{},"classes/Vertex.html":{}}}],["this.edit(+v.arrival",{"_index":928,"title":{},"body":{"classes/Itinerary.html":{},"classes/Leg.html":{},"classes/Plan.html":{},"classes/Step.html":{},"classes/Vertex.html":{}}}],["this.edit(+v.departure",{"_index":929,"title":{},"body":{"classes/Itinerary.html":{},"classes/Leg.html":{},"classes/Plan.html":{},"classes/Step.html":{},"classes/Vertex.html":{}}}],["this.endtime",{"_index":963,"title":{},"body":{"classes/Itinerary.html":{},"classes/Leg.html":{},"classes/Plan.html":{},"classes/Step.html":{},"classes/Vertex.html":{}}}],["this.entity",{"_index":797,"title":{},"body":{"interfaces/FeedEntity-1.html":{},"interfaces/FeedHeader-1.html":{},"interfaces/FeedMessage-1.html":{},"interfaces/StopTimeEvent.html":{},"interfaces/StopTimeUpdate.html":{},"classes/Trip-1.html":{},"interfaces/TripDescriptor-1.html":{},"interfaces/TripUpdate.html":{}}}],["this.entityrepository",{"_index":846,"title":{},"body":{"classes/IGenericRepository.html":{},"injectables/TripRepository.html":{}}}],["this.entityrepository.save(data",{"_index":852,"title":{},"body":{"classes/IGenericRepository.html":{}}}],["this.eventemitter.emit('booking.deleted",{"_index":353,"title":{},"body":{"injectables/BookingService.html":{}}}],["this.eventemitter.emit('trips.update",{"_index":375,"title":{},"body":{"injectables/BookingService.html":{}}}],["this.exit",{"_index":905,"title":{},"body":{"classes/Itinerary.html":{},"classes/Leg.html":{},"classes/Plan.html":{},"classes/Step.html":{},"classes/Vertex.html":{}}}],["this.finduserbyemail(email",{"_index":224,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.flex",{"_index":983,"title":{},"body":{"classes/Itinerary.html":{},"classes/Leg.html":{},"classes/Plan.html":{},"classes/Step.html":{},"classes/Vertex.html":{}}}],["this.from",{"_index":971,"title":{},"body":{"classes/Itinerary.html":{},"classes/Leg.html":{},"classes/Plan.html":{},"classes/Step.html":{},"classes/Vertex.html":{}}}],["this.fromplace",{"_index":1313,"title":{},"body":{"classes/OTPParams.html":{},"interfaces/TripState.html":{}}}],["this.getlinebuses(line",{"_index":1186,"title":{},"body":{"controllers/LiveUpdatesController.html":{}}}],["this.getlivedata(stopcode",{"_index":1210,"title":{},"body":{"injectables/LiveUpdatesService.html":{}}}],["this.gettrips(booking.slug",{"_index":1374,"title":{},"body":{"injectables/OTPService.html":{}}}],["this.gettrips(querystring",{"_index":1391,"title":{},"body":{"injectables/OTPService.html":{}}}],["this.header",{"_index":796,"title":{},"body":{"interfaces/FeedEntity-1.html":{},"interfaces/FeedHeader-1.html":{},"interfaces/FeedMessage-1.html":{},"interfaces/StopTimeEvent.html":{},"interfaces/StopTimeUpdate.html":{},"classes/Trip-1.html":{},"interfaces/TripDescriptor-1.html":{},"interfaces/TripUpdate.html":{}}}],["this.http",{"_index":435,"title":{},"body":{"classes/Context.html":{}}}],["this.intermediatestops",{"_index":975,"title":{},"body":{"classes/Itinerary.html":{},"classes/Leg.html":{},"classes/Plan.html":{},"classes/Step.html":{},"classes/Vertex.html":{}}}],["this.io.updateoccupancy(event.getvalue",{"_index":2093,"title":{},"body":{"injectables/TripUpdatesListener.html":{}}}],["this.itineraries",{"_index":1007,"title":{},"body":{"classes/Itinerary.html":{},"classes/Leg.html":{},"classes/Plan.html":{},"classes/Step.html":{},"classes/Vertex.html":{}}}],["this.jwtservice.sign(payload",{"_index":234,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.lat",{"_index":909,"title":{},"body":{"classes/Itinerary.html":{},"classes/Leg.html":{},"classes/Plan.html":{},"classes/Step.html":{},"classes/Vertex.html":{}}}],["this.latitude",{"_index":162,"title":{},"body":{"classes/ArrivalDto.html":{}}}],["this.legs",{"_index":992,"title":{},"body":{"classes/Itinerary.html":{},"classes/Leg.html":{},"classes/Plan.html":{},"classes/Step.html":{},"classes/Vertex.html":{}}}],["this.linecode",{"_index":160,"title":{},"body":{"classes/ArrivalDto.html":{}}}],["this.linesservice",{"_index":739,"title":{},"body":{"injectables/DataService.html":{}}}],["this.live",{"_index":799,"title":{},"body":{"interfaces/FeedEntity-1.html":{},"interfaces/FeedHeader-1.html":{},"interfaces/FeedMessage-1.html":{},"interfaces/StopTimeEvent.html":{},"interfaces/StopTimeUpdate.html":{},"classes/Trip-1.html":{},"interfaces/TripDescriptor-1.html":{},"interfaces/TripUpdate.html":{}}}],["this.live.getlivedata(line.name",{"_index":804,"title":{},"body":{"interfaces/FeedEntity-1.html":{},"interfaces/FeedHeader-1.html":{},"interfaces/FeedMessage-1.html":{},"interfaces/StopTimeEvent.html":{},"interfaces/StopTimeUpdate.html":{},"classes/Trip-1.html":{},"interfaces/TripDescriptor-1.html":{},"interfaces/TripUpdate.html":{}}}],["this.live.getlivedata(stop.code",{"_index":810,"title":{},"body":{"interfaces/FeedEntity-1.html":{},"interfaces/FeedHeader-1.html":{},"interfaces/FeedMessage-1.html":{},"interfaces/StopTimeEvent.html":{},"interfaces/StopTimeUpdate.html":{},"classes/Trip-1.html":{},"interfaces/TripDescriptor-1.html":{},"interfaces/TripUpdate.html":{}}}],["this.liveservice.getlivedata(code",{"_index":1176,"title":{},"body":{"controllers/LiveUpdatesController.html":{}}}],["this.liveservice.livedatabuilder(code",{"_index":1172,"title":{},"body":{"controllers/LiveUpdatesController.html":{}}}],["this.liveservice.livedatabuilder(stop.code",{"_index":1191,"title":{},"body":{"controllers/LiveUpdatesController.html":{}}}],["this.lon",{"_index":907,"title":{},"body":{"classes/Itinerary.html":{},"classes/Leg.html":{},"classes/Plan.html":{},"classes/Step.html":{},"classes/Vertex.html":{}}}],["this.longitude",{"_index":164,"title":{},"body":{"classes/ArrivalDto.html":{}}}],["this.message",{"_index":801,"title":{},"body":{"interfaces/FeedEntity-1.html":{},"interfaces/FeedHeader-1.html":{},"interfaces/FeedMessage-1.html":{},"interfaces/StopTimeEvent.html":{},"interfaces/StopTimeUpdate.html":{},"classes/Trip-1.html":{},"interfaces/TripDescriptor-1.html":{},"interfaces/TripUpdate.html":{}}}],["this.mode",{"_index":949,"title":{},"body":{"classes/Itinerary.html":{},"classes/Leg.html":{},"classes/Plan.html":{},"classes/Step.html":{},"classes/Vertex.html":{}}}],["this.name",{"_index":915,"title":{},"body":{"classes/Itinerary.html":{},"classes/Leg.html":{},"classes/Plan.html":{},"classes/Step.html":{},"classes/Vertex.html":{}}}],["this.otpservice",{"_index":745,"title":{},"body":{"injectables/DataService.html":{}}}],["this.planbuilder(plan",{"_index":1377,"title":{},"body":{"injectables/OTPService.html":{}}}],["this.points",{"_index":943,"title":{},"body":{"classes/Itinerary.html":{},"classes/Leg.html":{},"classes/Plan.html":{},"classes/RouteDto.html":{},"classes/RouteInfoDto.html":{},"classes/Step.html":{},"classes/Vertex.html":{}}}],["this.pointservice",{"_index":743,"title":{},"body":{"injectables/DataService.html":{}}}],["this.relativedirection",{"_index":899,"title":{},"body":{"classes/Itinerary.html":{},"classes/Leg.html":{},"classes/Plan.html":{},"classes/Step.html":{},"classes/Vertex.html":{}}}],["this.repo",{"_index":1273,"title":{},"body":{"classes/NewScheduleService.html":{}}}],["this.repo.delete(booking.user_id",{"_index":349,"title":{},"body":{"injectables/BookingService.html":{}}}],["this.repo.deleteroute(code",{"_index":1689,"title":{},"body":{"injectables/SavedService.html":{}}}],["this.repo.deletestop(code",{"_index":1690,"title":{},"body":{"injectables/SavedService.html":{}}}],["this.repo.get(email",{"_index":348,"title":{},"body":{"injectables/BookingService.html":{}}}],["this.repo.get(routecode",{"_index":1475,"title":{},"body":{"injectables/PointService.html":{},"injectables/ScheduleService.html":{}}}],["this.repo.get(spec",{"_index":1585,"title":{},"body":{"injectables/RouteService.html":{},"injectables/StopService.html":{}}}],["this.repo.get(trip_id",{"_index":2066,"title":{},"body":{"injectables/TripService.html":{}}}],["this.repo.getall",{"_index":1111,"title":{},"body":{"injectables/LineService.html":{},"injectables/RouteService.html":{},"injectables/ScheduleService.html":{},"injectables/StopService.html":{}}}],["this.repo.getallroutes(user",{"_index":1692,"title":{},"body":{"injectables/SavedService.html":{}}}],["this.repo.getallstops(user",{"_index":1691,"title":{},"body":{"injectables/SavedService.html":{}}}],["this.repo.getbydate(routecode",{"_index":2063,"title":{},"body":{"injectables/TripService.html":{}}}],["this.repo.getbytime(s",{"_index":1783,"title":{},"body":{"injectables/ScheduleService.html":{}}}],["this.repo.getids",{"_index":1780,"title":{},"body":{"injectables/ScheduleService.html":{}}}],["this.repo.getoccupation(trip_ids",{"_index":2064,"title":{},"body":{"injectables/TripService.html":{}}}],["this.repo.getone(email",{"_index":2193,"title":{},"body":{"injectables/UserService.html":{}}}],["this.repo.getone(trip_id",{"_index":2060,"title":{},"body":{"injectables/TripService.html":{}}}],["this.repo.getone({code",{"_index":1878,"title":{},"body":{"injectables/StopService.html":{}}}],["this.repo.getroutesbylineid(lineid",{"_index":1586,"title":{},"body":{"injectables/RouteService.html":{}}}],["this.repo.getroutestops(routecode",{"_index":1874,"title":{},"body":{"injectables/StopService.html":{}}}],["this.repo.getsaved(user",{"_index":1588,"title":{},"body":{"injectables/RouteService.html":{},"injectables/StopService.html":{}}}],["this.repo.getstoplines",{"_index":1875,"title":{},"body":{"injectables/StopService.html":{}}}],["this.repo.getstoproutes(stopcode",{"_index":1587,"title":{},"body":{"injectables/RouteService.html":{}}}],["this.repo.gettrip(day",{"_index":1782,"title":{},"body":{"injectables/ScheduleService.html":{}}}],["this.repo.gettripone(id",{"_index":1781,"title":{},"body":{"injectables/ScheduleService.html":{}}}],["this.repo.insert(bookings",{"_index":374,"title":{},"body":{"injectables/BookingService.html":{}}}],["this.repo.insert(lines",{"_index":1112,"title":{},"body":{"injectables/LineService.html":{}}}],["this.repo.insert(points",{"_index":1476,"title":{},"body":{"injectables/PointService.html":{}}}],["this.repo.insert(routes",{"_index":1589,"title":{},"body":{"injectables/RouteService.html":{}}}],["this.repo.insert(rs",{"_index":1609,"title":{},"body":{"injectables/RouteStopService.html":{}}}],["this.repo.insert(stops",{"_index":1877,"title":{},"body":{"injectables/StopService.html":{}}}],["this.repo.insert(trips",{"_index":1779,"title":{},"body":{"injectables/ScheduleService.html":{},"injectables/TripService.html":{}}}],["this.repo.insertone(user",{"_index":2192,"title":{},"body":{"injectables/UserService.html":{}}}],["this.repo.insertroute(code",{"_index":1688,"title":{},"body":{"injectables/SavedService.html":{}}}],["this.repo.insertstop(code",{"_index":1687,"title":{},"body":{"injectables/SavedService.html":{}}}],["this.repo.insertstops(codes",{"_index":1590,"title":{},"body":{"injectables/RouteService.html":{}}}],["this.repo.save(data",{"_index":1272,"title":{},"body":{"classes/NewScheduleService.html":{}}}],["this.repo.search(booking.trip_id",{"_index":358,"title":{},"body":{"injectables/BookingService.html":{}}}],["this.repo.updatedebarkation(trip_id",{"_index":2062,"title":{},"body":{"injectables/TripService.html":{}}}],["this.repo.updateembarkation(trip_id",{"_index":2061,"title":{},"body":{"injectables/TripService.html":{}}}],["this.repo.updateoccupation(stopcodes",{"_index":2065,"title":{},"body":{"injectables/TripService.html":{}}}],["this.repo.updatestoplines(code",{"_index":1876,"title":{},"body":{"injectables/StopService.html":{}}}],["this.repository",{"_index":434,"title":{},"body":{"classes/Context.html":{}}}],["this.routecode",{"_index":154,"title":{},"body":{"classes/ArrivalDto.html":{},"classes/ScheduleDetailsDto.html":{}}}],["this.routeid",{"_index":951,"title":{},"body":{"classes/Itinerary.html":{},"classes/Leg.html":{},"classes/Plan.html":{},"classes/Step.html":{},"classes/Vertex.html":{}}}],["this.routename",{"_index":158,"title":{},"body":{"classes/ArrivalDto.html":{}}}],["this.routeshortname",{"_index":968,"title":{},"body":{"classes/Itinerary.html":{},"classes/Leg.html":{},"classes/Plan.html":{},"classes/Step.html":{},"classes/Vertex.html":{}}}],["this.routesservice",{"_index":740,"title":{},"body":{"injectables/DataService.html":{}}}],["this.rsservice",{"_index":746,"title":{},"body":{"injectables/DataService.html":{}}}],["this.saved.deleteroute(req.user.email",{"_index":1653,"title":{},"body":{"controllers/SavedController.html":{}}}],["this.saved.deletestop(code",{"_index":1647,"title":{},"body":{"controllers/SavedController.html":{}}}],["this.saved.getinfo(req.user.email",{"_index":1662,"title":{},"body":{"controllers/SavedController.html":{}}}],["this.saved.getroutes(req.user.email",{"_index":1659,"title":{},"body":{"controllers/SavedController.html":{}}}],["this.saved.getstops(req.user.email",{"_index":1656,"title":{},"body":{"controllers/SavedController.html":{}}}],["this.saved.insertroute(req.user.email",{"_index":1650,"title":{},"body":{"controllers/SavedController.html":{}}}],["this.saved.insertstop(code",{"_index":1644,"title":{},"body":{"controllers/SavedController.html":{}}}],["this.schedules",{"_index":1722,"title":{},"body":{"classes/ScheduleDetailsDto.html":{}}}],["this.schserivce",{"_index":742,"title":{},"body":{"injectables/DataService.html":{}}}],["this.server.emit('update",{"_index":1949,"title":{},"body":{"classes/TransitGateWay.html":{}}}],["this.server.to(client.id).emit('accepted",{"_index":1951,"title":{},"body":{"classes/TransitGateWay.html":{}}}],["this.servicedate",{"_index":955,"title":{},"body":{"classes/Itinerary.html":{},"classes/Leg.html":{},"classes/Plan.html":{},"classes/Step.html":{},"classes/Vertex.html":{}}}],["this.setroute(leg.routeid",{"_index":952,"title":{},"body":{"classes/Itinerary.html":{},"classes/Leg.html":{},"classes/Plan.html":{},"classes/Step.html":{},"classes/Vertex.html":{}}}],["this.settrip(leg.tripid",{"_index":954,"title":{},"body":{"classes/Itinerary.html":{},"classes/Leg.html":{},"classes/Plan.html":{},"classes/Step.html":{},"classes/Vertex.html":{}}}],["this.slug",{"_index":1008,"title":{},"body":{"classes/Itinerary.html":{},"classes/Leg.html":{},"classes/Plan.html":{},"classes/Step.html":{},"classes/Vertex.html":{}}}],["this.starttime",{"_index":961,"title":{},"body":{"classes/Itinerary.html":{},"classes/Leg.html":{},"classes/Plan.html":{},"classes/Step.html":{},"classes/Vertex.html":{}}}],["this.steps",{"_index":970,"title":{},"body":{"classes/Itinerary.html":{},"classes/Leg.html":{},"classes/Plan.html":{},"classes/Step.html":{},"classes/Vertex.html":{}}}],["this.stopcode",{"_index":921,"title":{},"body":{"classes/Itinerary.html":{},"classes/Leg.html":{},"classes/Plan.html":{},"classes/Step.html":{},"classes/Vertex.html":{}}}],["this.stopid",{"_index":923,"title":{},"body":{"classes/Itinerary.html":{},"classes/Leg.html":{},"classes/Plan.html":{},"classes/Step.html":{},"classes/Vertex.html":{}}}],["this.stopindex",{"_index":924,"title":{},"body":{"classes/Itinerary.html":{},"classes/Leg.html":{},"classes/Plan.html":{},"classes/Step.html":{},"classes/Vertex.html":{}}}],["this.stops",{"_index":1513,"title":{},"body":{"classes/RouteDto.html":{},"classes/RouteInfoDto.html":{}}}],["this.stopsequence",{"_index":926,"title":{},"body":{"classes/Itinerary.html":{},"classes/Leg.html":{},"classes/Plan.html":{},"classes/Step.html":{},"classes/Vertex.html":{}}}],["this.stopsservice",{"_index":741,"title":{},"body":{"injectables/DataService.html":{}}}],["this.stoptimeupdate",{"_index":793,"title":{},"body":{"interfaces/FeedEntity-1.html":{},"interfaces/FeedHeader-1.html":{},"interfaces/FeedMessage-1.html":{},"interfaces/StopTimeEvent.html":{},"interfaces/StopTimeUpdate.html":{},"classes/Trip-1.html":{},"interfaces/TripDescriptor-1.html":{},"interfaces/TripUpdate.html":{}}}],["this.strategy",{"_index":436,"title":{},"body":{"classes/Context.html":{}}}],["this.strategy.buildroute(tripstate",{"_index":433,"title":{},"body":{"classes/Context.html":{}}}],["this.streetname",{"_index":901,"title":{},"body":{"classes/Itinerary.html":{},"classes/Leg.html":{},"classes/Plan.html":{},"classes/Step.html":{},"classes/Vertex.html":{}}}],["this.throwerror('no",{"_index":371,"title":{},"body":{"injectables/BookingService.html":{}}}],["this.throwerror('trip",{"_index":361,"title":{},"body":{"injectables/BookingService.html":{}}}],["this.throwerror('wrong",{"_index":226,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.time",{"_index":1318,"title":{},"body":{"classes/OTPParams.html":{},"interfaces/TripState.html":{}}}],["this.to",{"_index":972,"title":{},"body":{"classes/Itinerary.html":{},"classes/Leg.html":{},"classes/Plan.html":{},"classes/Step.html":{},"classes/Vertex.html":{}}}],["this.token",{"_index":488,"title":{},"body":{"injectables/DBUpdateService.html":{},"injectables/LiveUpdatesService.html":{}}}],["this.toplace",{"_index":1315,"title":{},"body":{"classes/OTPParams.html":{},"interfaces/TripState.html":{}}}],["this.transittime",{"_index":947,"title":{},"body":{"classes/Itinerary.html":{},"classes/Leg.html":{},"classes/Plan.html":{},"classes/Step.html":{},"classes/Vertex.html":{}}}],["this.trip",{"_index":792,"title":{},"body":{"interfaces/FeedEntity-1.html":{},"interfaces/FeedHeader-1.html":{},"interfaces/FeedMessage-1.html":{},"interfaces/StopTimeEvent.html":{},"interfaces/StopTimeUpdate.html":{},"classes/Trip-1.html":{},"interfaces/TripDescriptor-1.html":{},"interfaces/TripUpdate.html":{}}}],["this.tripid",{"_index":953,"title":{},"body":{"classes/Itinerary.html":{},"classes/Leg.html":{},"classes/Plan.html":{},"classes/Step.html":{},"classes/Vertex.html":{}}}],["this.triprepo.getoccupation(trip_ids",{"_index":1411,"title":{},"body":{"injectables/OTPService.html":{}}}],["this.tripservice",{"_index":744,"title":{},"body":{"injectables/DataService.html":{}}}],["this.tripupdate",{"_index":794,"title":{},"body":{"interfaces/FeedEntity-1.html":{},"interfaces/FeedHeader-1.html":{},"interfaces/FeedMessage-1.html":{},"interfaces/StopTimeEvent.html":{},"interfaces/StopTimeUpdate.html":{},"classes/Trip-1.html":{},"interfaces/TripDescriptor-1.html":{},"interfaces/TripUpdate.html":{}}}],["this.updatedb(event",{"_index":2086,"title":{},"body":{"injectables/TripUpdatesListener.html":{}}}],["this.userservice.createuser(data",{"_index":64,"title":{},"body":{"controllers/AppController.html":{}}}],["this.userservice.finduserbyemail(data.email",{"_index":60,"title":{},"body":{"controllers/AppController.html":{}}}],["this.usersservice.createuser(user",{"_index":222,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.usersservice.finduserbyemail(email",{"_index":223,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.value",{"_index":2110,"title":{},"body":{"classes/UpdateTrips.html":{}}}],["this.vehiclecode",{"_index":156,"title":{},"body":{"classes/ArrivalDto.html":{}}}],["this.vertextype",{"_index":919,"title":{},"body":{"classes/Itinerary.html":{},"classes/Leg.html":{},"classes/Plan.html":{},"classes/Step.html":{},"classes/Vertex.html":{}}}],["this.waitingtime",{"_index":988,"title":{},"body":{"classes/Itinerary.html":{},"classes/Leg.html":{},"classes/Plan.html":{},"classes/Step.html":{},"classes/Vertex.html":{}}}],["this.walkdistance",{"_index":990,"title":{},"body":{"classes/Itinerary.html":{},"classes/Leg.html":{},"classes/Plan.html":{},"classes/Step.html":{},"classes/Vertex.html":{}}}],["this.walktime",{"_index":995,"title":{},"body":{"classes/Itinerary.html":{},"classes/Leg.html":{},"classes/Plan.html":{},"classes/Step.html":{},"classes/Vertex.html":{}}}],["throw",{"_index":235,"title":{},"body":{"injectables/AuthService.html":{},"injectables/BookingService.html":{},"injectables/LocalStrategy.html":{}}}],["throwerror",{"_index":198,"title":{},"body":{"injectables/AuthService.html":{},"injectables/BookingService.html":{}}}],["throwerror(msg",{"_index":211,"title":{},"body":{"injectables/AuthService.html":{},"injectables/BookingService.html":{}}}],["time",{"_index":784,"title":{},"body":{"interfaces/FeedEntity-1.html":{},"interfaces/FeedHeader-1.html":{},"interfaces/FeedMessage-1.html":{},"classes/Itinerary.html":{},"classes/Leg.html":{},"classes/OTPParams.html":{},"interfaces/StopTimeEvent.html":{},"interfaces/StopTimeUpdate.html":{},"entities/Trip.html":{},"classes/Trip-1.html":{},"interfaces/TripDescriptor-1.html":{},"interfaces/TripState.html":{},"interfaces/TripUpdate.html":{},"classes/Vertex.html":{}}}],["time=${this.time",{"_index":1326,"title":{},"body":{"classes/OTPParams.html":{},"interfaces/TripState.html":{}}}],["times",{"_index":651,"title":{},"body":{"controllers/DBupdateController.html":{}}}],["times.length",{"_index":656,"title":{},"body":{"controllers/DBupdateController.html":{}}}],["times[i",{"_index":657,"title":{},"body":{"controllers/DBupdateController.html":{}}}],["timestamp",{"_index":756,"title":{},"body":{"interfaces/FeedEntity.html":{},"interfaces/FeedEntity-1.html":{},"interfaces/FeedHeader.html":{},"interfaces/FeedHeader-1.html":{},"interfaces/FeedMessage.html":{},"interfaces/FeedMessage-1.html":{},"entities/LiveData.html":{},"interfaces/Long.html":{},"interfaces/Position.html":{},"classes/PositionProto.html":{},"interfaces/StopTimeEvent.html":{},"interfaces/StopTimeUpdate.html":{},"classes/Trip-1.html":{},"interfaces/TripDescriptor.html":{},"interfaces/TripDescriptor-1.html":{},"interfaces/TripUpdate.html":{},"interfaces/VehicleDescriptor.html":{},"interfaces/VehiclePosition.html":{}}}],["token",{"_index":453,"title":{},"body":{"injectables/DBUpdateService.html":{},"injectables/LiveUpdatesService.html":{}}}],["toplace",{"_index":1283,"title":{},"body":{"classes/OTPParams.html":{},"interfaces/TripState.html":{}}}],["toplace=${this.toplace",{"_index":1325,"title":{},"body":{"classes/OTPParams.html":{},"interfaces/TripState.html":{}}}],["totalduration",{"_index":1058,"title":{},"body":{"classes/Leg.html":{}}}],["totalseats",{"_index":1980,"title":{},"body":{"entities/Trip.html":{}}}],["touch",{"_index":2335,"title":{},"body":{"index.html":{}}}],["tram",{"_index":1380,"title":{},"body":{"injectables/OTPService.html":{}}}],["transformer",{"_index":2256,"title":{},"body":{"dependencies.html":{}}}],["transit,walk",{"_index":1297,"title":{},"body":{"classes/OTPParams.html":{},"interfaces/TripState.html":{}}}],["transit/entities/line.entity",{"_index":1101,"title":{},"body":{"injectables/LineRepository.html":{},"injectables/LiveDataRepository.html":{}}}],["transit/entities/point.entity",{"_index":1464,"title":{},"body":{"classes/PointRepository.html":{},"classes/RouteRepository.html":{}}}],["transit/entities/route.entity",{"_index":1539,"title":{},"body":{"classes/RouteRepository.html":{}}}],["transit/entities/schedule.entity",{"_index":1755,"title":{},"body":{"classes/ScheduleRepository.html":{}}}],["transit/entities/stop.entity",{"_index":1838,"title":{},"body":{"classes/StopRepository.html":{}}}],["transit/entities/trip.entity",{"_index":343,"title":{},"body":{"injectables/BookingService.html":{}}}],["transit/events/trips.update.event",{"_index":345,"title":{},"body":{"injectables/BookingService.html":{}}}],["transit/transit.module",{"_index":100,"title":{},"body":{"modules/AppModule.html":{}}}],["transit_data.line",{"_index":1561,"title":{},"body":{"classes/RouteRepository.html":{},"classes/StopRepository.html":{}}}],["transit_data.route",{"_index":1556,"title":{},"body":{"classes/RouteRepository.html":{},"classes/StopRepository.html":{}}}],["transit_data.route_stop",{"_index":1566,"title":{},"body":{"classes/RouteRepository.html":{},"classes/StopRepository.html":{}}}],["transit_data.schedule",{"_index":1758,"title":{},"body":{"classes/ScheduleRepository.html":{}}}],["transit_data.stop",{"_index":1852,"title":{},"body":{"classes/StopRepository.html":{}}}],["transit_data.trip",{"_index":2043,"title":{},"body":{"injectables/TripRepository.html":{}}}],["transit_data.user_route",{"_index":1552,"title":{},"body":{"classes/RouteRepository.html":{}}}],["transit_data.user_stop",{"_index":1851,"title":{},"body":{"classes/StopRepository.html":{}}}],["transitapi",{"_index":1881,"title":{},"body":{"controllers/TransitController.html":{}}}],["transitcontroller",{"_index":1879,"title":{"controllers/TransitController.html":{}},"body":{"controllers/TransitController.html":{},"modules/TransitModule.html":{},"coverage.html":{}}}],["transitdtos/arrival.dto",{"_index":780,"title":{},"body":{"interfaces/FeedEntity-1.html":{},"interfaces/FeedHeader-1.html":{},"interfaces/FeedMessage-1.html":{},"entities/LiveData.html":{},"controllers/LiveUpdatesController.html":{},"injectables/LiveUpdatesService.html":{},"interfaces/StopTimeEvent.html":{},"interfaces/StopTimeUpdate.html":{},"classes/Trip-1.html":{},"interfaces/TripDescriptor-1.html":{},"interfaces/TripUpdate.html":{}}}],["transitdtos/itinerary.dto",{"_index":1367,"title":{},"body":{"injectables/OTPService.html":{},"controllers/TransitController.html":{}}}],["transitdtos/route.dto",{"_index":1901,"title":{},"body":{"controllers/TransitController.html":{}}}],["transitdtos/schedule.details",{"_index":1902,"title":{},"body":{"controllers/TransitController.html":{}}}],["transitdtos/trip.state",{"_index":1366,"title":{},"body":{"injectables/OTPService.html":{}}}],["transitgateway",{"_index":101,"title":{"classes/TransitGateWay.html":{}},"body":{"modules/AppModule.html":{},"classes/TransitGateWay.html":{},"modules/TransitModule.html":{},"injectables/TripUpdatesListener.html":{},"modules/UserModule.html":{},"coverage.html":{}}}],["transitmodule",{"_index":86,"title":{"modules/TransitModule.html":{}},"body":{"modules/AppModule.html":{},"modules/TransitModule.html":{},"modules/UserModule.html":{},"modules.html":{},"overview.html":{}}}],["transittime",{"_index":864,"title":{},"body":{"classes/Itinerary.html":{},"classes/Leg.html":{},"classes/Plan.html":{},"classes/Step.html":{},"classes/Vertex.html":{}}}],["travel",{"_index":251,"title":{},"body":{"entities/Booking.html":{}}}],["trip",{"_index":342,"title":{"entities/Trip.html":{},"classes/Trip-1.html":{}},"body":{"injectables/BookingService.html":{},"controllers/DBupdateController.html":{},"interfaces/FeedEntity.html":{},"interfaces/FeedEntity-1.html":{},"interfaces/FeedHeader.html":{},"interfaces/FeedHeader-1.html":{},"interfaces/FeedMessage.html":{},"interfaces/FeedMessage-1.html":{},"controllers/LiveUpdatesController.html":{},"injectables/LiveUpdatesService.html":{},"interfaces/Long.html":{},"injectables/OTPService.html":{},"interfaces/Position.html":{},"classes/PositionProto.html":{},"interfaces/StopTimeEvent.html":{},"interfaces/StopTimeUpdate.html":{},"modules/TransitModule.html":{},"entities/Trip.html":{},"classes/Trip-1.html":{},"interfaces/TripDescriptor.html":{},"interfaces/TripDescriptor-1.html":{},"injectables/TripRepository.html":{},"injectables/TripService.html":{},"interfaces/TripUpdate.html":{},"injectables/TripUpdatesListener.html":{},"interfaces/VehicleDescriptor.html":{},"interfaces/VehiclePosition.html":{},"coverage.html":{}}}],["trip.\"id",{"_index":2045,"title":{},"body":{"injectables/TripRepository.html":{}}}],["trip.\"trip_id\"='${trip_id",{"_index":2044,"title":{},"body":{"injectables/TripRepository.html":{}}}],["trip.debarkation",{"_index":666,"title":{},"body":{"controllers/DBupdateController.html":{}}}],["trip.embarkation",{"_index":667,"title":{},"body":{"controllers/DBupdateController.html":{}}}],["trip.id",{"_index":641,"title":{},"body":{"controllers/DBupdateController.html":{}}}],["trip.linecode",{"_index":639,"title":{},"body":{"controllers/DBupdateController.html":{}}}],["trip.map(t",{"_index":649,"title":{},"body":{"controllers/DBupdateController.html":{},"injectables/TripUpdatesListener.html":{}}}],["trip.occupied",{"_index":668,"title":{},"body":{"controllers/DBupdateController.html":{},"injectables/OTPService.html":{}}}],["trip.routecode",{"_index":675,"title":{},"body":{"controllers/DBupdateController.html":{}}}],["trip.service",{"_index":734,"title":{},"body":{"injectables/DataService.html":{}}}],["trip.stopcode",{"_index":669,"title":{},"body":{"controllers/DBupdateController.html":{}}}],["trip.time",{"_index":677,"title":{},"body":{"controllers/DBupdateController.html":{}}}],["trip.totalseats",{"_index":370,"title":{},"body":{"injectables/BookingService.html":{},"controllers/DBupdateController.html":{},"injectables/OTPService.html":{}}}],["trip.trip_id",{"_index":672,"title":{},"body":{"controllers/DBupdateController.html":{}}}],["trip_id",{"_index":252,"title":{},"body":{"entities/Booking.html":{},"injectables/BookingRepository.html":{},"classes/Leg.html":{},"entities/NewSchedule.html":{},"entities/Schedule.html":{},"classes/ScheduleRepository.html":{},"entities/Trip.html":{},"injectables/TripRepository.html":{},"injectables/TripService.html":{}}}],["trip_id.split(\":\")[1",{"_index":981,"title":{},"body":{"classes/Itinerary.html":{},"classes/Leg.html":{},"classes/Plan.html":{},"classes/Step.html":{},"classes/Vertex.html":{}}}],["trip_ids",{"_index":356,"title":{},"body":{"injectables/BookingService.html":{},"injectables/OTPService.html":{},"classes/TransitGateWay.html":{},"injectables/TripRepository.html":{},"injectables/TripService.html":{}}}],["trip_ids.push(+leg.tripid.split(\":\")[1",{"_index":1403,"title":{},"body":{"injectables/OTPService.html":{}}}],["tripdescriptor",{"_index":757,"title":{"interfaces/TripDescriptor.html":{},"interfaces/TripDescriptor-1.html":{}},"body":{"interfaces/FeedEntity.html":{},"interfaces/FeedEntity-1.html":{},"interfaces/FeedHeader.html":{},"interfaces/FeedHeader-1.html":{},"interfaces/FeedMessage.html":{},"interfaces/FeedMessage-1.html":{},"controllers/LiveUpdatesController.html":{},"interfaces/Long.html":{},"interfaces/Position.html":{},"classes/PositionProto.html":{},"interfaces/StopTimeEvent.html":{},"interfaces/StopTimeUpdate.html":{},"classes/Trip-1.html":{},"interfaces/TripDescriptor.html":{},"interfaces/TripDescriptor-1.html":{},"interfaces/TripUpdate.html":{},"interfaces/VehicleDescriptor.html":{},"interfaces/VehiclePosition.html":{},"coverage.html":{}}}],["tripid",{"_index":758,"title":{},"body":{"interfaces/FeedEntity.html":{},"interfaces/FeedEntity-1.html":{},"interfaces/FeedHeader.html":{},"interfaces/FeedHeader-1.html":{},"interfaces/FeedMessage.html":{},"interfaces/FeedMessage-1.html":{},"classes/Itinerary.html":{},"classes/Leg.html":{},"interfaces/Long.html":{},"classes/Plan.html":{},"interfaces/Position.html":{},"classes/PositionProto.html":{},"classes/Step.html":{},"interfaces/StopTimeEvent.html":{},"interfaces/StopTimeUpdate.html":{},"classes/Trip-1.html":{},"interfaces/TripDescriptor.html":{},"interfaces/TripDescriptor-1.html":{},"interfaces/TripUpdate.html":{},"interfaces/VehicleDescriptor.html":{},"interfaces/VehiclePosition.html":{},"classes/Vertex.html":{}}}],["triprepo",{"_index":1351,"title":{},"body":{"injectables/OTPService.html":{},"injectables/TripRepository.html":{}}}],["triprepository",{"_index":1352,"title":{"injectables/TripRepository.html":{}},"body":{"injectables/OTPService.html":{},"modules/TransitModule.html":{},"injectables/TripRepository.html":{},"injectables/TripService.html":{},"classes/UpdateTrips.html":{},"coverage.html":{},"overview.html":{}}}],["trips",{"_index":635,"title":{},"body":{"controllers/DBupdateController.html":{},"injectables/DataService.html":{},"interfaces/FeedEntity-1.html":{},"interfaces/FeedHeader-1.html":{},"interfaces/FeedMessage-1.html":{},"injectables/OTPService.html":{},"injectables/ScheduleService.html":{},"interfaces/StopTimeEvent.html":{},"interfaces/StopTimeUpdate.html":{},"classes/Trip-1.html":{},"interfaces/TripDescriptor-1.html":{},"injectables/TripService.html":{},"interfaces/TripUpdate.html":{}}}],["trips.find(t",{"_index":1413,"title":{},"body":{"injectables/OTPService.html":{}}}],["trips.push(new_trip",{"_index":642,"title":{},"body":{"controllers/DBupdateController.html":{}}}],["trips.push(trip",{"_index":679,"title":{},"body":{"controllers/DBupdateController.html":{}}}],["trips/route/${code",{"_index":494,"title":{},"body":{"injectables/DBUpdateService.html":{}}}],["tripservice",{"_index":706,"title":{"injectables/TripService.html":{}},"body":{"injectables/DataService.html":{},"modules/TransitModule.html":{},"injectables/TripService.html":{},"coverage.html":{},"overview.html":{}}}],["tripspromise",{"_index":632,"title":{},"body":{"controllers/DBupdateController.html":{}}}],["tripspromise.data",{"_index":636,"title":{},"body":{"controllers/DBupdateController.html":{}}}],["tripstate",{"_index":426,"title":{"interfaces/TripState.html":{}},"body":{"classes/Context.html":{},"interfaces/NavigatorStrategy.html":{},"classes/OTPParams.html":{},"injectables/OTPService.html":{},"classes/OTPStrategy.html":{},"classes/SingleRouteStrategy.html":{},"interfaces/TripState.html":{},"coverage.html":{}}}],["tripstate.destination[0",{"_index":1788,"title":{},"body":{"classes/SingleRouteStrategy.html":{}}}],["tripstate.start[0",{"_index":1787,"title":{},"body":{"classes/SingleRouteStrategy.html":{}}}],["triptime",{"_index":1249,"title":{},"body":{"entities/NewSchedule.html":{},"entities/Schedule.html":{}}}],["triptimehour",{"_index":1250,"title":{},"body":{"entities/NewSchedule.html":{},"entities/Schedule.html":{}}}],["triptimeminute",{"_index":1251,"title":{},"body":{"entities/NewSchedule.html":{},"entities/Schedule.html":{}}}],["tripupdate",{"_index":777,"title":{"interfaces/TripUpdate.html":{}},"body":{"interfaces/FeedEntity-1.html":{},"interfaces/FeedHeader-1.html":{},"interfaces/FeedMessage-1.html":{},"interfaces/StopTimeEvent.html":{},"interfaces/StopTimeUpdate.html":{},"classes/Trip-1.html":{},"interfaces/TripDescriptor-1.html":{},"interfaces/TripUpdate.html":{},"coverage.html":{}}}],["tripupdateslistener",{"_index":1958,"title":{"injectables/TripUpdatesListener.html":{}},"body":{"modules/TransitModule.html":{},"injectables/TripUpdatesListener.html":{},"coverage.html":{},"overview.html":{}}}],["true",{"_index":113,"title":{},"body":{"modules/AppModule.html":{},"entities/Booking.html":{},"entities/Line.html":{},"entities/LiveData.html":{},"classes/OTPParams.html":{},"entities/Route.html":{},"entities/Stop.html":{},"entities/Trip.html":{},"interfaces/TripState.html":{},"injectables/TripUpdatesListener.html":{},"entities/User.html":{},"miscellaneous/variables.html":{}}}],["true})@isnotempty()@minlength(5",{"_index":2112,"title":{},"body":{"entities/User.html":{}}}],["true})@primarycolumn({nullable",{"_index":1069,"title":{},"body":{"entities/Line.html":{},"entities/Route.html":{},"entities/Stop.html":{},"entities/User.html":{}}}],["true})@primarygeneratedcolumn",{"_index":1124,"title":{},"body":{"entities/LiveData.html":{}}}],["twitter",{"_index":2341,"title":{},"body":{"index.html":{}}}],["type",{"_index":23,"title":{},"body":{"controllers/AppController.html":{},"classes/ArrivalDto.html":{},"injectables/AuthService.html":{},"entities/Booking.html":{},"injectables/BookingRepository.html":{},"injectables/BookingService.html":{},"controllers/BookingsController.html":{},"classes/Context.html":{},"classes/CreateUserDto.html":{},"injectables/DBUpdateService.html":{},"controllers/DBupdateController.html":{},"injectables/DataService.html":{},"interfaces/FeedEntity.html":{},"interfaces/FeedEntity-1.html":{},"interfaces/FeedHeader.html":{},"interfaces/FeedHeader-1.html":{},"interfaces/FeedMessage.html":{},"interfaces/FeedMessage-1.html":{},"classes/IGenericRepository.html":{},"classes/Itinerary.html":{},"injectables/JwtStrategy.html":{},"classes/Leg.html":{},"entities/Line.html":{},"classes/LineDto.html":{},"injectables/LineRepository.html":{},"injectables/LineService.html":{},"entities/LiveData.html":{},"injectables/LiveDataRepository.html":{},"controllers/LiveUpdatesController.html":{},"injectables/LiveUpdatesService.html":{},"injectables/LocalStrategy.html":{},"interfaces/Long.html":{},"interfaces/NavigatorStrategy.html":{},"entities/NewSchedule.html":{},"classes/NewScheduleService.html":{},"classes/OTPParams.html":{},"injectables/OTPService.html":{},"classes/OTPStrategy.html":{},"classes/Plan.html":{},"entities/Point.html":{},"classes/PointDto.html":{},"classes/PointRepository.html":{},"injectables/PointService.html":{},"interfaces/Position.html":{},"classes/PositionProto.html":{},"entities/Route.html":{},"classes/RouteDto.html":{},"classes/RouteInfoDto.html":{},"classes/RouteRepository.html":{},"injectables/RouteService.html":{},"entities/RouteStop.html":{},"classes/RouteStopRepository.html":{},"injectables/RouteStopService.html":{},"controllers/SavedController.html":{},"injectables/SavedService.html":{},"entities/Schedule.html":{},"classes/ScheduleDayDto.html":{},"classes/ScheduleDetailsDto.html":{},"classes/ScheduleDto.html":{},"classes/ScheduleRepository.html":{},"injectables/ScheduleService.html":{},"classes/SingleRouteStrategy.html":{},"classes/Step.html":{},"entities/Stop.html":{},"classes/StopDto.html":{},"classes/StopRepository.html":{},"injectables/StopService.html":{},"interfaces/StopTimeEvent.html":{},"interfaces/StopTimeUpdate.html":{},"controllers/TransitController.html":{},"classes/TransitGateWay.html":{},"entities/Trip.html":{},"classes/Trip-1.html":{},"interfaces/TripDescriptor.html":{},"interfaces/TripDescriptor-1.html":{},"injectables/TripRepository.html":{},"injectables/TripService.html":{},"interfaces/TripState.html":{},"interfaces/TripUpdate.html":{},"injectables/TripUpdatesListener.html":{},"classes/UpdateTrips.html":{},"entities/User.html":{},"controllers/UserController.html":{},"injectables/UserRepository.html":{},"entities/UserRoute.html":{},"injectables/UserService.html":{},"entities/UserStop.html":{},"interfaces/VehicleDescriptor.html":{},"interfaces/VehiclePosition.html":{},"classes/Vertex.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["typeorm",{"_index":271,"title":{},"body":{"entities/Booking.html":{},"injectables/BookingRepository.html":{},"classes/Context.html":{},"classes/IGenericRepository.html":{},"entities/Line.html":{},"injectables/LineRepository.html":{},"entities/LiveData.html":{},"injectables/LiveDataRepository.html":{},"entities/NewSchedule.html":{},"classes/NewScheduleService.html":{},"entities/Point.html":{},"classes/PointRepository.html":{},"entities/Route.html":{},"classes/RouteRepository.html":{},"entities/RouteStop.html":{},"classes/RouteStopRepository.html":{},"entities/Schedule.html":{},"classes/ScheduleRepository.html":{},"classes/SingleRouteStrategy.html":{},"entities/Stop.html":{},"classes/StopRepository.html":{},"entities/Trip.html":{},"injectables/TripRepository.html":{},"entities/User.html":{},"injectables/UserRepository.html":{},"entities/UserRoute.html":{},"entities/UserStop.html":{},"dependencies.html":{}}}],["typeorm/query",{"_index":842,"title":{},"body":{"classes/IGenericRepository.html":{}}}],["typeormmodule",{"_index":95,"title":{},"body":{"modules/AppModule.html":{},"modules/TransitModule.html":{},"modules/UserModule.html":{}}}],["typeormmodule.forfeature([newschedule",{"_index":1975,"title":{},"body":{"modules/TransitModule.html":{}}}],["typeormmodule.forfeature([user",{"_index":2143,"title":{},"body":{"modules/UserModule.html":{}}}],["typeormmodule.forrootasync",{"_index":114,"title":{},"body":{"modules/AppModule.html":{}}}],["typeormmoduleoptions",{"_index":2362,"title":{},"body":{"miscellaneous/variables.html":{}}}],["types/google",{"_index":2254,"title":{},"body":{"dependencies.html":{}}}],["typescript",{"_index":2302,"title":{},"body":{"index.html":{}}}],["unauthorizedexception",{"_index":1240,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["undefined",{"_index":812,"title":{},"body":{"interfaces/FeedEntity-1.html":{},"interfaces/FeedHeader-1.html":{},"interfaces/FeedMessage-1.html":{},"classes/Itinerary.html":{},"classes/Leg.html":{},"classes/Plan.html":{},"classes/Step.html":{},"interfaces/StopTimeEvent.html":{},"interfaces/StopTimeUpdate.html":{},"classes/Trip-1.html":{},"interfaces/TripDescriptor-1.html":{},"interfaces/TripUpdate.html":{},"classes/Vertex.html":{}}}],["unique",{"_index":1486,"title":{},"body":{"entities/Route.html":{},"entities/Trip.html":{},"entities/User.html":{}}}],["unit",{"_index":2314,"title":{},"body":{"index.html":{}}}],["unknown",{"_index":334,"title":{},"body":{"injectables/BookingService.html":{},"injectables/DBUpdateService.html":{},"controllers/DBupdateController.html":{},"injectables/SavedService.html":{}}}],["unlicensed",{"_index":2356,"title":{},"body":{"properties.html":{}}}],["unsigned",{"_index":766,"title":{},"body":{"interfaces/FeedEntity.html":{},"interfaces/FeedHeader.html":{},"interfaces/FeedMessage.html":{},"interfaces/Long.html":{},"interfaces/Position.html":{},"classes/PositionProto.html":{},"interfaces/TripDescriptor.html":{},"interfaces/VehicleDescriptor.html":{},"interfaces/VehiclePosition.html":{}}}],["update",{"_index":307,"title":{},"body":{"injectables/BookingRepository.html":{},"controllers/DBupdateController.html":{},"classes/IGenericRepository.html":{},"injectables/LineRepository.html":{},"injectables/LiveDataRepository.html":{},"classes/PointRepository.html":{},"classes/RouteRepository.html":{},"classes/RouteStopRepository.html":{},"classes/ScheduleRepository.html":{},"classes/StopRepository.html":{},"injectables/TripRepository.html":{},"injectables/UserRepository.html":{}}}],["updatecontructor",{"_index":1992,"title":{},"body":{"classes/Trip-1.html":{}}}],["updatecontructor(day",{"_index":802,"title":{},"body":{"interfaces/FeedEntity-1.html":{},"interfaces/FeedHeader-1.html":{},"interfaces/FeedMessage-1.html":{},"interfaces/StopTimeEvent.html":{},"interfaces/StopTimeUpdate.html":{},"classes/Trip-1.html":{},"interfaces/TripDescriptor-1.html":{},"interfaces/TripUpdate.html":{}}}],["updatedb",{"_index":2070,"title":{},"body":{"injectables/TripUpdatesListener.html":{}}}],["updatedb(event",{"_index":2081,"title":{},"body":{"injectables/TripUpdatesListener.html":{}}}],["updatedebarkation",{"_index":2013,"title":{},"body":{"injectables/TripRepository.html":{},"injectables/TripService.html":{}}}],["updatedebarkation(trip_id",{"_index":2028,"title":{},"body":{"injectables/TripRepository.html":{},"injectables/TripService.html":{}}}],["updateembarkation",{"_index":2014,"title":{},"body":{"injectables/TripRepository.html":{},"injectables/TripService.html":{}}}],["updateembarkation(trip_id",{"_index":2030,"title":{},"body":{"injectables/TripRepository.html":{},"injectables/TripService.html":{}}}],["updateoccupancy",{"_index":1930,"title":{},"body":{"classes/TransitGateWay.html":{}}}],["updateoccupancy(value",{"_index":1939,"title":{},"body":{"classes/TransitGateWay.html":{}}}],["updateoccupation",{"_index":2015,"title":{},"body":{"injectables/TripRepository.html":{},"injectables/TripService.html":{}}}],["updateoccupation(stopcodes",{"_index":2032,"title":{},"body":{"injectables/TripRepository.html":{},"injectables/TripService.html":{}}}],["updateone",{"_index":284,"title":{},"body":{"injectables/BookingRepository.html":{},"classes/IGenericRepository.html":{},"injectables/LineRepository.html":{},"injectables/LiveDataRepository.html":{},"classes/PointRepository.html":{},"classes/RouteRepository.html":{},"classes/RouteStopRepository.html":{},"classes/ScheduleRepository.html":{},"classes/StopRepository.html":{},"injectables/TripRepository.html":{},"injectables/UserRepository.html":{}}}],["updateone(spec",{"_index":306,"title":{},"body":{"injectables/BookingRepository.html":{},"classes/IGenericRepository.html":{},"injectables/LineRepository.html":{},"injectables/LiveDataRepository.html":{},"classes/PointRepository.html":{},"classes/RouteRepository.html":{},"classes/RouteStopRepository.html":{},"classes/ScheduleRepository.html":{},"classes/StopRepository.html":{},"injectables/TripRepository.html":{},"injectables/UserRepository.html":{}}}],["updateresult",{"_index":310,"title":{},"body":{"injectables/BookingRepository.html":{},"classes/IGenericRepository.html":{},"injectables/LineRepository.html":{},"classes/NewScheduleService.html":{},"classes/PointRepository.html":{},"classes/RouteRepository.html":{},"classes/ScheduleRepository.html":{},"classes/StopRepository.html":{},"injectables/TripRepository.html":{}}}],["updatestoplines",{"_index":1825,"title":{},"body":{"classes/StopRepository.html":{},"injectables/StopService.html":{}}}],["updatestoplines(code",{"_index":1836,"title":{},"body":{"classes/StopRepository.html":{}}}],["updatestoplines(lines",{"_index":1871,"title":{},"body":{"injectables/StopService.html":{}}}],["updatetrips",{"_index":344,"title":{"classes/UpdateTrips.html":{}},"body":{"injectables/BookingService.html":{},"injectables/TripUpdatesListener.html":{},"classes/UpdateTrips.html":{},"coverage.html":{}}}],["updatetrips([booking",{"_index":354,"title":{},"body":{"injectables/BookingService.html":{}}}],["updatetrips(bookings",{"_index":376,"title":{},"body":{"injectables/BookingService.html":{}}}],["ur",{"_index":1553,"title":{},"body":{"classes/RouteRepository.html":{}}}],["ur.\"user_id\"='${user",{"_index":1558,"title":{},"body":{"classes/RouteRepository.html":{}}}],["uri",{"_index":1197,"title":{},"body":{"injectables/LiveUpdatesService.html":{},"injectables/OTPService.html":{}}}],["url",{"_index":454,"title":{},"body":{"injectables/DBUpdateService.html":{},"injectables/OTPService.html":{},"miscellaneous/variables.html":{}}}],["us.\"user_id\"='${user",{"_index":1854,"title":{},"body":{"classes/StopRepository.html":{}}}],["use",{"_index":1685,"title":{},"body":{"injectables/SavedService.html":{}}}],["usefactory",{"_index":115,"title":{},"body":{"modules/AppModule.html":{}}}],["useguards(jwtauthguard",{"_index":73,"title":{},"body":{"controllers/AppController.html":{},"controllers/BookingsController.html":{},"controllers/SavedController.html":{},"controllers/UserController.html":{}}}],["useguards(jwtauthguard)@get('profile",{"_index":29,"title":{},"body":{"controllers/AppController.html":{},"controllers/UserController.html":{}}}],["useguards(jwtauthguard)@header('content",{"_index":385,"title":{},"body":{"controllers/BookingsController.html":{},"controllers/SavedController.html":{}}}],["useguards(localauthguard",{"_index":67,"title":{},"body":{"controllers/AppController.html":{},"controllers/UserController.html":{}}}],["useguards(localauthguard)@header('content",{"_index":33,"title":{},"body":{"controllers/AppController.html":{},"controllers/UserController.html":{}}}],["usepipes(validationpipe",{"_index":55,"title":{},"body":{"controllers/AppController.html":{},"controllers/UserController.html":{}}}],["user",{"_index":15,"title":{"entities/User.html":{}},"body":{"controllers/AppController.html":{},"injectables/AuthService.html":{},"injectables/LocalStrategy.html":{},"entities/Route.html":{},"classes/RouteRepository.html":{},"injectables/RouteService.html":{},"injectables/SavedService.html":{},"classes/StopRepository.html":{},"injectables/StopService.html":{},"entities/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserRepository.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["user.email",{"_index":231,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.name",{"_index":232,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.password",{"_index":225,"title":{},"body":{"injectables/AuthService.html":{}}}],["user/entities/user.entity",{"_index":46,"title":{},"body":{"controllers/AppController.html":{}}}],["user/services/user.service",{"_index":48,"title":{},"body":{"controllers/AppController.html":{}}}],["user/user.module",{"_index":97,"title":{},"body":{"modules/AppModule.html":{}}}],["user_id",{"_index":253,"title":{},"body":{"entities/Booking.html":{},"injectables/BookingRepository.html":{},"entities/User.html":{},"injectables/UserRepository.html":{},"entities/UserRoute.html":{},"entities/UserStop.html":{}}}],["usercontroller",{"_index":2122,"title":{"controllers/UserController.html":{}},"body":{"controllers/UserController.html":{},"coverage.html":{}}}],["userid",{"_index":1028,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["usermodule",{"_index":87,"title":{"modules/UserModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UserModule.html":{},"modules.html":{},"overview.html":{}}}],["username",{"_index":2368,"title":{},"body":{"miscellaneous/variables.html":{}}}],["usernamefield",{"_index":1241,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["userrepo",{"_index":2150,"title":{},"body":{"injectables/UserRepository.html":{}}}],["userrepository",{"_index":1669,"title":{"injectables/UserRepository.html":{}},"body":{"injectables/SavedService.html":{},"modules/UserModule.html":{},"injectables/UserRepository.html":{},"injectables/UserService.html":{},"coverage.html":{},"overview.html":{}}}],["userroute",{"_index":2141,"title":{"entities/UserRoute.html":{}},"body":{"modules/UserModule.html":{},"injectables/UserRepository.html":{},"entities/UserRoute.html":{},"coverage.html":{}}}],["userservice",{"_index":47,"title":{"injectables/UserService.html":{}},"body":{"controllers/AppController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"overview.html":{}}}],["usersservice",{"_index":203,"title":{},"body":{"injectables/AuthService.html":{}}}],["userstop",{"_index":2138,"title":{"entities/UserStop.html":{}},"body":{"modules/UserModule.html":{},"injectables/UserRepository.html":{},"injectables/UserService.html":{},"entities/UserStop.html":{},"coverage.html":{}}}],["utils",{"_index":551,"title":{},"body":{"controllers/DBupdateController.html":{},"miscellaneous/variables.html":{}}}],["v",{"_index":1794,"title":{},"body":{"classes/SingleRouteStrategy.html":{},"classes/Vertex.html":{}}}],["v.lat",{"_index":918,"title":{},"body":{"classes/Itinerary.html":{},"classes/Leg.html":{},"classes/Plan.html":{},"classes/Step.html":{},"classes/Vertex.html":{}}}],["v.lon",{"_index":917,"title":{},"body":{"classes/Itinerary.html":{},"classes/Leg.html":{},"classes/Plan.html":{},"classes/Step.html":{},"classes/Vertex.html":{}}}],["v.name",{"_index":916,"title":{},"body":{"classes/Itinerary.html":{},"classes/Leg.html":{},"classes/Plan.html":{},"classes/Step.html":{},"classes/Vertex.html":{}}}],["v.stopcode",{"_index":922,"title":{},"body":{"classes/Itinerary.html":{},"classes/Leg.html":{},"classes/Plan.html":{},"classes/Step.html":{},"classes/Vertex.html":{}}}],["v.stopindex",{"_index":925,"title":{},"body":{"classes/Itinerary.html":{},"classes/Leg.html":{},"classes/Plan.html":{},"classes/Step.html":{},"classes/Vertex.html":{}}}],["v.stopsequence",{"_index":927,"title":{},"body":{"classes/Itinerary.html":{},"classes/Leg.html":{},"classes/Plan.html":{},"classes/Step.html":{},"classes/Vertex.html":{}}}],["v.vertextype",{"_index":920,"title":{},"body":{"classes/Itinerary.html":{},"classes/Leg.html":{},"classes/Plan.html":{},"classes/Step.html":{},"classes/Vertex.html":{}}}],["validate",{"_index":1014,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["validate(email",{"_index":1237,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["validate(payload",{"_index":1016,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["validateuser",{"_index":199,"title":{},"body":{"injectables/AuthService.html":{}}}],["validateuser(email",{"_index":214,"title":{},"body":{"injectables/AuthService.html":{}}}],["validator",{"_index":448,"title":{},"body":{"classes/CreateUserDto.html":{},"entities/User.html":{},"dependencies.html":{}}}],["value",{"_index":474,"title":{},"body":{"injectables/DBUpdateService.html":{},"classes/Leg.html":{},"injectables/LiveUpdatesService.html":{},"classes/OTPParams.html":{},"injectables/OTPService.html":{},"classes/TransitGateWay.html":{},"classes/Trip-1.html":{},"injectables/TripRepository.html":{},"injectables/TripService.html":{},"classes/UpdateTrips.html":{},"miscellaneous/variables.html":{}}}],["values(data",{"_index":855,"title":{},"body":{"classes/IGenericRepository.html":{}}}],["var",{"_index":884,"title":{},"body":{"classes/Itinerary.html":{},"classes/Leg.html":{},"controllers/LiveUpdatesController.html":{},"classes/Plan.html":{},"classes/Step.html":{},"classes/Vertex.html":{}}}],["varchar",{"_index":256,"title":{},"body":{"entities/Booking.html":{},"entities/Line.html":{},"entities/LiveData.html":{},"entities/NewSchedule.html":{},"entities/Point.html":{},"entities/Route.html":{},"entities/RouteStop.html":{},"entities/Schedule.html":{},"entities/Stop.html":{},"entities/Trip.html":{},"entities/User.html":{},"entities/UserRoute.html":{},"entities/UserStop.html":{}}}],["variable",{"_index":2219,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":2357,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["vehicle",{"_index":751,"title":{},"body":{"interfaces/FeedEntity.html":{},"interfaces/FeedHeader.html":{},"interfaces/FeedMessage.html":{},"interfaces/Long.html":{},"interfaces/Position.html":{},"classes/PositionProto.html":{},"interfaces/TripDescriptor.html":{},"interfaces/VehicleDescriptor.html":{},"interfaces/VehiclePosition.html":{}}}],["vehiclecode",{"_index":131,"title":{},"body":{"classes/ArrivalDto.html":{},"entities/LiveData.html":{}}}],["vehicledescriptor",{"_index":768,"title":{"interfaces/VehicleDescriptor.html":{}},"body":{"interfaces/FeedEntity.html":{},"interfaces/FeedHeader.html":{},"interfaces/FeedMessage.html":{},"controllers/LiveUpdatesController.html":{},"interfaces/Long.html":{},"interfaces/Position.html":{},"classes/PositionProto.html":{},"interfaces/TripDescriptor.html":{},"interfaces/VehicleDescriptor.html":{},"interfaces/VehiclePosition.html":{},"coverage.html":{}}}],["vehiclelat",{"_index":1117,"title":{},"body":{"entities/LiveData.html":{}}}],["vehiclelng",{"_index":1118,"title":{},"body":{"entities/LiveData.html":{}}}],["vehicleposition",{"_index":752,"title":{"interfaces/VehiclePosition.html":{}},"body":{"interfaces/FeedEntity.html":{},"interfaces/FeedHeader.html":{},"interfaces/FeedMessage.html":{},"controllers/LiveUpdatesController.html":{},"interfaces/Long.html":{},"interfaces/Position.html":{},"classes/PositionProto.html":{},"interfaces/TripDescriptor.html":{},"interfaces/VehicleDescriptor.html":{},"interfaces/VehiclePosition.html":{},"coverage.html":{}}}],["version",{"_index":2354,"title":{},"body":{"properties.html":{}}}],["vertex",{"_index":911,"title":{"classes/Vertex.html":{}},"body":{"classes/Itinerary.html":{},"classes/Leg.html":{},"injectables/OTPService.html":{},"classes/OTPStrategy.html":{},"classes/Plan.html":{},"classes/Step.html":{},"classes/Vertex.html":{},"coverage.html":{}}}],["vertex(leg.from",{"_index":1394,"title":{},"body":{"injectables/OTPService.html":{}}}],["vertex(leg.to",{"_index":1395,"title":{},"body":{"injectables/OTPService.html":{}}}],["vertex(plan.from",{"_index":1005,"title":{},"body":{"classes/Itinerary.html":{},"classes/Leg.html":{},"classes/Plan.html":{},"classes/Step.html":{},"classes/Vertex.html":{}}}],["vertex(plan.to",{"_index":1006,"title":{},"body":{"classes/Itinerary.html":{},"classes/Leg.html":{},"classes/Plan.html":{},"classes/Step.html":{},"classes/Vertex.html":{}}}],["vertex(s",{"_index":1401,"title":{},"body":{"injectables/OTPService.html":{}}}],["vertextype",{"_index":912,"title":{},"body":{"classes/Itinerary.html":{},"classes/Leg.html":{},"classes/Plan.html":{},"classes/Step.html":{},"classes/Vertex.html":{}}}],["void",{"_index":58,"title":{},"body":{"controllers/AppController.html":{},"injectables/AuthService.html":{},"injectables/BookingRepository.html":{},"injectables/BookingService.html":{},"classes/Context.html":{},"classes/IGenericRepository.html":{},"classes/Leg.html":{},"injectables/LineRepository.html":{},"injectables/LiveDataRepository.html":{},"injectables/LiveUpdatesService.html":{},"injectables/LocalStrategy.html":{},"classes/PointRepository.html":{},"classes/RouteRepository.html":{},"classes/RouteStopRepository.html":{},"injectables/SavedService.html":{},"classes/ScheduleRepository.html":{},"classes/StopRepository.html":{},"injectables/StopService.html":{},"classes/TransitGateWay.html":{},"classes/Trip-1.html":{},"injectables/TripRepository.html":{},"injectables/TripService.html":{},"injectables/TripUpdatesListener.html":{},"controllers/UserController.html":{},"injectables/UserRepository.html":{},"injectables/UserService.html":{}}}],["w9pv5bt6uep7vwwi",{"_index":476,"title":{},"body":{"injectables/DBUpdateService.html":{}}}],["waitingtime",{"_index":865,"title":{},"body":{"classes/Itinerary.html":{},"classes/Leg.html":{},"classes/Plan.html":{},"classes/Step.html":{},"classes/Vertex.html":{}}}],["walkdistance",{"_index":866,"title":{},"body":{"classes/Itinerary.html":{},"classes/Leg.html":{},"classes/Plan.html":{},"classes/Step.html":{},"classes/Vertex.html":{}}}],["walktime",{"_index":867,"title":{},"body":{"classes/Itinerary.html":{},"classes/Leg.html":{},"classes/Plan.html":{},"classes/Step.html":{},"classes/Vertex.html":{}}}],["watch",{"_index":2310,"title":{},"body":{"index.html":{}}}],["website",{"_index":2339,"title":{},"body":{"index.html":{}}}],["websocketgateway",{"_index":1943,"title":{},"body":{"classes/TransitGateWay.html":{}}}],["websocketgateway({cors",{"_index":1946,"title":{},"body":{"classes/TransitGateWay.html":{}}}],["websocketserver",{"_index":1932,"title":{},"body":{"classes/TransitGateWay.html":{}}}],["wheelchair",{"_index":1284,"title":{},"body":{"classes/OTPParams.html":{},"interfaces/TripState.html":{}}}],["wheelchair=${this.wheelchair",{"_index":1331,"title":{},"body":{"classes/OTPParams.html":{},"interfaces/TripState.html":{}}}],["where('\"stopcode",{"_index":2041,"title":{},"body":{"injectables/TripRepository.html":{}}}],["where(spec",{"_index":850,"title":{},"body":{"classes/IGenericRepository.html":{}}}],["where({user_id",{"_index":2177,"title":{},"body":{"injectables/UserRepository.html":{}}}],["withcredentials",{"_index":484,"title":{},"body":{"injectables/DBUpdateService.html":{},"injectables/LiveUpdatesService.html":{}}}],["year",{"_index":1340,"title":{},"body":{"classes/OTPParams.html":{},"interfaces/TripState.html":{}}}],["yes",{"_index":830,"title":{},"body":{"classes/IGenericRepository.html":{}}}],["you'd",{"_index":2329,"title":{},"body":{"index.html":{}}}],["zoom",{"_index":88,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/TransitModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"controllers/AppController.html":{"url":"controllers/AppController.html","title":"controller - AppController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AppController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.controller.ts\n        \n\n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                createUser\n                            \n                            \n                                    Public\n                                getProfile\n                            \n                            \n                                    Public\n                                    Async\n                                login\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        createUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    createUser(data: User)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('register')@UsePipes(ValidationPipe)\n                \n            \n\n            \n                \n                    Defined in src/app.controller.ts:17\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        getProfile\n                        \n                    \n                \n            \n            \n                \n                    \n                    getProfile(req: any)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard)@Get('profile')\n                \n            \n\n            \n                \n                    Defined in src/app.controller.ts:40\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        login\n                        \n                    \n                \n            \n            \n                \n                    \n                    login(req: any)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(LocalAuthGuard)@Header('Content-Type', 'application/json')@Post('login')@UsePipes(ValidationPipe)\n                \n            \n\n            \n                \n                    Defined in src/app.controller.ts:34\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        \nimport {Body,Controller,Get,Post,UseGuards,UsePipes,ValidationPipe,Request,Header} from '@nestjs/common';\nimport { AuthService } from 'src/auth/auth.service';\nimport { JwtAuthGuard } from 'src/auth/jwt-auth.guard';\nimport { LocalAuthGuard } from './auth/local-auth.guard';\nimport { User } from './user/entities/user.entity';\nimport { UserService } from './user/services/user.service';\n\n    \n@Controller()\nexport class AppController {\n\n    constructor(private userService: UserService, private auth: AuthService) {}\n      \n    @Post('register')\n    @UsePipes(ValidationPipe)\n    public async createUser(@Body() data: User): Promise {\n\n        const user: User | void = await this.userService.findUserByEmail(data.email);\n\n        if(user){\n            this.auth.throwError('email exists');\n        }else{\n            this.userService.createUser(data);\n            return this.auth.login(data);\n        }\n\n    }\n\n    @UseGuards(LocalAuthGuard)\n    @Header('Content-Type', 'application/json')\n    @Post('login')\n    @UsePipes(ValidationPipe)\n    public async login(@Request() req: any): Promise {\n        return this.auth.login(req.user);\n    }\n\n    @UseGuards(JwtAuthGuard)\n    @Get('profile')\n    public getProfile(@Request() req: any): Promise {\n        return req.user;\n    }\n    \n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nTransitModule\n\nTransitModule\n\nAppModule -->\n\nTransitModule->AppModule\n\n\n\n\n\nUserModule\n\nUserModule\n\nAppModule -->\n\nUserModule->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Controllers\n                    \n                        \n                            AppController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                        \n                            TransitModule\n                        \n                        \n                            UserModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { ConfigModule } from '@nestjs/config';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { UserModule } from './user/user.module';\nimport { DBconnectionProperties } from './configurations/config';\nimport { TransitModule } from './transit/transit.module';\nimport { TransitGateWay } from './socketsIO/transit.gateway';\nimport { AuthModule } from './auth/auth.module';\nimport { AppController } from './app.controller';\nimport { EventEmitterModule } from '@nestjs/event-emitter';\nimport { ScheduleModule } from '@nestjs/schedule';\n\n\n\n@Module({\n  imports: [\n    EventEmitterModule.forRoot(),\n    AuthModule,\n    UserModule,\n    TransitModule,\n    ScheduleModule.forRoot(),\n    ConfigModule.forRoot({isGlobal: true}),\n    TypeOrmModule.forRootAsync({\n      useFactory: () => (DBconnectionProperties)\n    }),\n  ],\n  controllers: [AppController],\n  providers: [],\n})\nexport class AppModule {\n  \n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ArrivalDto.html":{"url":"classes/ArrivalDto.html","title":"class - ArrivalDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ArrivalDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/transit/transitDtos/arrival.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                arrivalMins\n                            \n                            \n                                    Public\n                                arrivalSeconds\n                            \n                            \n                                    Public\n                                departureMins\n                            \n                            \n                                    Public\n                                departureSeconds\n                            \n                            \n                                    Public\n                                latitude\n                            \n                            \n                                    Public\n                                lineCode\n                            \n                            \n                                    Public\n                                longitude\n                            \n                            \n                                    Public\n                                occupancy\n                            \n                            \n                                    Public\n                                routeCode\n                            \n                            \n                                    Public\n                                routeName\n                            \n                            \n                                    Public\n                                vehicleCode\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \n                                Public\n                        constructor(arr: any)\n                    \n                \n                        \n                            \n                                Defined in src/transit/transitDtos/arrival.dto.ts:15\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        arr\n                                                  \n                                                        \n                                                                        any\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        arrivalMins\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/transit/transitDtos/arrival.dto.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        arrivalSeconds\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/transit/transitDtos/arrival.dto.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        departureMins\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/transit/transitDtos/arrival.dto.ts:5\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        departureSeconds\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/transit/transitDtos/arrival.dto.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        latitude\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/transit/transitDtos/arrival.dto.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        lineCode\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/transit/transitDtos/arrival.dto.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        longitude\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/transit/transitDtos/arrival.dto.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        occupancy\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/transit/transitDtos/arrival.dto.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        routeCode\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/transit/transitDtos/arrival.dto.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        routeName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/transit/transitDtos/arrival.dto.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        vehicleCode\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/transit/transitDtos/arrival.dto.ts:11\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Stop } from \"src/transit/entities/stop.entity\";\n\nexport class ArrivalDto{\n\n    public departureMins: number;\n    public departureSeconds: number;\n    public arrivalMins: number;\n    public arrivalSeconds: number;\n    public occupancy: number;\n    public routeCode: string;\n    public vehicleCode: string;\n    public routeName: string;\n    public lineCode: string;\n    public longitude: string;\n    public latitude: string;\n\n    public constructor(arr: any){\n        this.departureMins = arr.departureMins;\n        this.departureSeconds = arr.departureSeconds;\n        this.routeCode = arr.routeCode;\n        this.vehicleCode = arr.vehicleCode;\n        this.routeName = arr.routeName;\n        this.lineCode = arr.lineCode;\n        this.latitude = arr.latitude;\n        this.longitude = arr.longitude;\n        this.arrivalMins = -1;\n        this.arrivalSeconds = -1;\n    }\n\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_imports\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\n\nUserModule\n\nUserModule\n\n\n\nAuthModule\n\nAuthModule\n\nAuthModule -->\n\nUserModule->AuthModule\n\n\n\n\n\nAuthService \n\nAuthService \n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\nLocalStrategy\n\nLocalStrategy\n\nAuthModule -->\n\nLocalStrategy->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/auth/auth.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthService\n                        \n                        \n                            JwtStrategy\n                        \n                        \n                            LocalStrategy\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            UserModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            AuthService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { JwtModule } from '@nestjs/jwt';\nimport { PassportModule } from '@nestjs/passport/dist';\nimport { jwtConstants } from 'src/configurations/config';\nimport { UserService } from 'src/user/services/user.service';\nimport { UserModule } from 'src/user/user.module';\nimport { AuthService } from './auth.service';\nimport { JwtStrategy } from './jwt.strategy';\nimport { LocalStrategy } from './local.strategy';\n\n@Module({\n  imports: [\n    UserModule,\n    PassportModule, \n    JwtModule.register({\n      secret: jwtConstants.secret,\n      signOptions: { expiresIn: '36000s' },\n  })],\n  providers: [LocalStrategy, JwtStrategy, AuthService,],\n  exports: [AuthService]\n})\nexport class AuthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthService.html":{"url":"injectables/AuthService.html","title":"injectable - AuthService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                createUser\n                            \n                            \n                                    Public\n                                findUserByEmail\n                            \n                            \n                                    Public\n                                login\n                            \n                            \n                                    Public\n                                throwError\n                            \n                            \n                                    Public\n                                    Async\n                                validateUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(usersService: UserService, jwtService: JwtService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/auth.service.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        usersService\n                                                  \n                                                        \n                                                                        UserService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        createUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    createUser(user: User)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:14\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        findUserByEmail\n                        \n                    \n                \n            \n            \n                \n                    \n                    findUserByEmail(email: string)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:18\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        login\n                        \n                    \n                \n            \n            \n                \n                    \n                    login(user: any)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:34\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        throwError\n                        \n                    \n                \n            \n            \n                \n                    \n                    throwError(msg: string)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:44\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    msg\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        validateUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    validateUser(email: string, pass: string)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:22\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    pass\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { HttpStatus } from '@nestjs/common/enums';\nimport { HttpException } from '@nestjs/common/exceptions';\nimport { JwtService } from '@nestjs/jwt';\nimport { User } from 'src/user/entities/user.entity';\nimport { UserService } from 'src/user/services/user.service';\n\n\n@Injectable()\nexport class AuthService {\n\n  constructor(private usersService: UserService, private jwtService: JwtService ) {}\n\n  public createUser(user: User) {\n    this.usersService.createUser(user);\n  }\n     \n  public findUserByEmail(email: string): Promise {\n    return this.usersService.findUserByEmail(email);\n  }\n\n  public async validateUser(email: string, pass: string): Promise {\n    const user: User | void = await this.findUserByEmail(email);\n\n    if(user && user.password != pass){\n      this.throwError('wrong password');\n    }else if(user && user.password === pass){\n      return user;\n    }\n\n    this.throwError('wrong credentials')\n  }\n\n  public login(user: any) {\n\n    if(user.msg){\n      return user;\n    }\n\n    const payload = { email: user.email, name: user.name };\n    return { access_token: this.jwtService.sign(payload) };\n  }\n\n  public throwError(msg: string){\n    throw new HttpException({\n      status: HttpStatus.FORBIDDEN, error: msg\n    }, HttpStatus.FORBIDDEN);\n  }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Booking.html":{"url":"entities/Booking.html","title":"entity - Booking","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Booking\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/entities/booking.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                end\n                            \n                            \n                                    Public\n                                endStop\n                            \n                            \n                                    Public\n                                route\n                            \n                            \n                                    Public\n                                slug\n                            \n                            \n                                    Public\n                                start\n                            \n                            \n                                    Public\n                                startStop\n                            \n                            \n                                    Public\n                                stopCodes\n                            \n                            \n                                    Public\n                                travel\n                            \n                            \n                                    Public\n                                trip_id\n                            \n                            \n                                    Public\n                                user_id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        end\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({nullable: false, type: 'varchar'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/booking.entity.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        endStop\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryColumn({nullable: false, type: 'varchar'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/booking.entity.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        route\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({nullable: false, type: 'varchar'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/booking.entity.ts:25\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        slug\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({nullable: true, type: 'varchar'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/booking.entity.ts:28\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        start\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({nullable: false, type: 'varchar'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/booking.entity.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        startStop\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryColumn({nullable: false, type: 'varchar'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/booking.entity.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        stopCodes\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                    \n                        \n                                Defined in src/user/entities/booking.entity.ts:33\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        travel\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({nullable: true, type: 'varchar'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/booking.entity.ts:31\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        trip_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryColumn({nullable: false, type: 'bigint'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/booking.entity.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        user_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryColumn({nullable: false, type: 'varchar'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/booking.entity.ts:10\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Entity, PrimaryColumn, Column } from \"typeorm\";\n\n@Entity()\nexport class Booking{\n\n    @PrimaryColumn({nullable: false, type: 'bigint'})\n    public trip_id: number;\n\n    @PrimaryColumn({nullable: false, type: 'varchar'})\n    public user_id: string;\n\n    @PrimaryColumn({nullable: false, type: 'varchar'})\n    public startStop: string;\n\n    @PrimaryColumn({nullable: false, type: 'varchar'})\n    public endStop: string;\n    \n    @Column({nullable: false, type: 'varchar'})\n    public start: string;\n\n    @Column({nullable: false, type: 'varchar'})\n    public end: string;\n\n    @Column({nullable: false, type: 'varchar'})\n    public route: string;\n\n    @Column({nullable: true, type: 'varchar'})\n    public slug: string;\n\n    @Column({nullable: true, type: 'varchar'})\n    public travel: string;\n\n    public stopCodes: string[];\n\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/BookingRepository.html":{"url":"injectables/BookingRepository.html","title":"injectable - BookingRepository","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  BookingRepository\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/repositories/booking.repository.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        IGenericRepository\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                delete\n                            \n                            \n                                    Public\n                                    \n                                get\n                            \n                            \n                                    Public\n                                    \n                                insert\n                            \n                            \n                                    Public\n                                    \n                                insertOne\n                            \n                            \n                                    Public\n                                search\n                            \n                            \n                                    Protected\n                                deleteOne\n                            \n                            \n                                    Protected\n                                    Async\n                                getAll\n                            \n                            \n                                    Protected\n                                    Async\n                                getOne\n                            \n                            \n                                    Protected\n                                updateOne\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \n                                Public\n                        constructor(bookingRepo: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/repositories/booking.repository.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        bookingRepo\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        delete\n                        \n                    \n                \n            \n            \n                \n                    \n                    delete(user_id: string, trip_id: number, startStop: string, endStop: string)\n                \n            \n\n\n            \n                \n                    Defined in src/repositories/booking.repository.ts:26\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user_id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    trip_id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    startStop\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    endStop\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        \n                        get\n                        \n                    \n                \n            \n            \n                \n                    \n                    get(user_id: string)\n                \n            \n\n\n            \n                \n                    Inherited from         IGenericRepository\n\n                \n            \n            \n                \n                        Defined in         IGenericRepository:14\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user_id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        \n                        insert\n                        \n                    \n                \n            \n            \n                \n                    \n                    insert(data: Booking[])\n                \n            \n\n\n            \n                \n                    Inherited from         IGenericRepository\n\n                \n            \n            \n                \n                        Defined in         IGenericRepository:30\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                                Booking[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        \n                        insertOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    insertOne(booking: Booking)\n                \n            \n\n\n            \n                \n                    Inherited from         IGenericRepository\n\n                \n            \n            \n                \n                        Defined in         IGenericRepository:22\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    booking\n                                    \n                                                Booking\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        search\n                        \n                    \n                \n            \n            \n                \n                    \n                    search(trip_id: number, user_id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/repositories/booking.repository.ts:18\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    trip_id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user_id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Protected\n                        deleteOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteOne(spec: any)\n                \n            \n\n\n            \n                \n                    Inherited from         IGenericRepository\n\n                \n            \n            \n                \n                        Defined in         IGenericRepository:49\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    spec\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Protected\n                        Async\n                        getAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    getAll()\n                \n            \n\n\n            \n                \n                    Inherited from         IGenericRepository\n\n                \n            \n            \n                \n                        Defined in         IGenericRepository:11\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Protected\n                        Async\n                        getOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    getOne(spec: any)\n                \n            \n\n\n            \n                \n                    Inherited from         IGenericRepository\n\n                \n            \n            \n                \n                        Defined in         IGenericRepository:41\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    spec\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Protected\n                        updateOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateOne(spec: any, update: any)\n                \n            \n\n\n            \n                \n                    Inherited from         IGenericRepository\n\n                \n            \n            \n                \n                        Defined in         IGenericRepository:58\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    spec\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    update\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from \"@nestjs/common\";\nimport { InjectRepository } from \"@nestjs/typeorm\";\nimport { Repository, UpdateResult } from \"typeorm\";\nimport { IGenericRepository } from \"./generic.repository\";\nimport { Booking } from \"src/user/entities/booking.entity\";\n\n@Injectable()\nexport class BookingRepository extends IGenericRepository{\n\n    public constructor(@InjectRepository(Booking) bookingRepo: Repository){\n        super(bookingRepo);\n    }\n\n    public override get(user_id: string): Promise {\n        return super.get({user_id: user_id});\n    }\n\n    public search(trip_id: number, user_id: string): Promise{\n        return super.getOne({trip_id: trip_id, user_id: user_id});\n    }\n\n    public override insertOne(booking: Booking) {\n        return super.insertOne(booking);\n    }\n\n    public delete(user_id: string, trip_id: number, startStop: string, endStop: string) {\n        return super.deleteOne({trip_id: trip_id, user_id: user_id, startStop: startStop, endStop: endStop});\n    }\n\n    public override insert(data: Booking[]): Promise {\n        return super.insert(data);\n    }\n    \n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/BookingService.html":{"url":"injectables/BookingService.html","title":"injectable - BookingService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  BookingService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/services/booking.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                deleteBooking\n                            \n                            \n                                    Public\n                                    Async\n                                getBookings\n                            \n                            \n                                    Public\n                                    Async\n                                insertBooking\n                            \n                            \n                                    Private\n                                throwError\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(repo: BookingRepository, data: DataService, eventEmitter: EventEmitter2)\n                    \n                \n                        \n                            \n                                Defined in src/user/services/booking.service.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        repo\n                                                  \n                                                        \n                                                                        BookingRepository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        data\n                                                  \n                                                        \n                                                                        DataService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        eventEmitter\n                                                  \n                                                        \n                                                                    EventEmitter2\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        deleteBooking\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteBooking(booking: Booking)\n                \n            \n\n\n            \n                \n                    Defined in src/user/services/booking.service.ts:22\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    booking\n                                    \n                                                Booking\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        getBookings\n                        \n                    \n                \n            \n            \n                \n                    \n                    getBookings(email: string)\n                \n            \n\n\n            \n                \n                    Defined in src/user/services/booking.service.ts:18\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        insertBooking\n                        \n                    \n                \n            \n            \n                \n                    \n                    insertBooking(bookings: Booking[])\n                \n            \n\n\n            \n                \n                    Defined in src/user/services/booking.service.ts:28\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    bookings\n                                    \n                                                Booking[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        throwError\n                        \n                    \n                \n            \n            \n                \n                    \n                    throwError(msg: string)\n                \n            \n\n\n            \n                \n                    Defined in src/user/services/booking.service.ts:55\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    msg\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { HttpException, HttpStatus, Injectable } from '@nestjs/common';\nimport { BookingRepository } from 'src/repositories/booking.repository';\nimport { Trip } from '../../transit/entities/trip.entity';\nimport { EventEmitter2 } from '@nestjs/event-emitter';\nimport { UpdateTrips } from '../../transit/events/trips.update.event';\nimport { DataService } from 'src/transit/services/data.service';\nimport { Booking } from '../entities/booking.entity';\n\n@Injectable()\nexport class BookingService {\n\n    constructor(\n        private repo: BookingRepository, \n        private data: DataService,\n        private eventEmitter: EventEmitter2,\n    ) {}\n\n    public async getBookings(email: string): Promise{\n        return this.repo.get(email);\n    }\n\n    public async deleteBooking(booking: Booking){\n        this.repo.delete(booking.user_id, booking.trip_id, booking.startStop, booking.endStop);\n        this.eventEmitter.emit('booking.deleted', new UpdateTrips([booking], this.data, -1));\n        return {trip_ids: [booking.trip_id]};\n    }\n\n    public async insertBooking(bookings: Booking[]): Promise{\n\n        for (const booking of bookings) {\n            const res: Booking | void = await this.repo.search(booking.trip_id, booking.user_id);\n            if(res){\n                this.throwError('Trip already booked');\n            }\n        }\n\n        for (const booking of bookings) {\n            \n            const ids: number[] = booking.stopCodes.map(v => booking.trip_id);\n            const occupation: Trip[] = await this.data.trips.getOccupation(ids, booking.stopCodes);\n\n            for (const trip of occupation) {\n                if(+trip.occupied >= trip.totalSeats){\n                    this.throwError('No seats available');\n                }\n            }\n\n        }\n\n        await this.repo.insert(bookings);\n        this.eventEmitter.emit('trips.update', new UpdateTrips(bookings, this.data, 1));\n        return {trip_ids: bookings.map(b => b.trip_id)};\n    }\n\n    private throwError(msg: string){\n        throw new HttpException({\n          status: HttpStatus.FORBIDDEN, error: msg\n        }, HttpStatus.FORBIDDEN);\n    }\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/BookingsController.html":{"url":"controllers/BookingsController.html","title":"controller - BookingsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  BookingsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/controllers/bookings.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                bookings\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                deleteBooking\n                            \n                            \n                                    Public\n                                    Async\n                                getBookingPlan\n                            \n                            \n                                    Public\n                                    Async\n                                getBookings\n                            \n                            \n                                    Public\n                                    Async\n                                newBooking\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        deleteBooking\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteBooking(req: any)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard)@Header('Content-Type', 'application/json')@Post('/delete')\n                \n            \n\n            \n                \n                    Defined in src/user/controllers/bookings.controller.ts:24\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        getBookingPlan\n                        \n                    \n                \n            \n            \n                \n                    \n                    getBookingPlan(req: any)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard)@Header('Content-Type', 'application/json')@Post('/getPlan')\n                \n            \n\n            \n                \n                    Defined in src/user/controllers/bookings.controller.ts:38\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        getBookings\n                        \n                    \n                \n            \n            \n                \n                    \n                    getBookings(req: any)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard)@Header('Content-Type', 'application/json')@Get('/get')\n                \n            \n\n            \n                \n                    Defined in src/user/controllers/bookings.controller.ts:31\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        newBooking\n                        \n                    \n                \n            \n            \n                \n                    \n                    newBooking(req: any)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard)@Header('Content-Type', 'application/json')@Post('/new')\n                \n            \n\n            \n                \n                    Defined in src/user/controllers/bookings.controller.ts:17\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {Controller,Post,Header,UseGuards,Request, Get, Delete} from '@nestjs/common';\nimport { DataService } from 'src/transit/services/data.service';\nimport { JwtAuthGuard } from 'src/auth/jwt-auth.guard';\nimport { Plan } from 'src/transit/transitDtos/itinerary.dto';\nimport { BookingService } from '../services/booking.service';\nimport { Booking } from '../entities/booking.entity';\n\n\n@Controller('bookings')\nexport class BookingsController {\n\n    constructor(private data: DataService, private bookings: BookingService) {}\n\n    @UseGuards(JwtAuthGuard)\n    @Header('Content-Type', 'application/json')\n    @Post('/new')\n    public async newBooking(@Request() req: any): Promise {\n        return this.bookings.insertBooking(req.body);\n    }\n\n    @UseGuards(JwtAuthGuard)\n    @Header('Content-Type', 'application/json')\n    @Post('/delete')\n    public async deleteBooking(@Request() req: any): Promise {\n        return this.bookings.deleteBooking(req.body);\n    }\n\n    @UseGuards(JwtAuthGuard)\n    @Header('Content-Type', 'application/json')\n    @Get('/get')\n    public async getBookings(@Request() req: any): Promise {\n        return this.bookings.getBookings(req.user.email);\n    }\n\n    @UseGuards(JwtAuthGuard)\n    @Header('Content-Type', 'application/json')\n    @Post('/getPlan')\n    public async getBookingPlan(@Request() req: any): Promise {\n        return this.data.otp.getBookingPlan(req.body.data);\n    }\n\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Context.html":{"url":"classes/Context.html","title":"class - Context","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Context\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/transit/Navigator/context.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                http\n                            \n                            \n                                    Private\n                                repository\n                            \n                            \n                                    Private\n                                strategy\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                execute\n                            \n                            \n                                    Public\n                                setStrategy\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        http\n                        \n                    \n                \n            \n                \n                    \n                        Type :     HttpService\n\n                    \n                \n                    \n                        \n                                Defined in src/transit/Navigator/context.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        repository\n                        \n                    \n                \n            \n                \n                    \n                        Type :         IGenericRepository\n\n                    \n                \n                    \n                        \n                                Defined in src/transit/Navigator/context.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        strategy\n                        \n                    \n                \n            \n                \n                    \n                        Type :         NavigatorStrategy\n\n                    \n                \n                    \n                        \n                                Defined in src/transit/Navigator/context.ts:9\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        execute\n                        \n                    \n                \n            \n            \n                \n                    \n                    execute(tripState: TripState)\n                \n            \n\n\n            \n                \n                    Defined in src/transit/Navigator/context.ts:13\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    tripState\n                                    \n                                                TripState\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        setStrategy\n                        \n                    \n                \n            \n            \n                \n                    \n                    setStrategy(strategy: NavigatorStrategy, repository: IGenericRepository, http: HttpService)\n                \n            \n\n\n            \n                \n                    Defined in src/transit/Navigator/context.ts:17\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    strategy\n                                    \n                                                NavigatorStrategy\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    repository\n                                    \n                                                IGenericRepository\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    http\n                                    \n                                            HttpService\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { HttpService } from \"@nestjs/axios\";\nimport { TripState } from \"src/transit/transitDtos/trip.state\";\nimport { Repository } from \"typeorm\";\nimport { IGenericRepository } from \"../../repositories/generic.repository\";\nimport { NavigatorStrategy } from \"./navigatorStrategy\";\n\nexport class Context{\n\n    private strategy: NavigatorStrategy;\n    private repository: IGenericRepository;\n    private http: HttpService;\n\n    public execute(tripState: TripState) {\n        return this.strategy.buildRoute(tripState, this.repository, this.http);\n    }\n\n    public setStrategy(strategy: NavigatorStrategy, repository: IGenericRepository, http: HttpService){\n        this.strategy = strategy;\n        this.repository = repository;\n        this.http = http;\n    }\n\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateUserDto.html":{"url":"classes/CreateUserDto.html","title":"class - CreateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/dto/user.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                email\n                            \n                            \n                                    Public\n                                name\n                            \n                            \n                                    Public\n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsEmail()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dto/user.dto.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@MinLength(2)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dto/user.dto.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@MinLength(8)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dto/user.dto.ts:7\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsEmail, IsNotEmpty, MinLength } from \"class-validator\";\n\nexport class CreateUserDto {\n\n    @IsNotEmpty()\n    @MinLength(8)\n    public password: string;\n\n    @IsNotEmpty()\n    @IsEmail()\n    public email: string;\n\n    @IsNotEmpty()\n    @MinLength(2)\n    public name: string;\n    \n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/DBUpdateService.html":{"url":"injectables/DBUpdateService.html","title":"injectable - DBUpdateService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  DBUpdateService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/transit/services/db.update.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                token\n                            \n                            \n                                    Private\n                                url\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                getLines\n                            \n                            \n                                    Public\n                                    Async\n                                getRouteInfo\n                            \n                            \n                                    Public\n                                    Async\n                                getRoutePoints\n                            \n                            \n                                    Public\n                                    Async\n                                getRoutes\n                            \n                            \n                                    Public\n                                    Async\n                                getRouteTrips\n                            \n                            \n                                    Public\n                                    Async\n                                getStops\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(http: HttpService)\n                    \n                \n                        \n                            \n                                Defined in src/transit/services/db.update.service.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        http\n                                                  \n                                                        \n                                                                    HttpService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        getLines\n                        \n                    \n                \n            \n            \n                \n                    \n                    getLines()\n                \n            \n\n\n            \n                \n                    Defined in src/transit/services/db.update.service.ts:13\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     unknown\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        getRouteInfo\n                        \n                    \n                \n            \n            \n                \n                    \n                    getRouteInfo(code: string)\n                \n            \n\n\n            \n                \n                    Defined in src/transit/services/db.update.service.ts:31\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    code\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        getRoutePoints\n                        \n                    \n                \n            \n            \n                \n                    \n                    getRoutePoints(code: string)\n                \n            \n\n\n            \n                \n                    Defined in src/transit/services/db.update.service.ts:37\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    code\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        getRoutes\n                        \n                    \n                \n            \n            \n                \n                    \n                    getRoutes()\n                \n            \n\n\n            \n                \n                    Defined in src/transit/services/db.update.service.ts:25\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     unknown\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        getRouteTrips\n                        \n                    \n                \n            \n            \n                \n                    \n                    getRouteTrips(code: string)\n                \n            \n\n\n            \n                \n                    Defined in src/transit/services/db.update.service.ts:43\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    code\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        getStops\n                        \n                    \n                \n            \n            \n                \n                    \n                    getStops()\n                \n            \n\n\n            \n                \n                    Defined in src/transit/services/db.update.service.ts:19\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     unknown\n\n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        token\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE2NzM0MzMwNjN9.oviHabOmnHxFzHyykmeF5-W9pv5bT6UeP7vWwI-IzEY'\n                    \n                \n                    \n                        \n                                Defined in src/transit/services/db.update.service.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        url\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'https://rest.citybus.gr/api/v1/el/106/'\n                    \n                \n                    \n                        \n                                Defined in src/transit/services/db.update.service.ts:9\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { HttpService } from '@nestjs/axios';\nimport { Injectable } from '@nestjs/common';\nimport { lastValueFrom } from 'rxjs';\n\n@Injectable()\nexport class DBUpdateService {\n\n    private token: string = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE2NzM0MzMwNjN9.oviHabOmnHxFzHyykmeF5-W9pv5bT6UeP7vWwI-IzEY';\n    private url: string = 'https://rest.citybus.gr/api/v1/el/106/';\n\n    constructor(private http: HttpService){}\n\n    public async getLines(){\n        return await lastValueFrom(this.http.get(this.url + 'lines', {withCredentials: false, headers:{\n            Authorization: 'Bearer ' + this.token,\n        }})).catch(e => console.log(e.code));\n    }\n\n    public async getStops(){\n        return await lastValueFrom(this.http.get(this.url + 'stops', {withCredentials: false, headers:{\n            Authorization: 'Bearer ' + this.token,\n        }})).catch(e => console.log(e.code));\n    }\n\n    public async getRoutes(){\n        return await lastValueFrom(this.http.get(this.url + 'routes', {withCredentials: false, headers:{\n            Authorization: 'Bearer ' + this.token,\n        }})).catch(e => console.log(e.code));\n    }\n\n    public async getRouteInfo(code: string){\n        return await lastValueFrom(this.http.get(this.url + 'routes/' + code, {withCredentials: false, headers:{\n            Authorization: 'Bearer ' + this.token,\n        }})).catch(e => console.log(e.code));\n    }\n\n    public async getRoutePoints(code: string){\n        return await lastValueFrom(this.http.get(this.url + `routes/${code}/points/`, {withCredentials: false, headers:{\n            Authorization: 'Bearer ' + this.token,\n        }})).catch(e => console.log(e.code));\n    }\n\n    public async getRouteTrips(code: string){\n        return await lastValueFrom(this.http.get(this.url + `trips/route/${code}`, {withCredentials: false, headers:{\n            Authorization: 'Bearer ' + this.token,\n        }})).catch(e => console.log(e.code));\n    }\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/DBupdateController.html":{"url":"controllers/DBupdateController.html","title":"controller - DBupdateController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  DBupdateController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/transit/controllers/db.update.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                update\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                fixSchedule\n                            \n                            \n                                    Public\n                                    Async\n                                newSchedules\n                            \n                            \n                                    Public\n                                    Async\n                                populate\n                            \n                            \n                                    Public\n                                    Async\n                                populateLines\n                            \n                            \n                                    Public\n                                    Async\n                                populatePaths\n                            \n                            \n                                    Public\n                                    Async\n                                populateRoutes\n                            \n                            \n                                    Public\n                                    Async\n                                populateStops\n                            \n                            \n                                    Public\n                                    Async\n                                populateStopsRoute\n                            \n                            \n                                    Public\n                                    Async\n                                populateTrips\n                            \n                            \n                                    Private\n                                r\n                            \n                            \n                                    Private\n                                sleep\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        fixSchedule\n                        \n                    \n                \n            \n            \n                \n                    \n                    fixSchedule()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/fix')\n                \n            \n\n            \n                \n                    Defined in src/transit/controllers/db.update.controller.ts:167\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        newSchedules\n                        \n                    \n                \n            \n            \n                \n                    \n                    newSchedules()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/newSchedule')\n                \n            \n\n            \n                \n                    Defined in src/transit/controllers/db.update.controller.ts:254\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        populate\n                        \n                    \n                \n            \n            \n                \n                    \n                    populate()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/populateTrips')\n                \n            \n\n            \n                \n                    Defined in src/transit/controllers/db.update.controller.ts:231\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        populateLines\n                        \n                    \n                \n            \n            \n                \n                    \n                    populateLines()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/lines')@Header('Content-Type', 'application/json')\n                \n            \n\n            \n                \n                    Defined in src/transit/controllers/db.update.controller.ts:24\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     unknown\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        populatePaths\n                        \n                    \n                \n            \n            \n                \n                    \n                    populatePaths()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/routePaths')@Header('Content-Type', 'application/json')\n                \n            \n\n            \n                \n                    Defined in src/transit/controllers/db.update.controller.ts:93\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     unknown\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        populateRoutes\n                        \n                    \n                \n            \n            \n                \n                    \n                    populateRoutes()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/routes')@Header('Content-Type', 'application/json')\n                \n            \n\n            \n                \n                    Defined in src/transit/controllers/db.update.controller.ts:47\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     unknown\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        populateStops\n                        \n                    \n                \n            \n            \n                \n                    \n                    populateStops()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/stops')@Header('Content-Type', 'application/json')\n                \n            \n\n            \n                \n                    Defined in src/transit/controllers/db.update.controller.ts:70\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     unknown\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        populateStopsRoute\n                        \n                    \n                \n            \n            \n                \n                    \n                    populateStopsRoute()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/routeStops')@Header('Content-Type', 'application/json')\n                \n            \n\n            \n                \n                    Defined in src/transit/controllers/db.update.controller.ts:116\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     unknown\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        populateTrips\n                        \n                    \n                \n            \n            \n                \n                    \n                    populateTrips()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/updateTrips')@Header('Content-Type', 'application/json')\n                \n            \n\n            \n                \n                    Defined in src/transit/controllers/db.update.controller.ts:143\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        r\n                        \n                    \n                \n            \n            \n                \n                    \n                    r(min: number, max: number)\n                \n            \n\n\n            \n                \n                    Defined in src/transit/controllers/db.update.controller.ts:266\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    min\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    max\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        sleep\n                        \n                    \n                \n            \n            \n                \n                    \n                    sleep(duration: number)\n                \n            \n\n\n            \n                \n                    Defined in src/transit/controllers/db.update.controller.ts:262\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    duration\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Header } from '@nestjs/common';\nimport { DBUpdateService } from '../services/db.update.service';\nimport { Route } from '../entities/route.entity';\nimport { Schedule } from '../entities/schedule.entity';\nimport { DataService } from '../services/data.service';\nimport { Trip } from '../entities/trip.entity';\nimport { Line } from '../entities/line.entity';\nimport { Stop } from '../entities/stop.entity';\nimport { RouteStop } from '../entities/routeStops.entity';\nimport { Point } from '../entities/point.entity';\nimport { NewSchedule } from '../entities/newSchedule.entity';\nconst greekUtils = require('greek-utils');\n\n@Controller('update')\nexport class DBupdateController {\n\n    constructor(\n\t\tprivate data: DataService,\n        private db: DBUpdateService\n\t){}\n\n    @Get('/lines')\n    @Header('Content-Type', 'application/json')\n    public async populateLines(){\n\n        const request = await this.db.getLines();\n        const lines: Line[] = [];\n\n        for (const line of request.data) {\n            const newLine = new Line();\n            newLine.id = line.id;\n            newLine.name = line.code;\n            newLine.routesNumber = line.routes.length;\n            newLine.desc = line.name;\n            newLine.desc_eng = greekUtils.toGreeklish(line.name); \n            newLine.routeCodes = line.routes.map((route: any) => route.code);\n            lines.push(newLine);       \n        }\n\n        await this.data.lines.insert(lines);\n\n        return 'ok';\n    }\n\n    @Get('/routes')\n    @Header('Content-Type', 'application/json')\n    public async populateRoutes(){\n\n        const request = await this.db.getRoutes();\n        const routes: Route[] = [];\n\n        for (const route of request.data) {\n            const newRoute: Route = new Route();\n            newRoute.code = route.code;\n            newRoute.id = route.id;\n            newRoute.desc = route.name;\n            newRoute.desc_eng = greekUtils.toGreeklish(route.name);\n            newRoute.lineId = route.lines[0].id;\n            newRoute.direction = route.direction;\n            routes.push(newRoute);\n        }\n\n        await this.data.routes.insert(routes);\n\n        return 'ok';\n    }\n\n    @Get('/stops')\n    @Header('Content-Type', 'application/json')\n    public async populateStops(){\n\n        const request = await this.db.getStops();\n        const stops: Stop[] = [];\n        \n        for (const stop of request.data) {\n            const newStop: Stop = new Stop();\n            newStop.code = stop.code;\n            newStop.id = stop.id;\n            newStop.desc = stop.name;\n            newStop.desc_eng = greekUtils.toGreeklish(stop.name);\n            newStop.latitude = stop.latitude;\n            newStop.longitude = stop.longitude;\n            newStop.lines = stop.lineCodes;\n            stops.push(newStop);\n        }\n\n        await this.data.stops.insert(stops);\n        return 'ok';\n    }\n\n    @Get('/routePaths')\n    @Header('Content-Type', 'application/json')\n    public async populatePaths(){\n\n        const routes: Route[] = await this.data.routes.getRoutes();\n\n        for (const route of routes) {\n\n            const infoprom = await this.db.getRoutePoints(route.code);\n            const points: Point[] = [];\n            \n            for (const point of infoprom.data) {\n                const newPoint: Point = {...point};\n                newPoint.routeCode = route.code;\n                points.push(newPoint);\n            }\n\n            await this.data.points.insert(points);\n        }\n        \n        return 'ok';\n    }\n\n    @Get('/routeStops')\n    @Header('Content-Type', 'application/json')\n    public async populateStopsRoute(){\n\n        const routes: Route[] = await this.data.routes.getRoutes();\n\n        for (const route of routes) {\n\n            const infoprom = await this.db.getRouteInfo(route.code);\n            const stopCodes: string[] = [];\n            const rss: RouteStop[] = [];\n\n            for (const stop of infoprom.data.stops) {\n                const rs: RouteStop = new RouteStop();\n                rs.routeCode = route.code;\n                rs.stopCode = stop.code;\n                rss.push(rs);\n                stopCodes.push(stop.code);\n            }\n\n            await this.data.routes.insertStopCodes(stopCodes, route.code);\n            await this.data.rs.insert(rss);\n        }\n        \n        return 'ok';\n    }\n\n    @Get('/updateTrips')\n    @Header('Content-Type', 'application/json')\n    public async populateTrips(): Promise{\n\n        const routes: Route[] = await this.data.routes.getRoutes();\n\n        for (const route of routes) {\n            const tripsPromise = await this.db.getRouteTrips(route.code);\n            if(tripsPromise){\n                const trips: Schedule[] = [];\n                for (const trip of tripsPromise.data) {\n                    let new_trip: Schedule = new Schedule();\n                    new_trip = {...trip};\n                    new_trip.line = trip.lineCode;\n                    new_trip.trip_id = trip.id;\n                    trips.push(new_trip);\n                }\n\n                await this.data.schedule.insertTrips(trips);\n            }\n        }\n\n        return 'ok';\n    }\n\n    @Get('/fix')\n    public async fixSchedule(): Promise{\n\n        const ids: any[] = await this.data.schedule.getIds();\n\n        let i = 0;\n        for (const id of ids) {\n\n            const trip: Schedule[] = await this.data.schedule.getTripOne(+id.trip_id);\n            const stops: Stop[] = await this.data.stops.getRouteStops(trip[0].routeCode);\n            const new_trip: Schedule[] = trip.map(t => ({...t}));\n            const times: number[] = [];\n\n            for (let i = 0; i  0){\n                let minute = new_trip[0].tripTimeMinute;\n                let hour = new_trip[0].tripTimeHour;\n                for (let i = 1; i = times.length){\n                        minute += times[i - 2];\n                    }else{\n                        minute += times[i - 1];\n                    }\n\n                    if(minute > 59){\n                        minute = minute - 60;\n                        hour++;\n                    }\n\n                    let arrival: string = '' + minute;\n                    if(minute {\n        const schedules: Schedule[] = await this.data.schedule.getAll();\n        const trips: Trip[] = [];\n\n        for (const sch of schedules) {\n            const trip: Trip = new Trip();\n            trip.debarkation = 0;\n            trip.embarkation = 0;\n            trip.occupied = 0;\n            trip.stopCode = sch.stopCode;\n            trip.totalSeats = 50;\n            trip.trip_id = sch.trip_id;\n            trip.id = sch.id;\n            trip.routeCode = sch.routeCode;\n            trip.time = sch.tripTime;\n            trips.push(trip);\n        }\n\n        await this.data.trips.insertTrips(trips);\n        return 'ok';\n    }\n\n    @Get('/newSchedule')\n    public async newSchedules(): Promise{\n\n        const schedules: NewSchedule[] = await this.data.ns.getAll();\n        await this.data.schedule.insertTrips(schedules);\n\n        return 'ok';\n    }\n\n    private sleep(duration: number): Promise{\n        return new Promise((resolve) => setTimeout(resolve, duration));\n    }\n\n    private r(min: number, max: number) {\n        min = Math.ceil(min);\n        max = Math.floor(max);\n        return Math.floor(Math.random() * (max - min) + min); // The maximum is exclusive and the minimum is inclusive\n      }\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/DataService.html":{"url":"injectables/DataService.html","title":"injectable - DataService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  DataService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/transit/services/data.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                live\n                            \n                            \n                                    Public\n                                ns\n                            \n                        \n                    \n                \n\n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    lines\n                                \n                                \n                                    routes\n                                \n                                \n                                    stops\n                                \n                                \n                                    schedule\n                                \n                                \n                                    points\n                                \n                                \n                                    trips\n                                \n                                \n                                    otp\n                                \n                                \n                                    rs\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(linesService: LineService, routesService: RouteService, stopsService: StopService, schSerivce: ScheduleService, pointService: PointService, tripService: TripService, otpService: OTPService, rsService: RouteStopService, ns: NewScheduleService, live: LiveDataRepository)\n                    \n                \n                        \n                            \n                                Defined in src/transit/services/data.service.ts:14\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        linesService\n                                                  \n                                                        \n                                                                        LineService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        routesService\n                                                  \n                                                        \n                                                                        RouteService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        stopsService\n                                                  \n                                                        \n                                                                        StopService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        schSerivce\n                                                  \n                                                        \n                                                                        ScheduleService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        pointService\n                                                  \n                                                        \n                                                                        PointService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        tripService\n                                                  \n                                                        \n                                                                        TripService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        otpService\n                                                  \n                                                        \n                                                                        OTPService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        rsService\n                                                  \n                                                        \n                                                                        RouteStopService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        ns\n                                                  \n                                                        \n                                                                        NewScheduleService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        live\n                                                  \n                                                        \n                                                                        LiveDataRepository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        live\n                        \n                    \n                \n            \n                \n                    \n                        Type :         LiveDataRepository\n\n                    \n                \n                    \n                        \n                                Defined in src/transit/services/data.service.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        ns\n                        \n                    \n                \n            \n                \n                    \n                        Type :         NewScheduleService\n\n                    \n                \n                    \n                        \n                                Defined in src/transit/services/data.service.ts:25\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        lines\n                    \n                \n\n                \n                    \n                        getlines()\n                    \n                \n                            \n                                \n                                    Defined in src/transit/services/data.service.ts:29\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        routes\n                    \n                \n\n                \n                    \n                        getroutes()\n                    \n                \n                            \n                                \n                                    Defined in src/transit/services/data.service.ts:33\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        stops\n                    \n                \n\n                \n                    \n                        getstops()\n                    \n                \n                            \n                                \n                                    Defined in src/transit/services/data.service.ts:37\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        schedule\n                    \n                \n\n                \n                    \n                        getschedule()\n                    \n                \n                            \n                                \n                                    Defined in src/transit/services/data.service.ts:41\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        points\n                    \n                \n\n                \n                    \n                        getpoints()\n                    \n                \n                            \n                                \n                                    Defined in src/transit/services/data.service.ts:45\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        trips\n                    \n                \n\n                \n                    \n                        gettrips()\n                    \n                \n                            \n                                \n                                    Defined in src/transit/services/data.service.ts:49\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        otp\n                    \n                \n\n                \n                    \n                        getotp()\n                    \n                \n                            \n                                \n                                    Defined in src/transit/services/data.service.ts:53\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        rs\n                    \n                \n\n                \n                    \n                        getrs()\n                    \n                \n                            \n                                \n                                    Defined in src/transit/services/data.service.ts:57\n                                \n                            \n\n            \n        \n\n    \n\n\n    \n        import { Injectable } from \"@nestjs/common\";\nimport { LineService } from \"./line.service\";\nimport { PointService } from \"./points.service\";\nimport { RouteService } from \"./routes.service\";\nimport { ScheduleService } from \"./schedule.service\";\nimport { StopService } from \"./stop.service\";\nimport { TripService } from \"./trip.service\";\nimport { OTPService } from \"./otp.service\";\nimport { RouteStopService } from \"./routeStop.service\";\nimport { NewScheduleService } from \"./newSchedule.service\";\nimport { LiveDataRepository } from \"src/repositories/liveData.repository\";\n\n@Injectable()\nexport class DataService{\n\n    constructor(\n        private linesService: LineService,\n        private routesService: RouteService,\n        private stopsService: StopService,\n        private schSerivce: ScheduleService,\n        private pointService: PointService,\n        private tripService: TripService,\n        private otpService: OTPService,\n        private rsService: RouteStopService,\n        public ns: NewScheduleService,\n        public live: LiveDataRepository\n    ){}\n\n    public get lines(): LineService{\n        return this.linesService;\n    }\n\n    public get routes(): RouteService{\n        return this.routesService;\n    }\n\n    public get stops(): StopService{\n        return this.stopsService;\n    }\n\n    public get schedule(): ScheduleService{\n        return this.schSerivce;\n    }\n\n    public get points(): PointService{\n        return this.pointService;\n    }\n\n    public get trips(): TripService{\n        return this.tripService;\n    }\n\n    public get otp(): OTPService{\n        return this.otpService;\n    }\n\n    public get rs(): RouteStopService{\n        return this.rsService;\n    }\n\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/FeedEntity.html":{"url":"interfaces/FeedEntity.html","title":"interface - FeedEntity","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  FeedEntity\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/transit/proto/position.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            id\n                                        \n                                \n                                \n                                        \n                                            vehicle\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        id:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        vehicle\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        vehicle:         VehiclePosition\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         VehiclePosition\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface FeedHeader{\n    gtfsRealtimeVersion: string;\n    incrimentality: number;\n    timestamp: number;\n}\n\nexport interface TripDescriptor{\n    tripId: string;\n    startDate: string;\n    routeId: string;\n    directionId: number;\n}\n\nexport interface Position{\n    latitude: number;\n    longitude: number;\n}\n\nexport interface Long{\n    low: number;\n    high: number;\n    unsigned: boolean;\n}  \n\nexport interface VehicleDescriptor{\n    id: string;\n    label: string;\n}\n\nexport interface VehiclePosition{\n    currentStopSequence: number;\n    stopId: string;\n    occupancyStatus: number;\n    trip: TripDescriptor;\n    position: Position;\n    timestamp: Long;\n    vehicle: VehicleDescriptor;\n}\n\nexport interface FeedEntity{\n    id: string;\n    vehicle: VehiclePosition;\n}\n\nexport interface FeedMessage{\n    header: FeedHeader;\n    entity: FeedEntity[];\n}\n\nexport class PositionProto{\n\n    constructor(){}\n\n    public async createProto(data: FeedMessage){\n        \n    }\n\n\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/FeedEntity-1.html":{"url":"interfaces/FeedEntity-1.html","title":"interface - FeedEntity-1","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  FeedEntity\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/transit/proto/trips.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            id\n                                        \n                                \n                                \n                                        \n                                            tripUpdate\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        id:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        tripUpdate\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        tripUpdate:         TripUpdate\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         TripUpdate\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Line } from \"../entities/line.entity\";\nimport { Schedule } from \"../entities/schedule.entity\";\nimport { Stop } from \"../entities/stop.entity\";\nimport { DataService } from \"../services/data.service\";\nimport { LiveUpdatesService } from \"../services/live.updates.service\";\nimport { ArrivalDto } from \"../transitDtos/arrival.dto\";\n\nexport interface FeedHeader{\n    gtfsRealtimeVersion: string;\n    incrementality: number;\n    timestamp: number;\n}\n\nexport interface FeedMessage{\n    header: FeedHeader;\n    entity: FeedEntity[];\n}\n\nexport interface FeedEntity {\n    id: string;\n    tripUpdate: TripUpdate;\n}\n\nexport interface StopTimeEvent {\n    delay?: number;\n    time: number;\n}\n\nexport interface StopTimeUpdate{\n    stopSequence: number;\n    stopId: string;\n    arrival?: StopTimeEvent;\n    departure: StopTimeEvent;\n}\n\nexport interface TripUpdate {\n    trip: TripDescriptor;\n    stopTimeUpdate: StopTimeUpdate[];\n}\n\nexport interface TripDescriptor {\n    tripId: string;\n    routeId: string;\n    directionId: number;\n    startTime?: string;\n    startDate?: string;\n}\n\nexport default class Trip{\n\n    private defaultTrip = {};\n    private live: LiveUpdatesService;\n    private data: DataService;\n\n    private trip: TripDescriptor = {tripId: '1', routeId: '2', directionId: 0, startDate: '1', startTime: '2'};\n    private header: FeedHeader = {gtfsRealtimeVersion: '2', incrementality: 1, timestamp: 2};\n    private arrival: StopTimeEvent = {time: 1, delay: 2};\n    private departure: StopTimeEvent = {time: 2, delay: 1};\n    private stopTimeUpdate: StopTimeUpdate = {stopId: '1', stopSequence: 2, arrival: this.arrival, departure: this.departure};\n    private tripUpdate: TripUpdate = {trip: this.trip, stopTimeUpdate: [this.stopTimeUpdate, this.stopTimeUpdate]};\n    private entity: FeedEntity = {id: '1', tripUpdate: this.tripUpdate};\n    private message: FeedMessage = {header: this.header, entity: [this.entity, this.entity]};\n\n    constructor(live: LiveUpdatesService, data: DataService){\n        this.live = live;\n        this.data = data;\n    }\n\n    public get getMessage(): FeedMessage{\n        return this.message;\n    }\n\n    public async updateContructor(day: number){\n        \n        const lines: Line[] = await this.data.lines.getLines();\n\n        for (const line of lines) {\n\n            const { data } = await this.live.getLiveData(line.name, 'lines/live/');\n\n            if(data){\n                \n                let stops: Stop[] = [];\n                for (const e of data) {\n                    stops = await this.data.stops.getRouteStops(e.routeCode);\n                }\n\n                //for each stop of every route\n                for (const stop of stops) {\n\n                    const {data} = await this.live.getLiveData(stop.code, 'stops/live/');\n\n                    const tripUpdate: TripUpdate = {trip: undefined, stopTimeUpdate: []};\n                    const trips: Schedule[] = await this.data.schedule.getTrips(data.routeCode, day, stop.code);\n                    //for each arrival to the stop\n                    if(data.vehicles){\n\n                        for(const e of data.vehicles){\n\n                            const trips: Schedule[] = await this.data.schedule.getTrips(e.routeCode, day, stop.code);\n\n                            for (const trip of trips) {\n                                \n                                \n                            }\n                            \n                        }\n                    }\n\n\n\n\n                }\n\n\n            }   \n            \n        }\n    }\n\n    private createtMessage(sch: Schedule, arr: ArrivalDto, stopCode: string, seq: number){\n        const trip: TripDescriptor = {tripId: sch.trip_id + '', routeId: sch.line, directionId: 0};\n        const header: FeedHeader = {gtfsRealtimeVersion: '2', incrementality: 1, timestamp: Date.now()};\n\n        const arrival: StopTimeEvent = {time: 1, delay: 0};\n        const departure: StopTimeEvent = {time: Date.now() + Math.floor(arr.departureMins/60)};\n\n        const stopTimeUpdate: StopTimeUpdate = {stopId: stopCode, stopSequence: seq, departure: departure};\n        \n        const tripUpdate: TripUpdate = {trip: this.trip, stopTimeUpdate: [this.stopTimeUpdate, this.stopTimeUpdate]};\n        const entity: FeedEntity = {id: '1', tripUpdate: this.tripUpdate};\n        const message: FeedMessage = {header: this.header, entity: [this.entity, this.entity]};\n    }\n}\n  \n\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/FeedHeader.html":{"url":"interfaces/FeedHeader.html","title":"interface - FeedHeader","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  FeedHeader\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/transit/proto/position.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            gtfsRealtimeVersion\n                                        \n                                \n                                \n                                        \n                                            incrimentality\n                                        \n                                \n                                \n                                        \n                                            timestamp\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        gtfsRealtimeVersion\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        gtfsRealtimeVersion:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        incrimentality\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        incrimentality:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        timestamp\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        timestamp:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface FeedHeader{\n    gtfsRealtimeVersion: string;\n    incrimentality: number;\n    timestamp: number;\n}\n\nexport interface TripDescriptor{\n    tripId: string;\n    startDate: string;\n    routeId: string;\n    directionId: number;\n}\n\nexport interface Position{\n    latitude: number;\n    longitude: number;\n}\n\nexport interface Long{\n    low: number;\n    high: number;\n    unsigned: boolean;\n}  \n\nexport interface VehicleDescriptor{\n    id: string;\n    label: string;\n}\n\nexport interface VehiclePosition{\n    currentStopSequence: number;\n    stopId: string;\n    occupancyStatus: number;\n    trip: TripDescriptor;\n    position: Position;\n    timestamp: Long;\n    vehicle: VehicleDescriptor;\n}\n\nexport interface FeedEntity{\n    id: string;\n    vehicle: VehiclePosition;\n}\n\nexport interface FeedMessage{\n    header: FeedHeader;\n    entity: FeedEntity[];\n}\n\nexport class PositionProto{\n\n    constructor(){}\n\n    public async createProto(data: FeedMessage){\n        \n    }\n\n\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/FeedHeader-1.html":{"url":"interfaces/FeedHeader-1.html","title":"interface - FeedHeader-1","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  FeedHeader\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/transit/proto/trips.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            gtfsRealtimeVersion\n                                        \n                                \n                                \n                                        \n                                            incrementality\n                                        \n                                \n                                \n                                        \n                                            timestamp\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        gtfsRealtimeVersion\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        gtfsRealtimeVersion:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        incrementality\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        incrementality:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        timestamp\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        timestamp:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Line } from \"../entities/line.entity\";\nimport { Schedule } from \"../entities/schedule.entity\";\nimport { Stop } from \"../entities/stop.entity\";\nimport { DataService } from \"../services/data.service\";\nimport { LiveUpdatesService } from \"../services/live.updates.service\";\nimport { ArrivalDto } from \"../transitDtos/arrival.dto\";\n\nexport interface FeedHeader{\n    gtfsRealtimeVersion: string;\n    incrementality: number;\n    timestamp: number;\n}\n\nexport interface FeedMessage{\n    header: FeedHeader;\n    entity: FeedEntity[];\n}\n\nexport interface FeedEntity {\n    id: string;\n    tripUpdate: TripUpdate;\n}\n\nexport interface StopTimeEvent {\n    delay?: number;\n    time: number;\n}\n\nexport interface StopTimeUpdate{\n    stopSequence: number;\n    stopId: string;\n    arrival?: StopTimeEvent;\n    departure: StopTimeEvent;\n}\n\nexport interface TripUpdate {\n    trip: TripDescriptor;\n    stopTimeUpdate: StopTimeUpdate[];\n}\n\nexport interface TripDescriptor {\n    tripId: string;\n    routeId: string;\n    directionId: number;\n    startTime?: string;\n    startDate?: string;\n}\n\nexport default class Trip{\n\n    private defaultTrip = {};\n    private live: LiveUpdatesService;\n    private data: DataService;\n\n    private trip: TripDescriptor = {tripId: '1', routeId: '2', directionId: 0, startDate: '1', startTime: '2'};\n    private header: FeedHeader = {gtfsRealtimeVersion: '2', incrementality: 1, timestamp: 2};\n    private arrival: StopTimeEvent = {time: 1, delay: 2};\n    private departure: StopTimeEvent = {time: 2, delay: 1};\n    private stopTimeUpdate: StopTimeUpdate = {stopId: '1', stopSequence: 2, arrival: this.arrival, departure: this.departure};\n    private tripUpdate: TripUpdate = {trip: this.trip, stopTimeUpdate: [this.stopTimeUpdate, this.stopTimeUpdate]};\n    private entity: FeedEntity = {id: '1', tripUpdate: this.tripUpdate};\n    private message: FeedMessage = {header: this.header, entity: [this.entity, this.entity]};\n\n    constructor(live: LiveUpdatesService, data: DataService){\n        this.live = live;\n        this.data = data;\n    }\n\n    public get getMessage(): FeedMessage{\n        return this.message;\n    }\n\n    public async updateContructor(day: number){\n        \n        const lines: Line[] = await this.data.lines.getLines();\n\n        for (const line of lines) {\n\n            const { data } = await this.live.getLiveData(line.name, 'lines/live/');\n\n            if(data){\n                \n                let stops: Stop[] = [];\n                for (const e of data) {\n                    stops = await this.data.stops.getRouteStops(e.routeCode);\n                }\n\n                //for each stop of every route\n                for (const stop of stops) {\n\n                    const {data} = await this.live.getLiveData(stop.code, 'stops/live/');\n\n                    const tripUpdate: TripUpdate = {trip: undefined, stopTimeUpdate: []};\n                    const trips: Schedule[] = await this.data.schedule.getTrips(data.routeCode, day, stop.code);\n                    //for each arrival to the stop\n                    if(data.vehicles){\n\n                        for(const e of data.vehicles){\n\n                            const trips: Schedule[] = await this.data.schedule.getTrips(e.routeCode, day, stop.code);\n\n                            for (const trip of trips) {\n                                \n                                \n                            }\n                            \n                        }\n                    }\n\n\n\n\n                }\n\n\n            }   \n            \n        }\n    }\n\n    private createtMessage(sch: Schedule, arr: ArrivalDto, stopCode: string, seq: number){\n        const trip: TripDescriptor = {tripId: sch.trip_id + '', routeId: sch.line, directionId: 0};\n        const header: FeedHeader = {gtfsRealtimeVersion: '2', incrementality: 1, timestamp: Date.now()};\n\n        const arrival: StopTimeEvent = {time: 1, delay: 0};\n        const departure: StopTimeEvent = {time: Date.now() + Math.floor(arr.departureMins/60)};\n\n        const stopTimeUpdate: StopTimeUpdate = {stopId: stopCode, stopSequence: seq, departure: departure};\n        \n        const tripUpdate: TripUpdate = {trip: this.trip, stopTimeUpdate: [this.stopTimeUpdate, this.stopTimeUpdate]};\n        const entity: FeedEntity = {id: '1', tripUpdate: this.tripUpdate};\n        const message: FeedMessage = {header: this.header, entity: [this.entity, this.entity]};\n    }\n}\n  \n\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/FeedMessage.html":{"url":"interfaces/FeedMessage.html","title":"interface - FeedMessage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  FeedMessage\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/transit/proto/position.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            entity\n                                        \n                                \n                                \n                                        \n                                            header\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        entity\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        entity:     FeedEntity[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     FeedEntity[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        header\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        header:         FeedHeader\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         FeedHeader\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface FeedHeader{\n    gtfsRealtimeVersion: string;\n    incrimentality: number;\n    timestamp: number;\n}\n\nexport interface TripDescriptor{\n    tripId: string;\n    startDate: string;\n    routeId: string;\n    directionId: number;\n}\n\nexport interface Position{\n    latitude: number;\n    longitude: number;\n}\n\nexport interface Long{\n    low: number;\n    high: number;\n    unsigned: boolean;\n}  \n\nexport interface VehicleDescriptor{\n    id: string;\n    label: string;\n}\n\nexport interface VehiclePosition{\n    currentStopSequence: number;\n    stopId: string;\n    occupancyStatus: number;\n    trip: TripDescriptor;\n    position: Position;\n    timestamp: Long;\n    vehicle: VehicleDescriptor;\n}\n\nexport interface FeedEntity{\n    id: string;\n    vehicle: VehiclePosition;\n}\n\nexport interface FeedMessage{\n    header: FeedHeader;\n    entity: FeedEntity[];\n}\n\nexport class PositionProto{\n\n    constructor(){}\n\n    public async createProto(data: FeedMessage){\n        \n    }\n\n\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/FeedMessage-1.html":{"url":"interfaces/FeedMessage-1.html","title":"interface - FeedMessage-1","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  FeedMessage\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/transit/proto/trips.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            entity\n                                        \n                                \n                                \n                                        \n                                            header\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        entity\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        entity:     FeedEntity[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     FeedEntity[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        header\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        header:         FeedHeader\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         FeedHeader\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Line } from \"../entities/line.entity\";\nimport { Schedule } from \"../entities/schedule.entity\";\nimport { Stop } from \"../entities/stop.entity\";\nimport { DataService } from \"../services/data.service\";\nimport { LiveUpdatesService } from \"../services/live.updates.service\";\nimport { ArrivalDto } from \"../transitDtos/arrival.dto\";\n\nexport interface FeedHeader{\n    gtfsRealtimeVersion: string;\n    incrementality: number;\n    timestamp: number;\n}\n\nexport interface FeedMessage{\n    header: FeedHeader;\n    entity: FeedEntity[];\n}\n\nexport interface FeedEntity {\n    id: string;\n    tripUpdate: TripUpdate;\n}\n\nexport interface StopTimeEvent {\n    delay?: number;\n    time: number;\n}\n\nexport interface StopTimeUpdate{\n    stopSequence: number;\n    stopId: string;\n    arrival?: StopTimeEvent;\n    departure: StopTimeEvent;\n}\n\nexport interface TripUpdate {\n    trip: TripDescriptor;\n    stopTimeUpdate: StopTimeUpdate[];\n}\n\nexport interface TripDescriptor {\n    tripId: string;\n    routeId: string;\n    directionId: number;\n    startTime?: string;\n    startDate?: string;\n}\n\nexport default class Trip{\n\n    private defaultTrip = {};\n    private live: LiveUpdatesService;\n    private data: DataService;\n\n    private trip: TripDescriptor = {tripId: '1', routeId: '2', directionId: 0, startDate: '1', startTime: '2'};\n    private header: FeedHeader = {gtfsRealtimeVersion: '2', incrementality: 1, timestamp: 2};\n    private arrival: StopTimeEvent = {time: 1, delay: 2};\n    private departure: StopTimeEvent = {time: 2, delay: 1};\n    private stopTimeUpdate: StopTimeUpdate = {stopId: '1', stopSequence: 2, arrival: this.arrival, departure: this.departure};\n    private tripUpdate: TripUpdate = {trip: this.trip, stopTimeUpdate: [this.stopTimeUpdate, this.stopTimeUpdate]};\n    private entity: FeedEntity = {id: '1', tripUpdate: this.tripUpdate};\n    private message: FeedMessage = {header: this.header, entity: [this.entity, this.entity]};\n\n    constructor(live: LiveUpdatesService, data: DataService){\n        this.live = live;\n        this.data = data;\n    }\n\n    public get getMessage(): FeedMessage{\n        return this.message;\n    }\n\n    public async updateContructor(day: number){\n        \n        const lines: Line[] = await this.data.lines.getLines();\n\n        for (const line of lines) {\n\n            const { data } = await this.live.getLiveData(line.name, 'lines/live/');\n\n            if(data){\n                \n                let stops: Stop[] = [];\n                for (const e of data) {\n                    stops = await this.data.stops.getRouteStops(e.routeCode);\n                }\n\n                //for each stop of every route\n                for (const stop of stops) {\n\n                    const {data} = await this.live.getLiveData(stop.code, 'stops/live/');\n\n                    const tripUpdate: TripUpdate = {trip: undefined, stopTimeUpdate: []};\n                    const trips: Schedule[] = await this.data.schedule.getTrips(data.routeCode, day, stop.code);\n                    //for each arrival to the stop\n                    if(data.vehicles){\n\n                        for(const e of data.vehicles){\n\n                            const trips: Schedule[] = await this.data.schedule.getTrips(e.routeCode, day, stop.code);\n\n                            for (const trip of trips) {\n                                \n                                \n                            }\n                            \n                        }\n                    }\n\n\n\n\n                }\n\n\n            }   \n            \n        }\n    }\n\n    private createtMessage(sch: Schedule, arr: ArrivalDto, stopCode: string, seq: number){\n        const trip: TripDescriptor = {tripId: sch.trip_id + '', routeId: sch.line, directionId: 0};\n        const header: FeedHeader = {gtfsRealtimeVersion: '2', incrementality: 1, timestamp: Date.now()};\n\n        const arrival: StopTimeEvent = {time: 1, delay: 0};\n        const departure: StopTimeEvent = {time: Date.now() + Math.floor(arr.departureMins/60)};\n\n        const stopTimeUpdate: StopTimeUpdate = {stopId: stopCode, stopSequence: seq, departure: departure};\n        \n        const tripUpdate: TripUpdate = {trip: this.trip, stopTimeUpdate: [this.stopTimeUpdate, this.stopTimeUpdate]};\n        const entity: FeedEntity = {id: '1', tripUpdate: this.tripUpdate};\n        const message: FeedMessage = {header: this.header, entity: [this.entity, this.entity]};\n    }\n}\n  \n\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/IGenericRepository.html":{"url":"classes/IGenericRepository.html","title":"class - IGenericRepository","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  IGenericRepository\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/repositories/generic.repository.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Protected\n                                deleteOne\n                            \n                            \n                                    Protected\n                                    Async\n                                get\n                            \n                            \n                                    Protected\n                                    Async\n                                getAll\n                            \n                            \n                                    Protected\n                                    Async\n                                getOne\n                            \n                            \n                                    Protected\n                                    Async\n                                insert\n                            \n                            \n                                    Protected\n                                insertOne\n                            \n                            \n                                    Protected\n                                updateOne\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \n                                Protected\n                        constructor(entityRepository: Repository, db?: DataSource)\n                    \n                \n                        \n                            \n                                Defined in src/repositories/generic.repository.ts:4\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        entityRepository\n                                                  \n                                                        \n                                                                    Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        db\n                                                  \n                                                        \n                                                                    DataSource\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Protected\n                        deleteOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteOne(spec: any)\n                \n            \n\n\n            \n                \n                    Defined in src/repositories/generic.repository.ts:49\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    spec\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Protected\n                        Async\n                        get\n                        \n                    \n                \n            \n            \n                \n                    \n                    get(spec: any)\n                \n            \n\n\n            \n                \n                    Defined in src/repositories/generic.repository.ts:19\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    spec\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Protected\n                        Async\n                        getAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    getAll()\n                \n            \n\n\n            \n                \n                    Defined in src/repositories/generic.repository.ts:11\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Protected\n                        Async\n                        getOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    getOne(spec: any)\n                \n            \n\n\n            \n                \n                    Defined in src/repositories/generic.repository.ts:41\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    spec\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Protected\n                        Async\n                        insert\n                        \n                    \n                \n            \n            \n                \n                    \n                    insert(data: T[])\n                \n            \n\n\n            \n                \n                    Defined in src/repositories/generic.repository.ts:28\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                            T[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Protected\n                        insertOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    insertOne(data: T)\n                \n            \n\n\n            \n                \n                    Defined in src/repositories/generic.repository.ts:32\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                            T\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Protected\n                        updateOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateOne(spec: any, update: any)\n                \n            \n\n\n            \n                \n                    Defined in src/repositories/generic.repository.ts:58\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    spec\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    update\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { DataSource, ObjectLiteral, Repository, UpdateResult } from \"typeorm\";\nimport { QueryDeepPartialEntity } from \"typeorm/query-builder/QueryPartialEntity\";\n\nexport abstract class IGenericRepository> {\n\n\tprotected constructor(\n\t\tprotected readonly entityRepository: Repository, \n\t\tprotected readonly db?: DataSource\n\t){}\n\n\tprotected async getAll(): Promise{\n\t\treturn this.entityRepository\n\t\t\t.createQueryBuilder()\n\t\t\t.select(['*'])\n\t\t\t.execute()\n\t\t\t.catch(e => console.log(e.detail));\n\t}\n\n\tprotected async get(spec: any): Promise{\n\t\treturn this.entityRepository\n\t\t\t.createQueryBuilder()\n\t\t\t.select(['*'])\n\t\t\t.where(spec)\n\t\t\t.execute()\n\t\t\t.catch(e => console.log(e));\n\t}\n\n\tprotected async insert(data: T[]): Promise{\n\t\tthis.entityRepository.save(data, {chunk: 1000}).catch(e => console.log(e));\n\t}\n\n\tprotected insertOne(data: T){\n\t\tthis.entityRepository\n\t\t\t.createQueryBuilder()\n\t\t  \t.insert()\n\t\t  \t.values(data)\n\t\t  \t.execute()\n\t\t  \t.catch(e => console.log(e));\n\t}\n\n\tprotected async getOne(spec: any): Promise{\n\t\treturn this.entityRepository\n\t\t\t.createQueryBuilder()\n\t\t\t.where(spec)\n\t\t\t.getOne()\n\t\t\t.catch(e => console.log(e.detail));\n\t}\n\n\tprotected deleteOne(spec: any){\n\t\tthis.entityRepository\n\t\t\t.createQueryBuilder()\n\t\t\t.delete()\n\t\t\t.where(spec)\n\t\t\t.execute()\n\t\t\t.catch(e => console.log(e.detail));\n\t}\n\n\tprotected updateOne(spec: any, update: any){\n\t\tthis.entityRepository\n\t\t\t.createQueryBuilder()\n\t\t\t.update()\n\t\t\t.set(update)\n\t\t\t.where(spec)\n\t\t\t.execute()\n\t\t\t.catch(e => console.log(e.detail));\n\t}\n\t\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Itinerary.html":{"url":"classes/Itinerary.html","title":"class - Itinerary","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Itinerary\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/transit/transitDtos/itinerary.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                arrivalDelay\n                            \n                            \n                                    Public\n                                departureDelay\n                            \n                            \n                                    Public\n                                duration\n                            \n                            \n                                    Public\n                                endTime\n                            \n                            \n                                    Public\n                                legs\n                            \n                            \n                                    Public\n                                serviceDate\n                            \n                            \n                                    Public\n                                startTime\n                            \n                            \n                                    Public\n                                transitTime\n                            \n                            \n                                    Public\n                                waitingTime\n                            \n                            \n                                    Public\n                                walkDistance\n                            \n                            \n                                    Public\n                                walkTime\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                edit\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(it: Itinerary, legs: Leg[])\n                    \n                \n                        \n                            \n                                Defined in src/transit/transitDtos/itinerary.dto.ts:144\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        it\n                                                  \n                                                        \n                                                                        Itinerary\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        legs\n                                                  \n                                                        \n                                                                        Leg[]\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        arrivalDelay\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/transit/transitDtos/itinerary.dto.ts:141\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        departureDelay\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/transit/transitDtos/itinerary.dto.ts:142\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        duration\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/transit/transitDtos/itinerary.dto.ts:134\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        endTime\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/transit/transitDtos/itinerary.dto.ts:136\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        legs\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Leg[]\n\n                    \n                \n                    \n                        \n                                Defined in src/transit/transitDtos/itinerary.dto.ts:144\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        serviceDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/transit/transitDtos/itinerary.dto.ts:143\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        startTime\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/transit/transitDtos/itinerary.dto.ts:135\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        transitTime\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/transit/transitDtos/itinerary.dto.ts:138\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        waitingTime\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/transit/transitDtos/itinerary.dto.ts:139\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        walkDistance\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/transit/transitDtos/itinerary.dto.ts:140\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        walkTime\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/transit/transitDtos/itinerary.dto.ts:137\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        edit\n                        \n                    \n                \n            \n            \n                \n                    \n                    edit(time: number)\n                \n            \n\n\n            \n                \n                    Defined in src/transit/transitDtos/itinerary.dto.ts:160\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    time\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        var polyline = require( 'google-polyline' );\n\nexport class Step{\n\n    public distance: number;\n    public relativeDirection: string;\n    public streetName: string;\n    public absoluteDirection: string;\n    public exit: string;\n    public lon: number;\n    public lat: number;\n\n    constructor(step: Step){\n        this.distance = Math.floor(step.distance);\n        this.relativeDirection = step.relativeDirection;\n        this.streetName = step.streetName;\n        this.absoluteDirection = step.absoluteDirection;\n        this.exit = step.exit;\n        this.lon = step.lon;\n        this.lat = step.lat;\n    }\n\n}\n\nexport class Vertex{\n\n    public name: string;\n    public lon: string;\n    public lat: string;\n    public vertexType: string;\n    public departure: string;\n    public arrival: string;\n    public stopCode?: string;\n    public stopId?: string;\n    public stopIndex: number;\n    public stopSequence: number;\n\n    constructor(v: Vertex){\n        this.name = v.name;\n        this.lon = v.lon;\n        this.lat = v.lat;\n        this.vertexType = v.vertexType;\n        this.stopCode = v.stopCode;\n        this.stopId = v.stopCode;\n        this.stopIndex = v.stopIndex;\n        this.stopSequence = v.stopSequence;\n        this.arrival = this.edit(+v.arrival);\n        this.departure = this.edit(+v.departure);\n    }\n\n    private edit(time: number): string{\n        const date = new Date(time).toLocaleTimeString().split(\":\");\n        return date[0] + ':' + date[1];\n    }\n\n}\n\nexport class Leg{\n\n    public points: string[];\n    public duration: number;\n    public transitTime: number;\n    public mode: string;\n    public steps: Step[];\n    public routeId: string | undefined;\n    public tripId: string | undefined;\n    public serviceDate: string;\n    public agencyName: string;\n    public agencyTimeZoneOffset: number;\n    public startTime: string;\n    public endTime: string;\n    public distance: number;\n    public departureDelay: number;\n    public arrivalDelay: number;\n    public routeShortName: string;\n    public from: Vertex;\n    public to: Vertex;\n    public intermediateStops: Vertex[] = [];\n    public legGeometry: any;\n    public flex: number;\n    public occupancyStatus: number;\n\n    constructor(leg: Leg, steps: Step[], from: Vertex, to: Vertex, stops: Vertex[], points: string){\n        this.points = polyline.decode(points);\n        this.duration = Math.floor(leg.duration/60);\n        this.transitTime = Math.floor(leg.transitTime/60);\n        this.mode = leg.mode;\n        this.routeId = this.setRoute(leg.routeId);\n        this.tripId = this.setTrip(leg.tripId);\n        this.serviceDate = leg.serviceDate;\n        this.agencyName = leg.agencyName;\n        this.agencyTimeZoneOffset = leg.agencyTimeZoneOffset;\n        this.startTime = this.edit(+leg.startTime);\n        this.endTime = this.edit(+leg.endTime);\n        this.distance = Math.floor(leg.distance);\n        this.arrivalDelay = Math.floor(leg.arrivalDelay/60);\n        this.routeShortName = leg.routeShortName;\n        this.steps = steps;\n        this.from = from;\n        this.to = to;\n        this.departureDelay = Math.floor(leg.departureDelay/60);\n        this.intermediateStops = stops;\n    }\n\n    public setRoute(route: string){\n        if(route){\n            return route.split(\":\")[1];\n        }else{\n            return undefined;\n        }\n    }\n\n    public setTrip(trip_id: string | undefined){\n        if(trip_id){\n            return trip_id.split(\":\")[1];\n        }else{\n            return undefined;\n        }\n    }\n\n    private edit(time: number): string{\n        const date = new Date(time).toLocaleTimeString().split(\":\");\n        return date[0] + ':' + date[1];\n    }\n\n    public setFlexGrow(totalDuration: number){\n        this.flex = Math.floor(this.duration/totalDuration * 10);\n    }\n\n}\n\nexport class Itinerary{\n\n    public duration: number;\n    public startTime: string;\n    public endTime: string;\n    public walkTime: number;\n    public transitTime: number;\n    public waitingTime: number;\n    public walkDistance: number;\n    public arrivalDelay: number;\n    public departureDelay: number;\n    public serviceDate: string;\n    public legs: Leg[];\n\n    constructor(it: Itinerary, legs: Leg[]){\n        this.duration = Math.floor(it.duration/60);\n        this.transitTime = Math.floor(it.transitTime/60);\n        this.waitingTime = Math.floor(it.waitingTime/60);\n        this.walkDistance = Math.floor(it.walkDistance);\n        this.legs = legs;\n        this.startTime = this.edit(+it.startTime);\n        this.endTime = this.edit(+it.endTime);\n        this.walkTime = Math.floor(it.walkTime/60);\n        this.arrivalDelay = it.arrivalDelay;\n        this.departureDelay = it.departureDelay;\n        this.serviceDate = it.serviceDate;\n    }\n\n    private edit(time: number): string{\n        const date = new Date(time).toLocaleTimeString().split(\":\");\n        return date[0] + ':' + date[1];\n    }\n}\n\nexport class Plan{\n\n    public date: string;\n    public from: Vertex;\n    public to: Vertex;\n    public arriveBy: string;\n    public itineraries: Itinerary[];\n    public slug: string;\n    public occupancy: any;\n\n    constructor(plan: Plan, it: Itinerary[], slug: string){\n        this.date = new Date(plan.date).toLocaleString();\n        this.from = new Vertex(plan.from);\n        this.to = new Vertex(plan.to);\n        this.itineraries = it;\n        this.slug = slug;\n    }\n\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtAuthGuard.html":{"url":"injectables/JwtAuthGuard.html","title":"injectable - JwtAuthGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtAuthGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/jwt-auth.guard.ts\n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\n\n@Injectable()\nexport class JwtAuthGuard extends AuthGuard('jwt') {}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtStrategy.html":{"url":"injectables/JwtStrategy.html","title":"injectable - JwtStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/jwt.strategy.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/auth/jwt.strategy.ts:8\n                            \n                        \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(payload: any)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/jwt.strategy.ts:18\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ExtractJwt, Strategy } from 'passport-jwt';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { Injectable } from '@nestjs/common';\nimport { jwtConstants } from 'src/configurations/config';\n\n\n@Injectable()\nexport class JwtStrategy extends PassportStrategy(Strategy) {\n\n  constructor() {\n    super({\n      jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),\n      ignoreExpiration: false,\n      secretOrKey: jwtConstants.secret,\n    });\n  }\n\n  public async validate(payload: any): Promise {\n    return { userId: payload.sub, email: payload.email };\n  }\n  \n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Leg.html":{"url":"classes/Leg.html","title":"class - Leg","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Leg\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/transit/transitDtos/itinerary.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                agencyName\n                            \n                            \n                                    Public\n                                agencyTimeZoneOffset\n                            \n                            \n                                    Public\n                                arrivalDelay\n                            \n                            \n                                    Public\n                                departureDelay\n                            \n                            \n                                    Public\n                                distance\n                            \n                            \n                                    Public\n                                duration\n                            \n                            \n                                    Public\n                                endTime\n                            \n                            \n                                    Public\n                                flex\n                            \n                            \n                                    Public\n                                from\n                            \n                            \n                                    Public\n                                intermediateStops\n                            \n                            \n                                    Public\n                                legGeometry\n                            \n                            \n                                    Public\n                                mode\n                            \n                            \n                                    Public\n                                occupancyStatus\n                            \n                            \n                                    Public\n                                points\n                            \n                            \n                                    Public\n                                routeId\n                            \n                            \n                                    Public\n                                routeShortName\n                            \n                            \n                                    Public\n                                serviceDate\n                            \n                            \n                                    Public\n                                startTime\n                            \n                            \n                                    Public\n                                steps\n                            \n                            \n                                    Public\n                                to\n                            \n                            \n                                    Public\n                                transitTime\n                            \n                            \n                                    Public\n                                tripId\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                edit\n                            \n                            \n                                    Public\n                                setFlexGrow\n                            \n                            \n                                    Public\n                                setRoute\n                            \n                            \n                                    Public\n                                setTrip\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(leg: Leg, steps: Step[], from: Vertex, to: Vertex, stops: Vertex[], points: string)\n                    \n                \n                        \n                            \n                                Defined in src/transit/transitDtos/itinerary.dto.ts:81\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        leg\n                                                  \n                                                        \n                                                                        Leg\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        steps\n                                                  \n                                                        \n                                                                        Step[]\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        from\n                                                  \n                                                        \n                                                                        Vertex\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        to\n                                                  \n                                                        \n                                                                        Vertex\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        stops\n                                                  \n                                                        \n                                                                        Vertex[]\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        points\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        agencyName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/transit/transitDtos/itinerary.dto.ts:68\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        agencyTimeZoneOffset\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/transit/transitDtos/itinerary.dto.ts:69\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        arrivalDelay\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/transit/transitDtos/itinerary.dto.ts:74\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        departureDelay\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/transit/transitDtos/itinerary.dto.ts:73\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        distance\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/transit/transitDtos/itinerary.dto.ts:72\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        duration\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/transit/transitDtos/itinerary.dto.ts:61\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        endTime\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/transit/transitDtos/itinerary.dto.ts:71\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        flex\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/transit/transitDtos/itinerary.dto.ts:80\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        from\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Vertex\n\n                    \n                \n                    \n                        \n                                Defined in src/transit/transitDtos/itinerary.dto.ts:76\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        intermediateStops\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Vertex[]\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                    \n                        \n                                Defined in src/transit/transitDtos/itinerary.dto.ts:78\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        legGeometry\n                        \n                    \n                \n            \n                \n                    \n                        Type :         any\n\n                    \n                \n                    \n                        \n                                Defined in src/transit/transitDtos/itinerary.dto.ts:79\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        mode\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/transit/transitDtos/itinerary.dto.ts:63\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        occupancyStatus\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/transit/transitDtos/itinerary.dto.ts:81\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        points\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                    \n                        \n                                Defined in src/transit/transitDtos/itinerary.dto.ts:60\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        routeId\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string | undefined\n\n                    \n                \n                    \n                        \n                                Defined in src/transit/transitDtos/itinerary.dto.ts:65\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        routeShortName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/transit/transitDtos/itinerary.dto.ts:75\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        serviceDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/transit/transitDtos/itinerary.dto.ts:67\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        startTime\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/transit/transitDtos/itinerary.dto.ts:70\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        steps\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Step[]\n\n                    \n                \n                    \n                        \n                                Defined in src/transit/transitDtos/itinerary.dto.ts:64\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        to\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Vertex\n\n                    \n                \n                    \n                        \n                                Defined in src/transit/transitDtos/itinerary.dto.ts:77\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        transitTime\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/transit/transitDtos/itinerary.dto.ts:62\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        tripId\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string | undefined\n\n                    \n                \n                    \n                        \n                                Defined in src/transit/transitDtos/itinerary.dto.ts:66\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        edit\n                        \n                    \n                \n            \n            \n                \n                    \n                    edit(time: number)\n                \n            \n\n\n            \n                \n                    Defined in src/transit/transitDtos/itinerary.dto.ts:121\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    time\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        setFlexGrow\n                        \n                    \n                \n            \n            \n                \n                    \n                    setFlexGrow(totalDuration: number)\n                \n            \n\n\n            \n                \n                    Defined in src/transit/transitDtos/itinerary.dto.ts:126\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    totalDuration\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        setRoute\n                        \n                    \n                \n            \n            \n                \n                    \n                    setRoute(route: string)\n                \n            \n\n\n            \n                \n                    Defined in src/transit/transitDtos/itinerary.dto.ts:105\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    route\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        setTrip\n                        \n                    \n                \n            \n            \n                \n                    \n                    setTrip(trip_id: string | undefined)\n                \n            \n\n\n            \n                \n                    Defined in src/transit/transitDtos/itinerary.dto.ts:113\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    trip_id\n                                    \n                                            string | undefined\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        var polyline = require( 'google-polyline' );\n\nexport class Step{\n\n    public distance: number;\n    public relativeDirection: string;\n    public streetName: string;\n    public absoluteDirection: string;\n    public exit: string;\n    public lon: number;\n    public lat: number;\n\n    constructor(step: Step){\n        this.distance = Math.floor(step.distance);\n        this.relativeDirection = step.relativeDirection;\n        this.streetName = step.streetName;\n        this.absoluteDirection = step.absoluteDirection;\n        this.exit = step.exit;\n        this.lon = step.lon;\n        this.lat = step.lat;\n    }\n\n}\n\nexport class Vertex{\n\n    public name: string;\n    public lon: string;\n    public lat: string;\n    public vertexType: string;\n    public departure: string;\n    public arrival: string;\n    public stopCode?: string;\n    public stopId?: string;\n    public stopIndex: number;\n    public stopSequence: number;\n\n    constructor(v: Vertex){\n        this.name = v.name;\n        this.lon = v.lon;\n        this.lat = v.lat;\n        this.vertexType = v.vertexType;\n        this.stopCode = v.stopCode;\n        this.stopId = v.stopCode;\n        this.stopIndex = v.stopIndex;\n        this.stopSequence = v.stopSequence;\n        this.arrival = this.edit(+v.arrival);\n        this.departure = this.edit(+v.departure);\n    }\n\n    private edit(time: number): string{\n        const date = new Date(time).toLocaleTimeString().split(\":\");\n        return date[0] + ':' + date[1];\n    }\n\n}\n\nexport class Leg{\n\n    public points: string[];\n    public duration: number;\n    public transitTime: number;\n    public mode: string;\n    public steps: Step[];\n    public routeId: string | undefined;\n    public tripId: string | undefined;\n    public serviceDate: string;\n    public agencyName: string;\n    public agencyTimeZoneOffset: number;\n    public startTime: string;\n    public endTime: string;\n    public distance: number;\n    public departureDelay: number;\n    public arrivalDelay: number;\n    public routeShortName: string;\n    public from: Vertex;\n    public to: Vertex;\n    public intermediateStops: Vertex[] = [];\n    public legGeometry: any;\n    public flex: number;\n    public occupancyStatus: number;\n\n    constructor(leg: Leg, steps: Step[], from: Vertex, to: Vertex, stops: Vertex[], points: string){\n        this.points = polyline.decode(points);\n        this.duration = Math.floor(leg.duration/60);\n        this.transitTime = Math.floor(leg.transitTime/60);\n        this.mode = leg.mode;\n        this.routeId = this.setRoute(leg.routeId);\n        this.tripId = this.setTrip(leg.tripId);\n        this.serviceDate = leg.serviceDate;\n        this.agencyName = leg.agencyName;\n        this.agencyTimeZoneOffset = leg.agencyTimeZoneOffset;\n        this.startTime = this.edit(+leg.startTime);\n        this.endTime = this.edit(+leg.endTime);\n        this.distance = Math.floor(leg.distance);\n        this.arrivalDelay = Math.floor(leg.arrivalDelay/60);\n        this.routeShortName = leg.routeShortName;\n        this.steps = steps;\n        this.from = from;\n        this.to = to;\n        this.departureDelay = Math.floor(leg.departureDelay/60);\n        this.intermediateStops = stops;\n    }\n\n    public setRoute(route: string){\n        if(route){\n            return route.split(\":\")[1];\n        }else{\n            return undefined;\n        }\n    }\n\n    public setTrip(trip_id: string | undefined){\n        if(trip_id){\n            return trip_id.split(\":\")[1];\n        }else{\n            return undefined;\n        }\n    }\n\n    private edit(time: number): string{\n        const date = new Date(time).toLocaleTimeString().split(\":\");\n        return date[0] + ':' + date[1];\n    }\n\n    public setFlexGrow(totalDuration: number){\n        this.flex = Math.floor(this.duration/totalDuration * 10);\n    }\n\n}\n\nexport class Itinerary{\n\n    public duration: number;\n    public startTime: string;\n    public endTime: string;\n    public walkTime: number;\n    public transitTime: number;\n    public waitingTime: number;\n    public walkDistance: number;\n    public arrivalDelay: number;\n    public departureDelay: number;\n    public serviceDate: string;\n    public legs: Leg[];\n\n    constructor(it: Itinerary, legs: Leg[]){\n        this.duration = Math.floor(it.duration/60);\n        this.transitTime = Math.floor(it.transitTime/60);\n        this.waitingTime = Math.floor(it.waitingTime/60);\n        this.walkDistance = Math.floor(it.walkDistance);\n        this.legs = legs;\n        this.startTime = this.edit(+it.startTime);\n        this.endTime = this.edit(+it.endTime);\n        this.walkTime = Math.floor(it.walkTime/60);\n        this.arrivalDelay = it.arrivalDelay;\n        this.departureDelay = it.departureDelay;\n        this.serviceDate = it.serviceDate;\n    }\n\n    private edit(time: number): string{\n        const date = new Date(time).toLocaleTimeString().split(\":\");\n        return date[0] + ':' + date[1];\n    }\n}\n\nexport class Plan{\n\n    public date: string;\n    public from: Vertex;\n    public to: Vertex;\n    public arriveBy: string;\n    public itineraries: Itinerary[];\n    public slug: string;\n    public occupancy: any;\n\n    constructor(plan: Plan, it: Itinerary[], slug: string){\n        this.date = new Date(plan.date).toLocaleString();\n        this.from = new Vertex(plan.from);\n        this.to = new Vertex(plan.to);\n        this.itineraries = it;\n        this.slug = slug;\n    }\n\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Line.html":{"url":"entities/Line.html","title":"entity - Line","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Line\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/transit/entities/line.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                desc\n                            \n                            \n                                    Public\n                                desc_eng\n                            \n                            \n                                    Public\n                                id\n                            \n                            \n                                    Public\n                                name\n                            \n                            \n                                    Public\n                                routeCodes\n                            \n                            \n                                    Public\n                                routes\n                            \n                            \n                                    Public\n                                routesNumber\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        desc\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({nullable: false, type: 'varchar'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/transit/entities/line.entity.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        desc_eng\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({nullable: false, type: 'varchar'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/transit/entities/line.entity.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Index({unique: true})@PrimaryColumn({nullable: false, type: 'bigint'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/transit/entities/line.entity.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({nullable: false, type: 'varchar'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/transit/entities/line.entity.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        routeCodes\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'simple-array', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/transit/entities/line.entity.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        routes\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Route[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany(undefined, route => route.line)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/transit/entities/line.entity.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        routesNumber\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({nullable: false, type: 'bigint'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/transit/entities/line.entity.ts:15\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Column, Entity, OneToMany, PrimaryColumn, Index} from 'typeorm';\nimport { Route } from './route.entity';\n\n@Entity()\nexport class Line{\n\n    @Index({unique: true})\n    @PrimaryColumn({nullable: false, type: 'bigint'})\n    public id: number;\n\n    @Column({nullable: false, type: 'varchar'})\n    public name: string;\n\n    @Column({nullable: false, type: 'bigint'})\n    public routesNumber: number;\n\n    @Column({nullable: false, type: 'varchar'})\n    public desc_eng: string;\n\n    @Column({nullable: false, type: 'varchar'})\n    public desc: string;\n\n    @Column({type: 'simple-array', nullable: true})\n    public routeCodes: string[];\n\n    @OneToMany(() => Route, (route: Route): Line => route.line)\n    public routes: Route[];\n\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LineDto.html":{"url":"classes/LineDto.html","title":"class - LineDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LineDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/transit/transitDtos/line.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                desc\n                            \n                            \n                                    Public\n                                desc_eng\n                            \n                            \n                                    Public\n                                id\n                            \n                            \n                                    Public\n                                name\n                            \n                            \n                                    Public\n                                routesNumber\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        desc\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/transit/transitDtos/line.dto.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        desc_eng\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/transit/transitDtos/line.dto.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/transit/transitDtos/line.dto.ts:3\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/transit/transitDtos/line.dto.ts:4\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        routesNumber\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/transit/transitDtos/line.dto.ts:5\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class LineDto {\n    public id: number;\n    public name: string;\n    public routesNumber: number;\n    public desc_eng: string;\n    public desc: string;\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LineRepository.html":{"url":"injectables/LineRepository.html","title":"injectable - LineRepository","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  LineRepository\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/repositories/line.repository.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        IGenericRepository\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    \n                                getAll\n                            \n                            \n                                    Public\n                                    \n                                    Async\n                                insert\n                            \n                            \n                                    Protected\n                                deleteOne\n                            \n                            \n                                    Protected\n                                    Async\n                                get\n                            \n                            \n                                    Protected\n                                    Async\n                                getOne\n                            \n                            \n                                    Protected\n                                insertOne\n                            \n                            \n                                    Protected\n                                updateOne\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(lineRepo: Repository, db: DataSource)\n                    \n                \n                        \n                            \n                                Defined in src/repositories/line.repository.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        lineRepo\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        db\n                                                  \n                                                        \n                                                                    DataSource\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        \n                        getAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    getAll()\n                \n            \n\n\n            \n                \n                    Inherited from         IGenericRepository\n\n                \n            \n            \n                \n                        Defined in         IGenericRepository:17\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        \n                        Async\n                        insert\n                        \n                    \n                \n            \n            \n                \n                    \n                    insert(lines: Line[])\n                \n            \n\n\n            \n                \n                    Inherited from         IGenericRepository\n\n                \n            \n            \n                \n                        Defined in         IGenericRepository:21\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    lines\n                                    \n                                                Line[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Protected\n                        deleteOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteOne(spec: any)\n                \n            \n\n\n            \n                \n                    Inherited from         IGenericRepository\n\n                \n            \n            \n                \n                        Defined in         IGenericRepository:49\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    spec\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Protected\n                        Async\n                        get\n                        \n                    \n                \n            \n            \n                \n                    \n                    get(spec: any)\n                \n            \n\n\n            \n                \n                    Inherited from         IGenericRepository\n\n                \n            \n            \n                \n                        Defined in         IGenericRepository:19\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    spec\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Protected\n                        Async\n                        getOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    getOne(spec: any)\n                \n            \n\n\n            \n                \n                    Inherited from         IGenericRepository\n\n                \n            \n            \n                \n                        Defined in         IGenericRepository:41\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    spec\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Protected\n                        insertOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    insertOne(data: T)\n                \n            \n\n\n            \n                \n                    Inherited from         IGenericRepository\n\n                \n            \n            \n                \n                        Defined in         IGenericRepository:32\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                            T\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Protected\n                        updateOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateOne(spec: any, update: any)\n                \n            \n\n\n            \n                \n                    Inherited from         IGenericRepository\n\n                \n            \n            \n                \n                        Defined in         IGenericRepository:58\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    spec\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    update\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from \"@nestjs/common\";\nimport { InjectDataSource, InjectRepository } from \"@nestjs/typeorm\";\nimport { DataSource, Repository, UpdateResult } from \"typeorm\";\nimport { Line } from \"../transit/entities/line.entity\";\nimport { IGenericRepository } from \"./generic.repository\";\n\n@Injectable()\nexport class LineRepository extends IGenericRepository{\n\n    constructor(\n        @InjectRepository(Line) lineRepo: Repository, \n        @InjectDataSource() db: DataSource\n    ){\n        super(lineRepo);\n    }\n\n    public override getAll(): Promise {\n        return super.getAll();\n    }\n\n    public override async insert(lines: Line[]): Promise{\n        super.insert(lines);\n    }\n    \n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LineService.html":{"url":"injectables/LineService.html","title":"injectable - LineService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  LineService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/transit/services/line.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                getLines\n                            \n                            \n                                    Public\n                                    Async\n                                insert\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(repo: LineRepository)\n                    \n                \n                        \n                            \n                                Defined in src/transit/services/line.service.ts:6\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        repo\n                                                  \n                                                        \n                                                                        LineRepository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        getLines\n                        \n                    \n                \n            \n            \n                \n                    \n                    getLines()\n                \n            \n\n\n            \n                \n                    Defined in src/transit/services/line.service.ts:10\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        insert\n                        \n                    \n                \n            \n            \n                \n                    \n                    insert(lines: Line[])\n                \n            \n\n\n            \n                \n                    Defined in src/transit/services/line.service.ts:14\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    lines\n                                    \n                                                Line[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { Line } from '../entities/line.entity';\nimport { LineRepository } from '../../repositories/line.repository';\n\n@Injectable()\nexport class LineService {\n\n    constructor(private repo: LineRepository) {}\n\n    public async getLines(): Promise{\n        return this.repo.getAll();\n    }\n\n    public async insert(lines: Line[]): Promise{\n        this.repo.insert(lines);\n    }\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/LiveData.html":{"url":"entities/LiveData.html","title":"entity - LiveData","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  LiveData\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/transit/entities/live.data.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                arrivalMins\n                            \n                            \n                                    Public\n                                arrivalSeconds\n                            \n                            \n                                    Public\n                                departureMins\n                            \n                            \n                                    Public\n                                departureSeconds\n                            \n                            \n                                    Public\n                                id\n                            \n                            \n                                    Public\n                                lineCode\n                            \n                            \n                                    Public\n                                routeCode\n                            \n                            \n                                    Public\n                                stopCode\n                            \n                            \n                                    Public\n                                stopLat\n                            \n                            \n                                    Public\n                                stopLng\n                            \n                            \n                                    Public\n                                timeStamp\n                            \n                            \n                                    Public\n                                vehicleCode\n                            \n                            \n                                    Public\n                                vehicleLat\n                            \n                            \n                                    Public\n                                vehicleLng\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        arrivalMins\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({nullable: false, type: 'int'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/transit/entities/live.data.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        arrivalSeconds\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({nullable: false, type: 'int'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/transit/entities/live.data.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        departureMins\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({nullable: false, type: 'int'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/transit/entities/live.data.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        departureSeconds\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({nullable: false, type: 'int'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/transit/entities/live.data.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Index({unique: true})@PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/transit/entities/live.data.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        lineCode\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({nullable: false, type: 'varchar'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/transit/entities/live.data.ts:25\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        routeCode\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({nullable: false, type: 'varchar'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/transit/entities/live.data.ts:28\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        stopCode\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({nullable: false, type: 'varchar'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/transit/entities/live.data.ts:31\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        stopLat\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({nullable: false, type: 'varchar'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/transit/entities/live.data.ts:37\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        stopLng\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({nullable: false, type: 'varchar'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/transit/entities/live.data.ts:40\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        timeStamp\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @CreateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/transit/entities/live.data.ts:49\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        vehicleCode\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({nullable: false, type: 'varchar'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/transit/entities/live.data.ts:34\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        vehicleLat\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({nullable: false, type: 'varchar'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/transit/entities/live.data.ts:43\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        vehicleLng\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({nullable: false, type: 'varchar'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/transit/entities/live.data.ts:46\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Column, CreateDateColumn, Entity, Index, PrimaryGeneratedColumn} from 'typeorm';\nimport { Stop } from './stop.entity';\nimport { ArrivalDto } from '../transitDtos/arrival.dto';\n\n@Entity()\nexport class LiveData{\n\n    @Index({unique: true})\n    @PrimaryGeneratedColumn()\n    public id: number;\n\n    @Column({nullable: false, type: 'int'})\n    public departureMins: string;\n\n    @Column({nullable: false, type: 'int'})\n    public departureSeconds: number;\n\n    @Column({nullable: false, type: 'int'})\n    public arrivalMins: string;\n\n    @Column({nullable: false, type: 'int'})\n    public arrivalSeconds: string;\n\n    @Column({nullable: false, type: 'varchar'})\n    public lineCode: string;\n\n    @Column({nullable: false, type: 'varchar'})\n    public routeCode: string;\n\n    @Column({nullable: false, type: 'varchar'})\n    public stopCode: string;\n\n    @Column({nullable: false, type: 'varchar'})\n    public vehicleCode: string;\n\n    @Column({nullable: false, type: 'varchar'})\n    public stopLat: string;\n\n    @Column({nullable: false, type: 'varchar'})\n    public stopLng: string;\n\n    @Column({nullable: false, type: 'varchar'})\n    public vehicleLat: string;\n\n    @Column({nullable: false, type: 'varchar'})\n    public vehicleLng: string;\n\n    @CreateDateColumn()\n    public timeStamp: string;\n\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LiveDataRepository.html":{"url":"injectables/LiveDataRepository.html","title":"injectable - LiveDataRepository","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  LiveDataRepository\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/repositories/liveData.repository.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        IGenericRepository\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    \n                                    Async\n                                insert\n                            \n                            \n                                    Protected\n                                deleteOne\n                            \n                            \n                                    Protected\n                                    Async\n                                get\n                            \n                            \n                                    Protected\n                                    Async\n                                getAll\n                            \n                            \n                                    Protected\n                                    Async\n                                getOne\n                            \n                            \n                                    Protected\n                                insertOne\n                            \n                            \n                                    Protected\n                                updateOne\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(repo: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/repositories/liveData.repository.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        repo\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        \n                        Async\n                        insert\n                        \n                    \n                \n            \n            \n                \n                    \n                    insert(data: LiveData[])\n                \n            \n\n\n            \n                \n                    Inherited from         IGenericRepository\n\n                \n            \n            \n                \n                        Defined in         IGenericRepository:15\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                                LiveData[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Protected\n                        deleteOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteOne(spec: any)\n                \n            \n\n\n            \n                \n                    Inherited from         IGenericRepository\n\n                \n            \n            \n                \n                        Defined in         IGenericRepository:49\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    spec\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Protected\n                        Async\n                        get\n                        \n                    \n                \n            \n            \n                \n                    \n                    get(spec: any)\n                \n            \n\n\n            \n                \n                    Inherited from         IGenericRepository\n\n                \n            \n            \n                \n                        Defined in         IGenericRepository:19\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    spec\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Protected\n                        Async\n                        getAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    getAll()\n                \n            \n\n\n            \n                \n                    Inherited from         IGenericRepository\n\n                \n            \n            \n                \n                        Defined in         IGenericRepository:11\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Protected\n                        Async\n                        getOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    getOne(spec: any)\n                \n            \n\n\n            \n                \n                    Inherited from         IGenericRepository\n\n                \n            \n            \n                \n                        Defined in         IGenericRepository:41\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    spec\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Protected\n                        insertOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    insertOne(data: T)\n                \n            \n\n\n            \n                \n                    Inherited from         IGenericRepository\n\n                \n            \n            \n                \n                        Defined in         IGenericRepository:32\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                            T\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Protected\n                        updateOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateOne(spec: any, update: any)\n                \n            \n\n\n            \n                \n                    Inherited from         IGenericRepository\n\n                \n            \n            \n                \n                        Defined in         IGenericRepository:58\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    spec\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    update\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from \"@nestjs/common\";\nimport { InjectRepository } from \"@nestjs/typeorm\";\nimport { Repository } from \"typeorm\";\nimport { Line } from \"../transit/entities/line.entity\";\nimport { IGenericRepository } from \"./generic.repository\";\nimport { LiveData } from \"src/transit/entities/live.data\";\n\n@Injectable()\nexport class LiveDataRepository extends IGenericRepository{\n\n    constructor(@InjectRepository(LiveData) repo: Repository){\n        super(repo);\n    }\n\n    public override async insert(data: LiveData[]): Promise{\n        super.insert(data);\n    }\n    \n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/LiveUpdatesController.html":{"url":"controllers/LiveUpdatesController.html","title":"controller - LiveUpdatesController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  LiveUpdatesController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/transit/controllers/live.updates.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                live\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                getDepartures\n                            \n                            \n                                    Public\n                                    Async\n                                getLineBuses\n                            \n                            \n                                    Public\n                                    Async\n                                saveLiveData\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        getDepartures\n                        \n                    \n                \n            \n            \n                \n                    \n                    getDepartures(code: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/stops/:code')@Header('Content-Type', 'application/json')\n                \n            \n\n            \n                \n                    Defined in src/transit/controllers/live.updates.controller.ts:23\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    code\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        getLineBuses\n                        \n                    \n                \n            \n            \n                \n                    \n                    getLineBuses(code: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/lines/:code')@Header('Content-Type', 'application/json')\n                \n            \n\n            \n                \n                    Defined in src/transit/controllers/live.updates.controller.ts:29\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    code\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        saveLiveData\n                        \n                    \n                \n            \n            \n                \n                    \n                    saveLiveData()\n                \n            \n\n\n            \n                \n                    Defined in src/transit/controllers/live.updates.controller.ts:45\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     Promise\n\n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Header } from '@nestjs/common';\nimport { Param, Res } from '@nestjs/common/decorators/http/route-params.decorator';\nimport { LiveUpdatesService } from '../services/live.updates.service';\nimport { ArrivalDto } from '../transitDtos/arrival.dto';\nimport { Response } from 'express';\nimport {FeedEntity, VehicleDescriptor, VehiclePosition, Long, FeedHeader, FeedMessage, Position, TripDescriptor } from '../proto/position';\nimport Trip from '../proto/trips';\nimport { ScheduleService } from '../services/schedule.service';\nimport { DataService } from '../services/data.service';\nimport { Interval } from '@nestjs/schedule';\nimport { Stop } from '../entities/stop.entity';\nimport { LiveData } from '../entities/live.data';\nvar protobuf = require('protobufjs')\n\n\n@Controller('live')\nexport class LiveUpdatesController {\n\n    constructor(private liveService: LiveUpdatesService, private data: DataService){}\n\n    @Get('/stops/:code')\n    @Header('Content-Type', 'application/json')\n    public async getDepartures(@Param('code') code: string): Promise{\n        return this.liveService.liveDataBuilder(code);\n    }\n\n    @Get('/lines/:code')\n    @Header('Content-Type', 'application/json')\n    public async getLineBuses(@Param('code') code: string): Promise{\n\n        const arrivalsPromise = await this.liveService.getLiveData(code, 'lines/live/');\n        const arrivals: ArrivalDto[] = [];\n\n        if(arrivalsPromise && arrivalsPromise.data){\n            for (const e of arrivalsPromise.data) {\n                const arrival = new ArrivalDto(e);\n                arrivals.push(arrival);\n            }\n        }   \n        \n        return arrivals;\n    }\n\n    //@Interval(30000)\n    public async saveLiveData(): Promise{\n\n        const lineCodes: string[] = (await this.data.lines.getLines()).map(line => line.name);\n\n        for (const line of lineCodes) {\n            const buses: ArrivalDto[] = await this.getLineBuses(line);\n\n            for (const bus of buses) {\n\n                const stops: Stop[] = await this.data.stops.getRouteStops(bus.routeCode);\n                const prom: Promise[] = stops.map(stop => this.liveService.liveDataBuilder(stop.code));\n                const res: any[] = await Promise.all(prom);\n                const liveData: LiveData[] = [];\n                \n                for (let i = 0; i  0 && +data.vehicleLng > 0){\n                            liveData.push(data);\n                        }\n                        \n                    }\n                }\n                \n                await this.data.live.insert(liveData);\n            }\n        }\n    }\n}\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LiveUpdatesService.html":{"url":"injectables/LiveUpdatesService.html","title":"injectable - LiveUpdatesService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  LiveUpdatesService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/transit/services/live.updates.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                token\n                            \n                            \n                                    Private\n                                    Readonly\n                                uri\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                getLiveData\n                            \n                            \n                                    Public\n                                    Async\n                                liveDataBuilder\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(http: HttpService, data: DataService)\n                    \n                \n                        \n                            \n                                Defined in src/transit/services/live.updates.service.ts:16\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        http\n                                                  \n                                                        \n                                                                    HttpService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        data\n                                                  \n                                                        \n                                                                        DataService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        getLiveData\n                        \n                    \n                \n            \n            \n                \n                    \n                    getLiveData(code: string, slug: string)\n                \n            \n\n\n            \n                \n                    Defined in src/transit/services/live.updates.service.ts:20\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    code\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    slug\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        liveDataBuilder\n                        \n                    \n                \n            \n            \n                \n                    \n                    liveDataBuilder(stopCode: string)\n                \n            \n\n\n            \n                \n                    Defined in src/transit/services/live.updates.service.ts:27\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    stopCode\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        token\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE2NzQxOTg3NDl9.FTTcADyjD4ncnoelpdEayDoYlgiv0hH9AzTRxCSwoDI'\n                    \n                \n                    \n                        \n                                Defined in src/transit/services/live.updates.service.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        uri\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'https://rest.citybus.gr/api/v1/el/106/'\n                    \n                \n                    \n                        \n                                Defined in src/transit/services/live.updates.service.ts:16\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { HttpService } from '@nestjs/axios';\nimport { lastValueFrom, of } from 'rxjs';\nimport { DataService } from './data.service';\nimport { ArrivalDto } from '../transitDtos/arrival.dto';\nimport { Trip } from '../entities/trip.entity';\nimport { Schedule } from '../entities/schedule.entity';\nimport { Stop } from '../entities/stop.entity';\nimport { Interval } from '@nestjs/schedule';\n\n\n@Injectable()\nexport class LiveUpdatesService {\n\n    private readonly token: string = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE2NzQxOTg3NDl9.FTTcADyjD4ncnoelpdEayDoYlgiv0hH9AzTRxCSwoDI';\n    private readonly uri: string = 'https://rest.citybus.gr/api/v1/el/106/';\n    \n    constructor(private http: HttpService, private data: DataService){}\n\n    public async getLiveData(code: string, slug: string): Promise{\n        const action: string = slug + code;\n        return await lastValueFrom(this.http.get(this.uri + action, {withCredentials: false, headers:{\n            Authorization: 'Bearer ' + this.token,\n        }})).catch(e => {});\n    }\n\n    public async liveDataBuilder(stopCode: string): Promise{\n\n        const prom = await this.getLiveData(stopCode, 'stops/live/');\n        const stop: Stop | void = await this.data.stops.getOne(stopCode);\n\n        if(!prom || !prom.data || !prom.data.vehicles){\n            return [];\n        }\n\n        const arrivals: ArrivalDto[] = prom.data.vehicles.map((v: any) => new ArrivalDto(v));\n\n        if(!stop){\n            return arrivals;\n        }\n\n        for (const arrival of arrivals) {\n\n            if(+arrival.latitude == 0 || +arrival.longitude == 0){\n                continue;\n            }\n\n            const s: string = arrival.latitude + ',' + arrival.longitude;\n            const e: string = stop.latitude + ',' + stop.longitude;\n            const plan: any = await this.data.otp.getBus(s, e);\n\n            if(!plan || !plan.data.plan){\n                continue;\n            }\n\n            const it = plan.data.plan.itineraries[0];\n            \n            if(!it){\n                continue;\n            }\n\n            const arrivalMins = Math.floor(it.duration / 60);\n            const arrivalSeconds = it.duration - arrivalMins * 60;\n\n            arrival.arrivalMins = arrivalMins;\n            arrival.arrivalSeconds = arrivalSeconds;\n        }\n\n        return arrivals;\n    }\n\n}\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LocalAuthGuard.html":{"url":"classes/LocalAuthGuard.html","title":"class - LocalAuthGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LocalAuthGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/local-auth.guard.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { AuthGuard } from \"@nestjs/passport\";\n\nexport class LocalAuthGuard extends AuthGuard('local'){}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LocalStrategy.html":{"url":"injectables/LocalStrategy.html","title":"injectable - LocalStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  LocalStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/local.strategy.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(authService: AuthService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/local.strategy.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        authService\n                                                  \n                                                        \n                                                                        AuthService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(email: string, password: string)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/local.strategy.ts:14\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    password\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Strategy } from 'passport-local';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { Injectable, UnauthorizedException } from '@nestjs/common';\nimport { AuthService } from './auth.service';\nimport { User } from 'src/user/entities/user.entity';\n\n@Injectable()\nexport class LocalStrategy extends PassportStrategy(Strategy) {\n    \n  constructor(private authService: AuthService) {\n    super({ usernameField: 'email', passwordField: 'password'});\n  }\n\n  public async validate(email: string, password: string): Promise {\n    const user: User | void = await this.authService.validateUser(email, password);\n    if (!user) {\n      throw new UnauthorizedException();\n    }\n    return user;\n  }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Long.html":{"url":"interfaces/Long.html","title":"interface - Long","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  Long\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/transit/proto/position.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            high\n                                        \n                                \n                                \n                                        \n                                            low\n                                        \n                                \n                                \n                                        \n                                            unsigned\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        high\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        high:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        low\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        low:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        unsigned\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        unsigned:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface FeedHeader{\n    gtfsRealtimeVersion: string;\n    incrimentality: number;\n    timestamp: number;\n}\n\nexport interface TripDescriptor{\n    tripId: string;\n    startDate: string;\n    routeId: string;\n    directionId: number;\n}\n\nexport interface Position{\n    latitude: number;\n    longitude: number;\n}\n\nexport interface Long{\n    low: number;\n    high: number;\n    unsigned: boolean;\n}  \n\nexport interface VehicleDescriptor{\n    id: string;\n    label: string;\n}\n\nexport interface VehiclePosition{\n    currentStopSequence: number;\n    stopId: string;\n    occupancyStatus: number;\n    trip: TripDescriptor;\n    position: Position;\n    timestamp: Long;\n    vehicle: VehicleDescriptor;\n}\n\nexport interface FeedEntity{\n    id: string;\n    vehicle: VehiclePosition;\n}\n\nexport interface FeedMessage{\n    header: FeedHeader;\n    entity: FeedEntity[];\n}\n\nexport class PositionProto{\n\n    constructor(){}\n\n    public async createProto(data: FeedMessage){\n        \n    }\n\n\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/NavigatorStrategy.html":{"url":"interfaces/NavigatorStrategy.html","title":"interface - NavigatorStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  NavigatorStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/transit/Navigator/navigatorStrategy.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    \n                                        buildRoute\n                                    \n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        buildRoute\n                        \n                    \n                \n            \n            \n                \nbuildRoute(tripState: TripState, repository: IGenericRepository, http: HttpService)\n                \n            \n\n\n            \n                \n                    Defined in src/transit/Navigator/navigatorStrategy.ts:6\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    tripState\n                                    \n                                                TripState\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    repository\n                                    \n                                                IGenericRepository\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    http\n                                    \n                                            HttpService\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { HttpService } from \"@nestjs/axios\";\nimport { TripState } from \"src/transit/transitDtos/trip.state\";\nimport { IGenericRepository } from \"../../repositories/generic.repository\";\n\nexport interface NavigatorStrategy{\n    buildRoute(tripState: TripState, repository: IGenericRepository, http: HttpService): any;\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/NewSchedule.html":{"url":"entities/NewSchedule.html","title":"entity - NewSchedule","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  NewSchedule\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/transit/entities/newSchedule.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                day\n                            \n                            \n                                    Public\n                                id\n                            \n                            \n                                    Public\n                                line\n                            \n                            \n                                    Public\n                                routeCode\n                            \n                            \n                                    Public\n                                stopCode\n                            \n                            \n                                    Public\n                                trip_id\n                            \n                            \n                                    Public\n                                tripTime\n                            \n                            \n                                    Public\n                                tripTimeHour\n                            \n                            \n                                    Public\n                                tripTimeMinute\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        day\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryColumn({nullable: false, type: 'int'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/transit/entities/newSchedule.entity.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn({type: 'bigint'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/transit/entities/newSchedule.entity.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        line\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({nullable: false, type: 'varchar'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/transit/entities/newSchedule.entity.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        routeCode\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Index({unique: false})@PrimaryColumn({nullable: false, type: 'varchar'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/transit/entities/newSchedule.entity.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        stopCode\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Index({unique: false})@PrimaryColumn({nullable: false, type: 'varchar'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/transit/entities/newSchedule.entity.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        trip_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryColumn({type: 'bigint', nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/transit/entities/newSchedule.entity.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        tripTime\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({nullable: false, type: 'varchar'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/transit/entities/newSchedule.entity.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        tripTimeHour\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'int', nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/transit/entities/newSchedule.entity.ts:30\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        tripTimeMinute\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'int', nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/transit/entities/newSchedule.entity.ts:33\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Column, Entity, OneToMany, PrimaryColumn, Index, ManyToMany, JoinTable, JoinColumn, PrimaryGeneratedColumn} from 'typeorm';\n\n@Entity()\nexport class NewSchedule{\n\n    @PrimaryGeneratedColumn({type: 'bigint'})\n    public id: number;\n\n    @PrimaryColumn({type: 'bigint', nullable: false})\n    public trip_id: number;\n\n    @PrimaryColumn({nullable: false, type: 'int'})\n    public day: number;\n\n    @Index({unique: false})\n    @PrimaryColumn({nullable: false, type: 'varchar'})\n    public routeCode: string;\n\n    @Index({unique: false})\n    @PrimaryColumn({nullable: false, type: 'varchar'})\n    public stopCode: string;\n\n    @Column({nullable: false, type: 'varchar'})\n    public line: string;\n\n    @Column({nullable: false, type: 'varchar'})\n    public tripTime: string;\n\n    @Column({type: 'int', nullable: false})\n    public tripTimeHour: number;\n\n    @Column({type: 'int', nullable: false})\n    public tripTimeMinute: number;   \n    \n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/NewScheduleService.html":{"url":"classes/NewScheduleService.html","title":"class - NewScheduleService","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  NewScheduleService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/transit/services/newSchedule.service.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                getAll\n                            \n                            \n                                    Public\n                                    Async\n                                insert\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(repo: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/transit/services/newSchedule.service.ts:6\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        repo\n                                                  \n                                                        \n                                                                    Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        getAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    getAll()\n                \n            \n\n\n            \n                \n                    Defined in src/transit/services/newSchedule.service.ts:14\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        insert\n                        \n                    \n                \n            \n            \n                \n                    \n                    insert(data: any[])\n                \n            \n\n\n            \n                \n                    Defined in src/transit/services/newSchedule.service.ts:10\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                            any[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { InjectDataSource, InjectRepository } from \"@nestjs/typeorm\";\nimport { DataSource, Repository, UpdateResult } from \"typeorm\";\nimport { NewSchedule } from \"../entities/newSchedule.entity\";\n\n\nexport class NewScheduleService{\n\n    constructor(@InjectRepository(NewSchedule) private repo: Repository,){}\n\n    public async insert(data: any[]): Promise {\n        return this.repo.save(data, {chunk: 1000}).catch(e => console.log(e));\n    }\n\n    public async getAll(): Promise{\n        return this.repo\n            .createQueryBuilder()\n            .select(['*'])\n            .execute()\n            .catch(e => console.log(e));\n    }\n\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/OTPParams.html":{"url":"classes/OTPParams.html","title":"class - OTPParams","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  OTPParams\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/transit/transitDtos/trip.state.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                arriveBy\n                            \n                            \n                                    Public\n                                date\n                            \n                            \n                                    Public\n                                debugItineraryFilter\n                            \n                            \n                                    Public\n                                fromPlace\n                            \n                            \n                                    Public\n                                locale\n                            \n                            \n                                    Public\n                                maxWalkDistance\n                            \n                            \n                                    Public\n                                mode\n                            \n                            \n                                    Public\n                                otherThanPreferredRoutesPenalty\n                            \n                            \n                                    Public\n                                preferredRoutes\n                            \n                            \n                                    Public\n                                showIntermediateStops\n                            \n                            \n                                    Public\n                                time\n                            \n                            \n                                    Public\n                                toPlace\n                            \n                            \n                                    Public\n                                wheelchair\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                apiDateFormat\n                            \n                            \n                                    Public\n                                buildQueryParams\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \n                                Public\n                        constructor(init: TripState)\n                    \n                \n                        \n                            \n                                Defined in src/transit/transitDtos/trip.state.ts:27\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        init\n                                                  \n                                                        \n                                                                        TripState\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        arriveBy\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in src/transit/transitDtos/trip.state.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        date\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/transit/transitDtos/trip.state.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        debugItineraryFilter\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                    \n                        \n                                Defined in src/transit/transitDtos/trip.state.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        fromPlace\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/transit/transitDtos/trip.state.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        locale\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'en'\n                    \n                \n                    \n                        \n                                Defined in src/transit/transitDtos/trip.state.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        maxWalkDistance\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : '4828.032'\n                    \n                \n                    \n                        \n                                Defined in src/transit/transitDtos/trip.state.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        mode\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'TRANSIT,WALK'\n                    \n                \n                    \n                        \n                                Defined in src/transit/transitDtos/trip.state.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        otherThanPreferredRoutesPenalty\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : '0'\n                    \n                \n                    \n                        \n                                Defined in src/transit/transitDtos/trip.state.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        preferredRoutes\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : '1__16'\n                    \n                \n                    \n                        \n                                Defined in src/transit/transitDtos/trip.state.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        showIntermediateStops\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : true\n                    \n                \n                    \n                        \n                                Defined in src/transit/transitDtos/trip.state.ts:25\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        time\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/transit/transitDtos/trip.state.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        toPlace\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/transit/transitDtos/trip.state.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        wheelchair\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                    \n                        \n                                Defined in src/transit/transitDtos/trip.state.ts:22\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        apiDateFormat\n                        \n                    \n                \n            \n            \n                \n                    \n                    apiDateFormat(date: Date)\n                \n            \n\n\n            \n                \n                    Defined in src/transit/transitDtos/trip.state.ts:65\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    date\n                                    \n                                                Date\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        buildQueryParams\n                        \n                    \n                \n            \n            \n                \n                    \n                    buildQueryParams()\n                \n            \n\n\n            \n                \n                    Defined in src/transit/transitDtos/trip.state.ts:44\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { initialize } from \"passport\";\n\nexport interface TripState {\n    start: string[];\n    destination: string[];\n    direction: string;\n    time: string;\n    date: Date;\n    arriveBy: string;\n    fetch: boolean;\n}\n\nexport class OTPParams{\n\n    public fromPlace: string;\n    public toPlace: string;\n    public time: string;\n    public date: string;\n    public arriveBy: boolean;\n    public mode: string = 'TRANSIT,WALK';\n    public maxWalkDistance: string = '4828.032';\n    public wheelchair: boolean = false;\n    public preferredRoutes: string = '1__16';\n    public otherThanPreferredRoutesPenalty: string = '0';\n    public showIntermediateStops: boolean = true;\n    public debugItineraryFilter: boolean = false;\n    public locale: string = 'en';\n\n    public constructor(init: TripState){\n\n        this.fromPlace = `${init.start[2]},${init.start[3]}`;\n        this.toPlace = `${init.destination[2]},${init.destination[3]}`;\n        this.date = this.apiDateFormat(init.date);\n        this.time = init.time;\n\n        if(init.arriveBy == 'depart'){\n            this.arriveBy = false;\n        }else{\n            this.arriveBy = true;\n        }\n\n    }\n \n    public buildQueryParams(): string{\n\n        const params: string[] = [\n            `fromPlace=${this.fromPlace}&`,\n            `toPlace=${this.toPlace}&`,\n            `time=${this.time}&`,\n            `date=${this.date}&`,\n            `arriveBy=${this.arriveBy}&`,\n            `mode=${this.mode}&`,\n            `maxWalkDistance=${this.maxWalkDistance}&`,\n            `wheelChair=${this.wheelchair}&`,\n            `preferedRoutes=${this.preferredRoutes}&`,\n            `otherThanPreferredRoutesPenalty=${this.otherThanPreferredRoutesPenalty}&`,\n            `showIntermediateStops=${this.showIntermediateStops}&`,\n            `debugItineraryFilter=${this.debugItineraryFilter}&`,\n            `locale=${this.locale}`\n        ];\n\n        return params.join('');\n    }\n\n    private apiDateFormat(date: Date): string{\n\n        let new_date: Date = new Date(date);\n        let year = new_date.getFullYear();\n        let month = (1 + new_date.getMonth()).toString();\n        let day = new_date.getDate().toString();\n\n        month = month.length > 1 ? month : '0' + month;\n        day = day.length > 1 ? day : '0' + day;\n\n        return month + '-' + day + '-' + year;\n    }\n\n}\n\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/OTPService.html":{"url":"injectables/OTPService.html","title":"injectable - OTPService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  OTPService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/transit/services/otp.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                uri\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                getBookingPlan\n                            \n                            \n                                    Public\n                                    Async\n                                getBus\n                            \n                            \n                                    Public\n                                    Async\n                                getPlan\n                            \n                            \n                                    Public\n                                    Async\n                                getTrips\n                            \n                            \n                                    Private\n                                    Async\n                                planBuilder\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(http: HttpService, tripRepo: TripRepository)\n                    \n                \n                        \n                            \n                                Defined in src/transit/services/otp.service.ts:13\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        http\n                                                  \n                                                        \n                                                                    HttpService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        tripRepo\n                                                  \n                                                        \n                                                                        TripRepository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        getBookingPlan\n                        \n                    \n                \n            \n            \n                \n                    \n                    getBookingPlan(booking: Booking)\n                \n            \n\n\n            \n                \n                    Defined in src/transit/services/otp.service.ts:27\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    booking\n                                    \n                                                Booking\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        getBus\n                        \n                    \n                \n            \n            \n                \n                    \n                    getBus(start: string, end: string)\n                \n            \n\n\n            \n                \n                    Defined in src/transit/services/otp.service.ts:21\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    start\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    end\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        getPlan\n                        \n                    \n                \n            \n            \n                \n                    \n                    getPlan(state: TripState)\n                \n            \n\n\n            \n                \n                    Defined in src/transit/services/otp.service.ts:53\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    state\n                                    \n                                                TripState\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        getTrips\n                        \n                    \n                \n            \n            \n                \n                    \n                    getTrips(slug: string)\n                \n            \n\n\n            \n                \n                    Defined in src/transit/services/otp.service.ts:17\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    slug\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        Async\n                        planBuilder\n                        \n                    \n                \n            \n            \n                \n                    \n                    planBuilder(plan: Plan, slug: string)\n                \n            \n\n\n            \n                \n                    Defined in src/transit/services/otp.service.ts:63\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    plan\n                                    \n                                                Plan\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    slug\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        uri\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'http://localhost:8080/otp/routers/default/plan?'\n                    \n                \n                    \n                        \n                                Defined in src/transit/services/otp.service.ts:13\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { HttpService } from '@nestjs/axios';\nimport { lastValueFrom } from 'rxjs';\nimport { OTPParams, TripState } from '../transitDtos/trip.state';\nimport { Itinerary, Leg, Plan, Step, Vertex } from '../transitDtos/itinerary.dto';\nimport { Trip } from '../entities/trip.entity';\nimport { TripRepository } from 'src/repositories/trip.repository';\nimport { Booking } from 'src/user/entities/booking.entity';\n\n@Injectable()\nexport class OTPService {\n\n    private readonly uri: string = 'http://localhost:8080/otp/routers/default/plan?';\n    \n    constructor(private http: HttpService, private tripRepo: TripRepository){}\n\n    public async getTrips(slug: string): Promise{\n        return lastValueFrom(this.http.get(this.uri + slug)).catch(e => console.log(e));\n    }\n\n    public async getBus(start: string, end: string): Promise{\n                \n        const url: string = `http://localhost:8080/otp/routers/default/plan?fromPlace=${start}&toPlace=${end}&time=1:19pm&date=01-09-2023&mode=CAR&arriveBy=false&wheelchair=false&showIntermediateStops=true&debugItineraryFilter=false&locale=en`;\n        return lastValueFrom(this.http.get(url)).catch(e => console.log(e));\n    }\n\n    public async getBookingPlan(booking: Booking): Promise{\n\n        const { data } = await this.getTrips(booking.slug);\n        const plan: Plan = data.plan;\n        const new_plan: Plan = await this.planBuilder(plan, '');\n        const itineraries: Itinerary[] = [];\n        const legs: Leg[] = [];\n\n        new_plan.itineraries.forEach(it => {\n            it.legs.forEach(leg => {\n                if( leg.mode == 'TRAM' && \n                    +leg.tripId == booking.trip_id && \n                    leg.from.stopCode == booking.startStop &&\n                    leg.to.stopCode == booking.endStop\n                ){\n                    legs.push(leg);\n                    itineraries.push(it);\n                }\n            });\n            it.legs = legs;\n        });\n        \n        new_plan.itineraries = itineraries;\n        return new_plan;\n    }\n\n    public async getPlan(state: TripState): Promise{\n\n        const otpParams: OTPParams = new OTPParams(state);\n        const queryString: string = otpParams.buildQueryParams();\n        const { data } = await this.getTrips(queryString);\n        const plan: Plan = data.plan;\n        \n        return this.planBuilder(plan, queryString);\n    }\n\n    private async planBuilder(plan: Plan, slug: string): Promise{\n\n        const itineraries: Itinerary[] = [];\n        const trip_ids: any[] = [];\n        const stopCodes: string[] = [];\n\n        for (const it of plan.itineraries) {\n\n            if(it.transitTime == 0){\n                continue;\n            }\n\n            const legs: Leg[] = [];\n            for(const leg of it.legs){\n\n                const stops: Vertex[] = [];\n                const from: Vertex = new Vertex(leg.from);\n                const to: Vertex = new Vertex(leg.to);\n                const steps: Step[] = leg.steps.map(s => new Step(s));\n\n                if(leg.intermediateStops){\n                    leg.intermediateStops.forEach(s => stops.push(new Vertex(s)));\n                }\n\n                if(leg.mode == 'TRAM'){\n                    trip_ids.push(+leg.tripId.split(\":\")[1]);\n                    stopCodes.push(leg.from.stopCode);\n                }\n\n                legs.push(new Leg(leg, steps, from, to, stops, leg.legGeometry.points));\n            }\n\n            itineraries.push(new Itinerary(it, legs));\n        }\n\n        const new_plan: Plan = new Plan(plan, itineraries, slug);   \n        const trips: Trip[] = await this.tripRepo.getOccupation(trip_ids, stopCodes);  \n        const occupancy: any = {};  \n\n        new_plan.itineraries.forEach(it => {\n            it.legs.forEach(leg => {\n\n                leg.setFlexGrow(it.duration);\n                \n                if(leg.mode == 'TRAM'){\n                    const trip: Trip = trips.find(t => t.trip_id == +leg.tripId);\n                    occupancy[leg.tripId] = trip.totalSeats - trip.occupied;\n                }\n                \n            });\n        });\n\n        new_plan.occupancy = occupancy;\n        return new_plan;\n    }\n\n}\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/OTPStrategy.html":{"url":"classes/OTPStrategy.html","title":"class - OTPStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  OTPStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/transit/Navigator/Strategies/otp.strategy.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                            NavigatorStrategy\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                buildRoute\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        buildRoute\n                        \n                    \n                \n            \n            \n                \n                    \n                    buildRoute(tripState: TripState, routeRepo: RouteRepository, http: HttpService)\n                \n            \n\n\n            \n                \n                    Defined in src/transit/Navigator/Strategies/otp.strategy.ts:11\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    tripState\n                                    \n                                                TripState\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    routeRepo\n                                    \n                                                RouteRepository\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    http\n                                    \n                                            HttpService\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { HttpService } from \"@nestjs/axios\";\nimport { Route } from \"src/transit/entities/route.entity\";\nimport { RouteRepository } from \"src/repositories/route.repository\";\nimport { OTPService } from \"src/transit/services/otp.service\";\nimport { Itinerary, Leg, Plan, Step, Vertex } from \"src/transit/transitDtos/itinerary.dto\";\nimport { OTPParams, TripState } from \"src/transit/transitDtos/trip.state\";\nimport { NavigatorStrategy } from \"../navigatorStrategy\";\n\nexport class OTPStrategy implements NavigatorStrategy{\n\n    public async buildRoute(tripState: TripState, routeRepo: RouteRepository, http: HttpService): Promise {\n        \n        return;\n    }\n\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Plan.html":{"url":"classes/Plan.html","title":"class - Plan","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Plan\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/transit/transitDtos/itinerary.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                arriveBy\n                            \n                            \n                                    Public\n                                date\n                            \n                            \n                                    Public\n                                from\n                            \n                            \n                                    Public\n                                itineraries\n                            \n                            \n                                    Public\n                                occupancy\n                            \n                            \n                                    Public\n                                slug\n                            \n                            \n                                    Public\n                                to\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(plan: Plan, it: Itinerary[], slug: string)\n                    \n                \n                        \n                            \n                                Defined in src/transit/transitDtos/itinerary.dto.ts:174\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        plan\n                                                  \n                                                        \n                                                                        Plan\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        it\n                                                  \n                                                        \n                                                                        Itinerary[]\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        slug\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        arriveBy\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/transit/transitDtos/itinerary.dto.ts:171\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        date\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/transit/transitDtos/itinerary.dto.ts:168\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        from\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Vertex\n\n                    \n                \n                    \n                        \n                                Defined in src/transit/transitDtos/itinerary.dto.ts:169\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        itineraries\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Itinerary[]\n\n                    \n                \n                    \n                        \n                                Defined in src/transit/transitDtos/itinerary.dto.ts:172\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        occupancy\n                        \n                    \n                \n            \n                \n                    \n                        Type :         any\n\n                    \n                \n                    \n                        \n                                Defined in src/transit/transitDtos/itinerary.dto.ts:174\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        slug\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/transit/transitDtos/itinerary.dto.ts:173\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        to\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Vertex\n\n                    \n                \n                    \n                        \n                                Defined in src/transit/transitDtos/itinerary.dto.ts:170\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        var polyline = require( 'google-polyline' );\n\nexport class Step{\n\n    public distance: number;\n    public relativeDirection: string;\n    public streetName: string;\n    public absoluteDirection: string;\n    public exit: string;\n    public lon: number;\n    public lat: number;\n\n    constructor(step: Step){\n        this.distance = Math.floor(step.distance);\n        this.relativeDirection = step.relativeDirection;\n        this.streetName = step.streetName;\n        this.absoluteDirection = step.absoluteDirection;\n        this.exit = step.exit;\n        this.lon = step.lon;\n        this.lat = step.lat;\n    }\n\n}\n\nexport class Vertex{\n\n    public name: string;\n    public lon: string;\n    public lat: string;\n    public vertexType: string;\n    public departure: string;\n    public arrival: string;\n    public stopCode?: string;\n    public stopId?: string;\n    public stopIndex: number;\n    public stopSequence: number;\n\n    constructor(v: Vertex){\n        this.name = v.name;\n        this.lon = v.lon;\n        this.lat = v.lat;\n        this.vertexType = v.vertexType;\n        this.stopCode = v.stopCode;\n        this.stopId = v.stopCode;\n        this.stopIndex = v.stopIndex;\n        this.stopSequence = v.stopSequence;\n        this.arrival = this.edit(+v.arrival);\n        this.departure = this.edit(+v.departure);\n    }\n\n    private edit(time: number): string{\n        const date = new Date(time).toLocaleTimeString().split(\":\");\n        return date[0] + ':' + date[1];\n    }\n\n}\n\nexport class Leg{\n\n    public points: string[];\n    public duration: number;\n    public transitTime: number;\n    public mode: string;\n    public steps: Step[];\n    public routeId: string | undefined;\n    public tripId: string | undefined;\n    public serviceDate: string;\n    public agencyName: string;\n    public agencyTimeZoneOffset: number;\n    public startTime: string;\n    public endTime: string;\n    public distance: number;\n    public departureDelay: number;\n    public arrivalDelay: number;\n    public routeShortName: string;\n    public from: Vertex;\n    public to: Vertex;\n    public intermediateStops: Vertex[] = [];\n    public legGeometry: any;\n    public flex: number;\n    public occupancyStatus: number;\n\n    constructor(leg: Leg, steps: Step[], from: Vertex, to: Vertex, stops: Vertex[], points: string){\n        this.points = polyline.decode(points);\n        this.duration = Math.floor(leg.duration/60);\n        this.transitTime = Math.floor(leg.transitTime/60);\n        this.mode = leg.mode;\n        this.routeId = this.setRoute(leg.routeId);\n        this.tripId = this.setTrip(leg.tripId);\n        this.serviceDate = leg.serviceDate;\n        this.agencyName = leg.agencyName;\n        this.agencyTimeZoneOffset = leg.agencyTimeZoneOffset;\n        this.startTime = this.edit(+leg.startTime);\n        this.endTime = this.edit(+leg.endTime);\n        this.distance = Math.floor(leg.distance);\n        this.arrivalDelay = Math.floor(leg.arrivalDelay/60);\n        this.routeShortName = leg.routeShortName;\n        this.steps = steps;\n        this.from = from;\n        this.to = to;\n        this.departureDelay = Math.floor(leg.departureDelay/60);\n        this.intermediateStops = stops;\n    }\n\n    public setRoute(route: string){\n        if(route){\n            return route.split(\":\")[1];\n        }else{\n            return undefined;\n        }\n    }\n\n    public setTrip(trip_id: string | undefined){\n        if(trip_id){\n            return trip_id.split(\":\")[1];\n        }else{\n            return undefined;\n        }\n    }\n\n    private edit(time: number): string{\n        const date = new Date(time).toLocaleTimeString().split(\":\");\n        return date[0] + ':' + date[1];\n    }\n\n    public setFlexGrow(totalDuration: number){\n        this.flex = Math.floor(this.duration/totalDuration * 10);\n    }\n\n}\n\nexport class Itinerary{\n\n    public duration: number;\n    public startTime: string;\n    public endTime: string;\n    public walkTime: number;\n    public transitTime: number;\n    public waitingTime: number;\n    public walkDistance: number;\n    public arrivalDelay: number;\n    public departureDelay: number;\n    public serviceDate: string;\n    public legs: Leg[];\n\n    constructor(it: Itinerary, legs: Leg[]){\n        this.duration = Math.floor(it.duration/60);\n        this.transitTime = Math.floor(it.transitTime/60);\n        this.waitingTime = Math.floor(it.waitingTime/60);\n        this.walkDistance = Math.floor(it.walkDistance);\n        this.legs = legs;\n        this.startTime = this.edit(+it.startTime);\n        this.endTime = this.edit(+it.endTime);\n        this.walkTime = Math.floor(it.walkTime/60);\n        this.arrivalDelay = it.arrivalDelay;\n        this.departureDelay = it.departureDelay;\n        this.serviceDate = it.serviceDate;\n    }\n\n    private edit(time: number): string{\n        const date = new Date(time).toLocaleTimeString().split(\":\");\n        return date[0] + ':' + date[1];\n    }\n}\n\nexport class Plan{\n\n    public date: string;\n    public from: Vertex;\n    public to: Vertex;\n    public arriveBy: string;\n    public itineraries: Itinerary[];\n    public slug: string;\n    public occupancy: any;\n\n    constructor(plan: Plan, it: Itinerary[], slug: string){\n        this.date = new Date(plan.date).toLocaleString();\n        this.from = new Vertex(plan.from);\n        this.to = new Vertex(plan.to);\n        this.itineraries = it;\n        this.slug = slug;\n    }\n\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Point.html":{"url":"entities/Point.html","title":"entity - Point","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Point\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/transit/entities/point.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                id\n                            \n                            \n                                    Public\n                                latitude\n                            \n                            \n                                    Public\n                                longitude\n                            \n                            \n                                    Public\n                                route\n                            \n                            \n                                    Public\n                                routeCode\n                            \n                            \n                                    Public\n                                sequence\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryColumn({type: 'bigint'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/transit/entities/point.entity.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        latitude\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({nullable: false, type: 'varchar'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/transit/entities/point.entity.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        longitude\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({nullable: false, type: 'varchar'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/transit/entities/point.entity.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        route\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Route\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, route => route.points)@JoinColumn({name: 'routeCode', referencedColumnName: 'code'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/transit/entities/point.entity.ts:25\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        routeCode\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Index()@Column({nullable: false, type: 'varchar'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/transit/entities/point.entity.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        sequence\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({nullable: false, type: 'int'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/transit/entities/point.entity.ts:17\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Column, Entity, Index, JoinColumn, ManyToOne, PrimaryColumn, PrimaryGeneratedColumn} from 'typeorm';\nimport { Route } from './route.entity';\n\n@Entity()\nexport class Point{\n\n    @PrimaryColumn({type: 'bigint'})\n    public id: number;\n\n    @Column({nullable: false, type: 'varchar'})\n    public longitude: string;\n\n    @Column({nullable: false, type: 'varchar'})\n    public latitude: string;\n\n    @Column({nullable: false, type: 'int'})\n    public sequence: number;\n\n    @Index()\n    @Column({nullable: false, type: 'varchar'})\n    public routeCode: string;\n\n    @ManyToOne(() => Route, (route: Route) => route.points)\n    @JoinColumn({name: 'routeCode', referencedColumnName: 'code'})\n    public route: Route;\n\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PointDto.html":{"url":"classes/PointDto.html","title":"class - PointDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PointDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/transit/transitDtos/point.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                id\n                            \n                            \n                                    Public\n                                latitude\n                            \n                            \n                                    Public\n                                longitude\n                            \n                            \n                                    Public\n                                routeCode\n                            \n                            \n                                    Public\n                                sequence\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/transit/transitDtos/point.dto.ts:3\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        latitude\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/transit/transitDtos/point.dto.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        longitude\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/transit/transitDtos/point.dto.ts:5\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        routeCode\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/transit/transitDtos/point.dto.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        sequence\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/transit/transitDtos/point.dto.ts:4\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class PointDto{\n    public id: number;\n    public sequence: number;\n    public longitude: string;\n    public latitude: string;\n    public routeCode: string;\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PointRepository.html":{"url":"classes/PointRepository.html","title":"class - PointRepository","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PointRepository\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/repositories/point.repository.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        IGenericRepository\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    \n                                get\n                            \n                            \n                                    Public\n                                    \n                                getAll\n                            \n                            \n                                    Public\n                                    \n                                    Async\n                                insert\n                            \n                            \n                                    Protected\n                                deleteOne\n                            \n                            \n                                    Protected\n                                    Async\n                                getOne\n                            \n                            \n                                    Protected\n                                insertOne\n                            \n                            \n                                    Protected\n                                updateOne\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \n                                Public\n                        constructor(pointRepo: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/repositories/point.repository.ts:6\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        pointRepo\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        \n                        get\n                        \n                    \n                \n            \n            \n                \n                    \n                    get(routeCode: string)\n                \n            \n\n\n            \n                \n                    Inherited from         IGenericRepository\n\n                \n            \n            \n                \n                        Defined in         IGenericRepository:16\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    routeCode\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        \n                        getAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    getAll()\n                \n            \n\n\n            \n                \n                    Inherited from         IGenericRepository\n\n                \n            \n            \n                \n                        Defined in         IGenericRepository:12\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        \n                        Async\n                        insert\n                        \n                    \n                \n            \n            \n                \n                    \n                    insert(data: Point[])\n                \n            \n\n\n            \n                \n                    Inherited from         IGenericRepository\n\n                \n            \n            \n                \n                        Defined in         IGenericRepository:20\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                                Point[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Protected\n                        deleteOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteOne(spec: any)\n                \n            \n\n\n            \n                \n                    Inherited from         IGenericRepository\n\n                \n            \n            \n                \n                        Defined in         IGenericRepository:49\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    spec\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Protected\n                        Async\n                        getOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    getOne(spec: any)\n                \n            \n\n\n            \n                \n                    Inherited from         IGenericRepository\n\n                \n            \n            \n                \n                        Defined in         IGenericRepository:41\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    spec\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Protected\n                        insertOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    insertOne(data: T)\n                \n            \n\n\n            \n                \n                    Inherited from         IGenericRepository\n\n                \n            \n            \n                \n                        Defined in         IGenericRepository:32\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                            T\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Protected\n                        updateOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateOne(spec: any, update: any)\n                \n            \n\n\n            \n                \n                    Inherited from         IGenericRepository\n\n                \n            \n            \n                \n                        Defined in         IGenericRepository:58\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    spec\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    update\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { InjectDataSource, InjectRepository } from \"@nestjs/typeorm\";\nimport { DataSource, Repository, UpdateResult } from \"typeorm\";\nimport { Point } from \"../transit/entities/point.entity\";\nimport { IGenericRepository } from \"./generic.repository\";\n\nexport class PointRepository extends IGenericRepository{\n\n    public constructor(@InjectRepository(Point) pointRepo: Repository){\n        super(pointRepo);\n    }\n\n    public override getAll(): Promise {\n        return super.getAll();\n    }\n\n    public override get(routeCode: string): Promise{\n        return super.get({routeCode: routeCode});\n    }\n\n    public override async insert(data: Point[]): Promise {\n        super.insert(data);\n    }\n\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PointService.html":{"url":"injectables/PointService.html","title":"injectable - PointService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  PointService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/transit/services/points.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                getRoutePoints\n                            \n                            \n                                    Public\n                                    Async\n                                insert\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(repo: PointRepository)\n                    \n                \n                        \n                            \n                                Defined in src/transit/services/points.service.ts:6\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        repo\n                                                  \n                                                        \n                                                                        PointRepository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        getRoutePoints\n                        \n                    \n                \n            \n            \n                \n                    \n                    getRoutePoints(routeCode: string)\n                \n            \n\n\n            \n                \n                    Defined in src/transit/services/points.service.ts:10\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    routeCode\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        insert\n                        \n                    \n                \n            \n            \n                \n                    \n                    insert(points: Point[])\n                \n            \n\n\n            \n                \n                    Defined in src/transit/services/points.service.ts:14\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    points\n                                    \n                                                Point[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { Point } from '../entities/point.entity';\nimport { PointRepository } from '../../repositories/point.repository';\n\n@Injectable()\nexport class PointService {\n\n    constructor(private repo: PointRepository) {}\n\n    public async getRoutePoints(routeCode: string): Promise{\n        return this.repo.get(routeCode);\n    }\n\n    public async insert(points: Point[]): Promise{\n        return this.repo.insert(points);\n    }\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Position.html":{"url":"interfaces/Position.html","title":"interface - Position","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  Position\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/transit/proto/position.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            latitude\n                                        \n                                \n                                \n                                        \n                                            longitude\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        latitude\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        latitude:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        longitude\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        longitude:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface FeedHeader{\n    gtfsRealtimeVersion: string;\n    incrimentality: number;\n    timestamp: number;\n}\n\nexport interface TripDescriptor{\n    tripId: string;\n    startDate: string;\n    routeId: string;\n    directionId: number;\n}\n\nexport interface Position{\n    latitude: number;\n    longitude: number;\n}\n\nexport interface Long{\n    low: number;\n    high: number;\n    unsigned: boolean;\n}  \n\nexport interface VehicleDescriptor{\n    id: string;\n    label: string;\n}\n\nexport interface VehiclePosition{\n    currentStopSequence: number;\n    stopId: string;\n    occupancyStatus: number;\n    trip: TripDescriptor;\n    position: Position;\n    timestamp: Long;\n    vehicle: VehicleDescriptor;\n}\n\nexport interface FeedEntity{\n    id: string;\n    vehicle: VehiclePosition;\n}\n\nexport interface FeedMessage{\n    header: FeedHeader;\n    entity: FeedEntity[];\n}\n\nexport class PositionProto{\n\n    constructor(){}\n\n    public async createProto(data: FeedMessage){\n        \n    }\n\n\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PositionProto.html":{"url":"classes/PositionProto.html","title":"class - PositionProto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PositionProto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/transit/proto/position.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                createProto\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/transit/proto/position.ts:51\n                            \n                        \n\n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        createProto\n                        \n                    \n                \n            \n            \n                \n                    \n                    createProto(data: FeedMessage)\n                \n            \n\n\n            \n                \n                    Defined in src/transit/proto/position.ts:55\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                                FeedMessage\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        export interface FeedHeader{\n    gtfsRealtimeVersion: string;\n    incrimentality: number;\n    timestamp: number;\n}\n\nexport interface TripDescriptor{\n    tripId: string;\n    startDate: string;\n    routeId: string;\n    directionId: number;\n}\n\nexport interface Position{\n    latitude: number;\n    longitude: number;\n}\n\nexport interface Long{\n    low: number;\n    high: number;\n    unsigned: boolean;\n}  \n\nexport interface VehicleDescriptor{\n    id: string;\n    label: string;\n}\n\nexport interface VehiclePosition{\n    currentStopSequence: number;\n    stopId: string;\n    occupancyStatus: number;\n    trip: TripDescriptor;\n    position: Position;\n    timestamp: Long;\n    vehicle: VehicleDescriptor;\n}\n\nexport interface FeedEntity{\n    id: string;\n    vehicle: VehiclePosition;\n}\n\nexport interface FeedMessage{\n    header: FeedHeader;\n    entity: FeedEntity[];\n}\n\nexport class PositionProto{\n\n    constructor(){}\n\n    public async createProto(data: FeedMessage){\n        \n    }\n\n\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Route.html":{"url":"entities/Route.html","title":"entity - Route","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Route\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/transit/entities/route.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                code\n                            \n                            \n                                    Public\n                                desc\n                            \n                            \n                                    Public\n                                desc_eng\n                            \n                            \n                                    Public\n                                direction\n                            \n                            \n                                    Public\n                                id\n                            \n                            \n                                    Public\n                                line\n                            \n                            \n                                    Public\n                                lineId\n                            \n                            \n                                    Public\n                                points\n                            \n                            \n                                    Public\n                                stopCodes\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        code\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Index({unique: true})@PrimaryColumn({nullable: false, type: 'varchar'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/transit/entities/route.entity.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        desc\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({nullable: true, type: 'varchar'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/transit/entities/route.entity.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        desc_eng\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({nullable: true, type: 'varchar'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/transit/entities/route.entity.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        direction\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({nullable: true, type: 'int'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/transit/entities/route.entity.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({nullable: false, type: 'bigint', unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/transit/entities/route.entity.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        line\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Line\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, line => line.routes, {cascade: true, nullable: false})@JoinColumn({referencedColumnName: 'id', name: 'lineId'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/transit/entities/route.entity.ts:37\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        lineId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({nullable: false, type: 'bigint'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/transit/entities/route.entity.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        points\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Point[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany(undefined, point => point.route, {cascade: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/transit/entities/route.entity.ts:40\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        stopCodes\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('simple-array', {nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/transit/entities/route.entity.ts:30\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { User } from 'src/user/entities/user.entity';\nimport { Column, Entity, OneToMany, PrimaryColumn, Index, ManyToOne, JoinTable, ManyToMany, JoinColumn} from 'typeorm';\nimport { Line } from './line.entity';\nimport { Point } from './point.entity';\nimport { Stop } from './stop.entity';\n\n@Entity()\nexport class Route{\n\n    @Column({nullable: false, type: 'bigint', unique: true})\n    public id: number;\n\n    @Index({unique: true})\n    @PrimaryColumn({nullable: false, type: 'varchar'})\n    public code: string;\n\n    @Column({nullable: false, type: 'bigint'})\n    public lineId: number;\n\n    @Column({nullable: true, type: 'int'})\n    public direction: number;\n\n    @Column({nullable: true, type: 'varchar'})\n    public desc_eng: string;\n\n    @Column({nullable: true, type: 'varchar'})\n    public desc: string;\n\n    @Column('simple-array', {nullable: true})\n    public stopCodes: string[];\n\n    @ManyToOne(() => Line, (line: Line) => line.routes, {\n        cascade: true, \n        nullable: false, \n    })\n    @JoinColumn({referencedColumnName: 'id', name: 'lineId'})\n    public line: Line;\n\n    @OneToMany(() => Point, (point: Point) => point.route, {cascade: true})\n    public points: Point[];\n\n    // @ManyToMany(() => Stop, {cascade: true})\n    // @JoinTable({\n    //     name: 'route_stops', \n    //     joinColumn: {name: 'routeCode', referencedColumnName: 'code'}, \n    //     inverseJoinColumn: {name: 'stopCode', referencedColumnName: 'code'}\n    // })\n    // public stops: Stop[];\n\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RouteDto.html":{"url":"classes/RouteDto.html","title":"class - RouteDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RouteDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/transit/transitDtos/route.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                code\n                            \n                            \n                                    Public\n                                desc\n                            \n                            \n                                    Public\n                                desc_eng\n                            \n                            \n                                    Public\n                                direction\n                            \n                            \n                                    Public\n                                id\n                            \n                            \n                                    Public\n                                lineId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        code\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/transit/transitDtos/route.dto.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        desc\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/transit/transitDtos/route.dto.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        desc_eng\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/transit/transitDtos/route.dto.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        direction\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/transit/transitDtos/route.dto.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/transit/transitDtos/route.dto.ts:5\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        lineId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/transit/transitDtos/route.dto.ts:7\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Point } from \"src/transit/entities/point.entity\";\nimport { Stop } from \"src/transit/entities/stop.entity\";\n\nexport class RouteDto{\n    public id: number;\n    public code: string;\n    public lineId: number;\n    public direction: number;\n    public desc_eng: string;\n    public desc: string;\n}\n\nexport class RouteInfoDto{\n\n    public stops: Stop[];\n    public points: Point[];\n    public code: string;\n\n    constructor(stops: Stop[], points: Point[], code: string){\n        this.stops = stops;\n        this.points = points = points;\n        this.code = code;\n    }\n    \n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RouteInfoDto.html":{"url":"classes/RouteInfoDto.html","title":"class - RouteInfoDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RouteInfoDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/transit/transitDtos/route.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                code\n                            \n                            \n                                    Public\n                                points\n                            \n                            \n                                    Public\n                                stops\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(stops: Stop[], points: Point[], code: string)\n                    \n                \n                        \n                            \n                                Defined in src/transit/transitDtos/route.dto.ts:17\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        stops\n                                                  \n                                                        \n                                                                        Stop[]\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        points\n                                                  \n                                                        \n                                                                        Point[]\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        code\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        code\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/transit/transitDtos/route.dto.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        points\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Point[]\n\n                    \n                \n                    \n                        \n                                Defined in src/transit/transitDtos/route.dto.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        stops\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Stop[]\n\n                    \n                \n                    \n                        \n                                Defined in src/transit/transitDtos/route.dto.ts:15\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Point } from \"src/transit/entities/point.entity\";\nimport { Stop } from \"src/transit/entities/stop.entity\";\n\nexport class RouteDto{\n    public id: number;\n    public code: string;\n    public lineId: number;\n    public direction: number;\n    public desc_eng: string;\n    public desc: string;\n}\n\nexport class RouteInfoDto{\n\n    public stops: Stop[];\n    public points: Point[];\n    public code: string;\n\n    constructor(stops: Stop[], points: Point[], code: string){\n        this.stops = stops;\n        this.points = points = points;\n        this.code = code;\n    }\n    \n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RouteRepository.html":{"url":"classes/RouteRepository.html","title":"class - RouteRepository","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RouteRepository\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/repositories/route.repository.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        IGenericRepository\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    \n                                    Async\n                                get\n                            \n                            \n                                    Public\n                                    \n                                    Async\n                                getAll\n                            \n                            \n                                    Public\n                                    Async\n                                getRoutesByLineId\n                            \n                            \n                                    Public\n                                    Async\n                                getRoutesBystops\n                            \n                            \n                                    Public\n                                    Async\n                                getSaved\n                            \n                            \n                                    Public\n                                    Async\n                                getStopRoutes\n                            \n                            \n                                    Public\n                                    \n                                    Async\n                                insert\n                            \n                            \n                                    Public\n                                insertStops\n                            \n                            \n                                    Protected\n                                deleteOne\n                            \n                            \n                                    Protected\n                                    Async\n                                getOne\n                            \n                            \n                                    Protected\n                                insertOne\n                            \n                            \n                                    Protected\n                                updateOne\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(routeRepo: Repository, dataSource: DataSource)\n                    \n                \n                        \n                            \n                                Defined in src/repositories/route.repository.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        routeRepo\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        dataSource\n                                                  \n                                                        \n                                                                    DataSource\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        \n                        Async\n                        get\n                        \n                    \n                \n            \n            \n                \n                    \n                    get(spec: any)\n                \n            \n\n\n            \n                \n                    Inherited from         IGenericRepository\n\n                \n            \n            \n                \n                        Defined in         IGenericRepository:20\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    spec\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        \n                        Async\n                        getAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    getAll()\n                \n            \n\n\n            \n                \n                    Inherited from         IGenericRepository\n\n                \n            \n            \n                \n                        Defined in         IGenericRepository:16\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        getRoutesByLineId\n                        \n                    \n                \n            \n            \n                \n                    \n                    getRoutesByLineId(lineId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/repositories/route.repository.ts:42\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    lineId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        getRoutesBystops\n                        \n                    \n                \n            \n            \n                \n                    \n                    getRoutesBystops(start: string, end: string)\n                \n            \n\n\n            \n                \n                    Defined in src/repositories/route.repository.ts:66\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    start\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    end\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        getSaved\n                        \n                    \n                \n            \n            \n                \n                    \n                    getSaved(user: string)\n                \n            \n\n\n            \n                \n                    Defined in src/repositories/route.repository.ts:32\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        getStopRoutes\n                        \n                    \n                \n            \n            \n                \n                    \n                    getStopRoutes(stopCode: string)\n                \n            \n\n\n            \n                \n                    Defined in src/repositories/route.repository.ts:52\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    stopCode\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        \n                        Async\n                        insert\n                        \n                    \n                \n            \n            \n                \n                    \n                    insert(routes: Route[])\n                \n            \n\n\n            \n                \n                    Inherited from         IGenericRepository\n\n                \n            \n            \n                \n                        Defined in         IGenericRepository:24\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    routes\n                                    \n                                                Route[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        insertStops\n                        \n                    \n                \n            \n            \n                \n                    \n                    insertStops(codes: string[], routeCode: string)\n                \n            \n\n\n            \n                \n                    Defined in src/repositories/route.repository.ts:28\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    codes\n                                    \n                                            string[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    routeCode\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Protected\n                        deleteOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteOne(spec: any)\n                \n            \n\n\n            \n                \n                    Inherited from         IGenericRepository\n\n                \n            \n            \n                \n                        Defined in         IGenericRepository:49\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    spec\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Protected\n                        Async\n                        getOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    getOne(spec: any)\n                \n            \n\n\n            \n                \n                    Inherited from         IGenericRepository\n\n                \n            \n            \n                \n                        Defined in         IGenericRepository:41\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    spec\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Protected\n                        insertOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    insertOne(data: T)\n                \n            \n\n\n            \n                \n                    Inherited from         IGenericRepository\n\n                \n            \n            \n                \n                        Defined in         IGenericRepository:32\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                            T\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Protected\n                        updateOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateOne(spec: any, update: any)\n                \n            \n\n\n            \n                \n                    Inherited from         IGenericRepository\n\n                \n            \n            \n                \n                        Defined in         IGenericRepository:58\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    spec\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    update\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { InjectDataSource, InjectRepository } from \"@nestjs/typeorm\";\nimport { DataSource, Repository, UpdateResult } from \"typeorm\";\nimport { Point } from \"../transit/entities/point.entity\";\nimport { Route } from \"../transit/entities/route.entity\";\nimport { IGenericRepository } from \"./generic.repository\";\n\nexport class RouteRepository extends IGenericRepository{\n\n    constructor(\n        @InjectRepository(Route) routeRepo: Repository,\n        @InjectDataSource() dataSource: DataSource\n    ){\n        super(routeRepo, dataSource);\n    }\n\n    public override async getAll(): Promise {\n        return super.getAll();\n    }\n\n    public override async get(spec: any): Promise{\n        return super.get(spec);\n    }\n\n    public override async insert(routes: Route[]): Promise{\n        super.insert(routes);\n    }\n\n    public insertStops(codes: string[], routeCode: string){\n        super.updateOne({code: routeCode}, {stopCodes: codes});\n    }\n\n    public async getSaved(user: string): Promise{\n        return this.db.query(`\n            SELECT r.\"id\", r.\"code\", r.\"lineId\", r.\"desc\", r.\"desc_eng\", r.\"stopCodes\"\n            FROM transit_data.user_route AS ur\n            INNER JOIN transit_data.route AS r\n            ON r.\"code\"=ur.\"route_code\"\n            WHERE ur.\"user_id\"='${user}';\n        `).catch(e => console.log(e));\n    }\n\n    public async getRoutesByLineId(lineId: string): Promise{\n        return this.db.query(`\n            SELECT r.\"id\", r.\"code\", r.\"lineId\", r.\"direction\", r.\"desc\", r.\"desc_eng\", r.\"stopCodes\", l.\"name\"\n            FROM transit_data.route AS r\n            INNER JOIN transit_data.line AS l\n            ON r.\"lineId\"=l.\"id\"\n            WHERE r.\"lineId\"='${lineId}';\n        `).catch(e => console.log(e));\n    }\n\n    public async getStopRoutes(stopCode: string): Promise{\n        return this.db.query(`\n            SELECT r.\"code\", r.\"lineId\", r.\"direction\", r.\"desc\", r.\"desc_eng\", r.\"stopCodes\", l.\"name\"\n            FROM transit_data.route AS r\n            INNER JOIN transit_data.line AS l\n            ON r.\"lineId\"=l.\"id\"\n            WHERE r.\"code\" IN(\n                SELECT DISTINCT \"routeCode\"\n                FROM transit_data.route_stop AS rs\n                WHERE rs.\"stopCode\"='${stopCode}'\n            );\n        `).catch(e => console.log(e));\n    }\n\n    public async getRoutesBystops(start: string, end: string): Promise{\n        return this.db.query(`\n            SELECT *\n            FROM transit_data.route AS r\n            WHERE r.\"code\" IN(\n                SELECT DISTINCT \"routeCode\"\n                FROM transit_data.route_stop AS rs\n                WHERE rs.\"stopCode\"='${start}'\n                INTERSECT\n                SELECT DISTINCT \"routeCode\"\n                FROM transit_data.route_stop AS rs\n                WHERE rs.\"stopCode\"='${end}'\n            );\n        `).catch(e => console.log(e));\n    }\n\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/RouteService.html":{"url":"injectables/RouteService.html","title":"injectable - RouteService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  RouteService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/transit/services/routes.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                get\n                            \n                            \n                                    Public\n                                getLineRoutes\n                            \n                            \n                                    Public\n                                getRoutes\n                            \n                            \n                                    Public\n                                getSaved\n                            \n                            \n                                    Public\n                                getStopRoutes\n                            \n                            \n                                    Public\n                                    Async\n                                insert\n                            \n                            \n                                    Public\n                                    Async\n                                insertStopCodes\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(repo: RouteRepository)\n                    \n                \n                        \n                            \n                                Defined in src/transit/services/routes.service.ts:6\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        repo\n                                                  \n                                                        \n                                                                        RouteRepository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        get\n                        \n                    \n                \n            \n            \n                \n                    \n                    get(spec: any)\n                \n            \n\n\n            \n                \n                    Defined in src/transit/services/routes.service.ts:14\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    spec\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        getLineRoutes\n                        \n                    \n                \n            \n            \n                \n                    \n                    getLineRoutes(lineId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/transit/services/routes.service.ts:18\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    lineId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        getRoutes\n                        \n                    \n                \n            \n            \n                \n                    \n                    getRoutes()\n                \n            \n\n\n            \n                \n                    Defined in src/transit/services/routes.service.ts:10\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        getSaved\n                        \n                    \n                \n            \n            \n                \n                    \n                    getSaved(user: string)\n                \n            \n\n\n            \n                \n                    Defined in src/transit/services/routes.service.ts:26\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        getStopRoutes\n                        \n                    \n                \n            \n            \n                \n                    \n                    getStopRoutes(stopCode: string)\n                \n            \n\n\n            \n                \n                    Defined in src/transit/services/routes.service.ts:22\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    stopCode\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        insert\n                        \n                    \n                \n            \n            \n                \n                    \n                    insert(routes: Route[])\n                \n            \n\n\n            \n                \n                    Defined in src/transit/services/routes.service.ts:30\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    routes\n                                    \n                                                Route[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        insertStopCodes\n                        \n                    \n                \n            \n            \n                \n                    \n                    insertStopCodes(codes: string[], stopCode: string)\n                \n            \n\n\n            \n                \n                    Defined in src/transit/services/routes.service.ts:34\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    codes\n                                    \n                                            string[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    stopCode\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { Route } from '../entities/route.entity';\nimport { RouteRepository } from '../../repositories/route.repository';\n\n@Injectable()\nexport class RouteService {\n\n    constructor(private repo: RouteRepository) {}\n\n    public getRoutes(): Promise{\n        return this.repo.getAll();\n    }\n\n    public get(spec: any): Promise{\n        return this.repo.get(spec);\n    }\n\n    public getLineRoutes(lineId: string): Promise{\n        return this.repo.getRoutesByLineId(lineId);\n    }\n\n    public getStopRoutes(stopCode: string): Promise{\n        return this.repo.getStopRoutes(stopCode);\n    }\n\n    public getSaved(user: string): Promise{\n        return this.repo.getSaved(user);\n    }\n\n    public async insert(routes: Route[]): Promise{\n        this.repo.insert(routes);\n    }\n\n    public async insertStopCodes(codes: string[], stopCode: string): Promise{\n        this.repo.insertStops(codes, stopCode);\n    }\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/RouteStop.html":{"url":"entities/RouteStop.html","title":"entity - RouteStop","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  RouteStop\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/transit/entities/routeStops.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                id\n                            \n                            \n                                    Public\n                                routeCode\n                            \n                            \n                                    Public\n                                stopCode\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn({type: 'bigint'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/transit/entities/routeStops.entity.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        routeCode\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Index({unique: false})@Column({type: 'varchar'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/transit/entities/routeStops.entity.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        stopCode\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Index({unique: false})@Column({type: 'varchar'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/transit/entities/routeStops.entity.ts:11\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Column, Entity, Index, PrimaryGeneratedColumn} from 'typeorm';\n\n@Entity()\nexport class RouteStop{\n\n    @PrimaryGeneratedColumn({type: 'bigint'})\n    public id: number;\n\n    @Index({unique: false})\n    @Column({type: 'varchar'})\n    public stopCode: string;\n\n    @Index({unique: false})\n    @Column({type: 'varchar'})\n    public routeCode: string;\n\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RouteStopRepository.html":{"url":"classes/RouteStopRepository.html","title":"class - RouteStopRepository","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RouteStopRepository\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/repositories/routeStop.repository.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        IGenericRepository\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    \n                                    Async\n                                insert\n                            \n                            \n                                    Protected\n                                deleteOne\n                            \n                            \n                                    Protected\n                                    Async\n                                get\n                            \n                            \n                                    Protected\n                                    Async\n                                getAll\n                            \n                            \n                                    Protected\n                                    Async\n                                getOne\n                            \n                            \n                                    Protected\n                                insertOne\n                            \n                            \n                                    Protected\n                                updateOne\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(rsRepo: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/repositories/routeStop.repository.ts:6\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        rsRepo\n                                                  \n                                                        \n                                                                    Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        \n                        Async\n                        insert\n                        \n                    \n                \n            \n            \n                \n                    \n                    insert(data: RouteStop[])\n                \n            \n\n\n            \n                \n                    Inherited from         IGenericRepository\n\n                \n            \n            \n                \n                        Defined in         IGenericRepository:14\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                            RouteStop[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Protected\n                        deleteOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteOne(spec: any)\n                \n            \n\n\n            \n                \n                    Inherited from         IGenericRepository\n\n                \n            \n            \n                \n                        Defined in         IGenericRepository:49\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    spec\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Protected\n                        Async\n                        get\n                        \n                    \n                \n            \n            \n                \n                    \n                    get(spec: any)\n                \n            \n\n\n            \n                \n                    Inherited from         IGenericRepository\n\n                \n            \n            \n                \n                        Defined in         IGenericRepository:19\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    spec\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Protected\n                        Async\n                        getAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    getAll()\n                \n            \n\n\n            \n                \n                    Inherited from         IGenericRepository\n\n                \n            \n            \n                \n                        Defined in         IGenericRepository:11\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Protected\n                        Async\n                        getOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    getOne(spec: any)\n                \n            \n\n\n            \n                \n                    Inherited from         IGenericRepository\n\n                \n            \n            \n                \n                        Defined in         IGenericRepository:41\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    spec\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Protected\n                        insertOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    insertOne(data: T)\n                \n            \n\n\n            \n                \n                    Inherited from         IGenericRepository\n\n                \n            \n            \n                \n                        Defined in         IGenericRepository:32\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                            T\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Protected\n                        updateOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateOne(spec: any, update: any)\n                \n            \n\n\n            \n                \n                    Inherited from         IGenericRepository\n\n                \n            \n            \n                \n                        Defined in         IGenericRepository:58\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    spec\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    update\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { InjectRepository } from \"@nestjs/typeorm\";\nimport { Repository } from \"typeorm\";\nimport { IGenericRepository } from \"./generic.repository\";\nimport { RouteStop } from \"src/transit/entities/routeStops.entity\";\n\nexport class RouteStopRepository extends IGenericRepository{\n\n    constructor(\n        @InjectRepository(RouteStop) rsRepo: Repository,\n    ){\n        super(rsRepo);\n    }\n\n    public override async insert(data: RouteStop[]): Promise {\n        super.insert(data);\n    }\n\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/RouteStopService.html":{"url":"injectables/RouteStopService.html","title":"injectable - RouteStopService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  RouteStopService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/transit/services/routeStop.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                insert\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(repo: RouteStopRepository)\n                    \n                \n                        \n                            \n                                Defined in src/transit/services/routeStop.service.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        repo\n                                                  \n                                                        \n                                                                        RouteStopRepository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        insert\n                        \n                    \n                \n            \n            \n                \n                    \n                    insert(rs: RouteStop[])\n                \n            \n\n\n            \n                \n                    Defined in src/transit/services/routeStop.service.ts:12\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    rs\n                                    \n                                            RouteStop[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { Point } from '../entities/point.entity';\nimport { PointRepository } from '../../repositories/point.repository';\nimport { RouteStopRepository } from 'src/repositories/routeStop.repository';\nimport { RouteStop } from '../entities/routeStops.entity';\n\n@Injectable()\nexport class RouteStopService {\n\n    constructor(private repo: RouteStopRepository) {}\n\n    public async insert(rs: RouteStop[]): Promise{\n        return this.repo.insert(rs);\n    }\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/SavedController.html":{"url":"controllers/SavedController.html","title":"controller - SavedController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  SavedController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/controllers/saved.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                saved\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                addRoute\n                            \n                            \n                                    Public\n                                    Async\n                                addStop\n                            \n                            \n                                    Public\n                                    Async\n                                deleteBooking\n                            \n                            \n                                    Public\n                                    Async\n                                deleteLine\n                            \n                            \n                                    Public\n                                    Async\n                                getGetRoutes\n                            \n                            \n                                    Public\n                                    Async\n                                getRoutes\n                            \n                            \n                                    Public\n                                    Async\n                                getSavedInfo\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        addRoute\n                        \n                    \n                \n            \n            \n                \n                    \n                    addRoute(req: any, code: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard)@Header('Content-Type', 'application/json')@Get('/saveRoute/:code')\n                \n            \n\n            \n                \n                    Defined in src/user/controllers/saved.controller.ts:29\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    code\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        addStop\n                        \n                    \n                \n            \n            \n                \n                    \n                    addStop(req: any, code: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard)@Header('Content-Type', 'application/json')@Get('/saveStop/:code')\n                \n            \n\n            \n                \n                    Defined in src/user/controllers/saved.controller.ts:15\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    code\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        deleteBooking\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteBooking(req: any, code: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard)@Header('Content-Type', 'application/json')@Get('/deleteStop/:code')\n                \n            \n\n            \n                \n                    Defined in src/user/controllers/saved.controller.ts:22\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    code\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        deleteLine\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteLine(req: any, code: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard)@Header('Content-Type', 'application/json')@Get('/deleteRoute/:code')\n                \n            \n\n            \n                \n                    Defined in src/user/controllers/saved.controller.ts:36\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    code\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        getGetRoutes\n                        \n                    \n                \n            \n            \n                \n                    \n                    getGetRoutes(req: any)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard)@Header('Content-Type', 'application/json')@Get('/getStops')\n                \n            \n\n            \n                \n                    Defined in src/user/controllers/saved.controller.ts:43\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        getRoutes\n                        \n                    \n                \n            \n            \n                \n                    \n                    getRoutes(req: any)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard)@Header('Content-Type', 'application/json')@Get('/getRoutes')\n                \n            \n\n            \n                \n                    Defined in src/user/controllers/saved.controller.ts:50\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        getSavedInfo\n                        \n                    \n                \n            \n            \n                \n                    \n                    getSavedInfo(req: any)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard)@Header('Content-Type', 'application/json')@Get('/getSavedInfo')\n                \n            \n\n            \n                \n                    Defined in src/user/controllers/saved.controller.ts:57\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {Controller,Post,Header,UseGuards,Request, Get, Param} from '@nestjs/common';\nimport { JwtAuthGuard } from 'src/auth/jwt-auth.guard';\nimport { SavedService } from '../services/saved.service';\nimport { Stop } from 'src/transit/entities/stop.entity';\nimport { Route } from 'src/transit/entities/route.entity';\n\n@Controller('saved')\nexport class SavedController {\n\n    constructor(private saved: SavedService) {}\n\n    @UseGuards(JwtAuthGuard)\n    @Header('Content-Type', 'application/json')\n    @Get('/saveStop/:code')\n    public async addStop(@Request() req: any, @Param('code') code: string): Promise {\n        return this.saved.insertStop(code, req.user.email);\n    }\n\n    @UseGuards(JwtAuthGuard)\n    @Header('Content-Type', 'application/json')\n    @Get('/deleteStop/:code')\n    public async deleteBooking(@Request() req: any, @Param('code') code: string): Promise {\n        return this.saved.deleteStop(code, req.user.email);\n    }\n\n    @UseGuards(JwtAuthGuard)\n    @Header('Content-Type', 'application/json')\n    @Get('/saveRoute/:code')\n    public async addRoute(@Request() req: any, @Param('code') code: string): Promise {\n        return this.saved.insertRoute(req.user.email, code);\n    }\n\n    @UseGuards(JwtAuthGuard)\n    @Header('Content-Type', 'application/json')\n    @Get('/deleteRoute/:code')\n    public async deleteLine(@Request() req: any, @Param('code') code: string): Promise {\n        return this.saved.deleteRoute(req.user.email, code);\n    }\n\n    @UseGuards(JwtAuthGuard)\n    @Header('Content-Type', 'application/json')\n    @Get('/getStops')\n    public async getGetRoutes(@Request() req: any): Promise {\n        return this.saved.getStops(req.user.email);\n    }\n\n    @UseGuards(JwtAuthGuard)\n    @Header('Content-Type', 'application/json')\n    @Get('/getRoutes')\n    public async getRoutes(@Request() req: any): Promise {\n        return this.saved.getRoutes(req.user.email);\n    }\n\n    @UseGuards(JwtAuthGuard)\n    @Header('Content-Type', 'application/json')\n    @Get('/getSavedInfo')\n    public async getSavedInfo(@Request() req: any): Promise {\n        return this.saved.getInfo(req.user.email);\n    }\n\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/SavedService.html":{"url":"injectables/SavedService.html","title":"injectable - SavedService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  SavedService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/services/saved.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                deleteRoute\n                            \n                            \n                                    Public\n                                deleteStop\n                            \n                            \n                                    Public\n                                    Async\n                                getInfo\n                            \n                            \n                                    Public\n                                getRoutes\n                            \n                            \n                                    Public\n                                getStops\n                            \n                            \n                                    Public\n                                insertRoute\n                            \n                            \n                                    Public\n                                insertStop\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(repo: UserRepository, data: DataService)\n                    \n                \n                        \n                            \n                                Defined in src/user/services/saved.service.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        repo\n                                                  \n                                                        \n                                                                        UserRepository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        data\n                                                  \n                                                        \n                                                                        DataService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        deleteRoute\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteRoute(user: string, code: string)\n                \n            \n\n\n            \n                \n                    Defined in src/user/services/saved.service.ts:19\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    code\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        deleteStop\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteStop(code: string, user: string)\n                \n            \n\n\n            \n                \n                    Defined in src/user/services/saved.service.ts:23\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    code\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        getInfo\n                        \n                    \n                \n            \n            \n                \n                    \n                    getInfo(user: string)\n                \n            \n\n\n            \n                \n                    Defined in src/user/services/saved.service.ts:35\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        getRoutes\n                        \n                    \n                \n            \n            \n                \n                    \n                    getRoutes(user: string)\n                \n            \n\n\n            \n                \n                    Defined in src/user/services/saved.service.ts:31\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        getStops\n                        \n                    \n                \n            \n            \n                \n                    \n                    getStops(user: string)\n                \n            \n\n\n            \n                \n                    Defined in src/user/services/saved.service.ts:27\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        insertRoute\n                        \n                    \n                \n            \n            \n                \n                    \n                    insertRoute(user: string, code: string)\n                \n            \n\n\n            \n                \n                    Defined in src/user/services/saved.service.ts:15\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    code\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        insertStop\n                        \n                    \n                \n            \n            \n                \n                    \n                    insertStop(code: string, user: string)\n                \n            \n\n\n            \n                \n                    Defined in src/user/services/saved.service.ts:11\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    code\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { use } from 'passport';\nimport { UserRepository } from 'src/repositories/user.repository';\nimport { DataService } from 'src/transit/services/data.service';\n\n@Injectable()\nexport class SavedService {\n\n    constructor(private repo: UserRepository, private data: DataService) {}\n\n    public insertStop(code: string, user: string){\n        this.repo.insertStop(code, user);\n    }\n\n    public insertRoute(user: string, code: string){\n        this.repo.insertRoute(code, user);\n    }\n\n    public deleteRoute(user: string, code: string){\n        this.repo.deleteRoute(code, user);\n    }\n\n    public deleteStop(code: string, user: string){\n        this.repo.deleteStop(code, user);\n    }\n\n    public getStops(user: string): Promise{\n        return this.repo.getAllStops(user);\n    }\n\n    public getRoutes(user: string){\n        return this.repo.getAllRoutes(user);\n    }\n\n    public async getInfo(user: string){\n\n        const promise = await Promise.all([\n            this.data.routes.getSaved(user),\n            this.data.stops.getSaved(user)\n        ]);\n\n        return {stops: promise[1], routes: promise[0]};\n    }\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Schedule.html":{"url":"entities/Schedule.html","title":"entity - Schedule","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Schedule\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/transit/entities/schedule.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                day\n                            \n                            \n                                    Public\n                                id\n                            \n                            \n                                    Public\n                                line\n                            \n                            \n                                    Public\n                                routeCode\n                            \n                            \n                                    Public\n                                stopCode\n                            \n                            \n                                    Public\n                                trip_id\n                            \n                            \n                                    Public\n                                tripTime\n                            \n                            \n                                    Public\n                                tripTimeHour\n                            \n                            \n                                    Public\n                                tripTimeMinute\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        day\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryColumn({nullable: false, type: 'int'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/transit/entities/schedule.entity.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn({type: 'bigint'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/transit/entities/schedule.entity.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        line\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({nullable: false, type: 'varchar'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/transit/entities/schedule.entity.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        routeCode\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Index({unique: false})@PrimaryColumn({nullable: false, type: 'varchar'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/transit/entities/schedule.entity.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        stopCode\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Index({unique: false})@PrimaryColumn({nullable: false, type: 'varchar'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/transit/entities/schedule.entity.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        trip_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryColumn({type: 'bigint', nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/transit/entities/schedule.entity.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        tripTime\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({nullable: false, type: 'varchar'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/transit/entities/schedule.entity.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        tripTimeHour\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'int', nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/transit/entities/schedule.entity.ts:30\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        tripTimeMinute\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'int', nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/transit/entities/schedule.entity.ts:33\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Column, Entity, OneToMany, PrimaryColumn, Index, ManyToMany, JoinTable, JoinColumn, PrimaryGeneratedColumn} from 'typeorm';\n\n@Entity()\nexport class Schedule{\n\n    @PrimaryGeneratedColumn({type: 'bigint'})\n    public id: number;\n\n    @PrimaryColumn({type: 'bigint', nullable: false})\n    public trip_id: number;\n\n    @PrimaryColumn({nullable: false, type: 'int'})\n    public day: number;\n\n    @Index({unique: false})\n    @PrimaryColumn({nullable: false, type: 'varchar'})\n    public routeCode: string;\n\n    @Index({unique: false})\n    @PrimaryColumn({nullable: false, type: 'varchar'})\n    public stopCode: string;\n\n    @Column({nullable: false, type: 'varchar'})\n    public line: string;\n\n    @Column({nullable: false, type: 'varchar'})\n    public tripTime: string;\n\n    @Column({type: 'int', nullable: false})\n    public tripTimeHour: number;\n\n    @Column({type: 'int', nullable: false})\n    public tripTimeMinute: number;\n\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ScheduleDayDto.html":{"url":"classes/ScheduleDayDto.html","title":"class - ScheduleDayDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ScheduleDayDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/transit/transitDtos/scheduleDays.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                sdc_code\n                            \n                            \n                                    Public\n                                sdc_descr\n                            \n                            \n                                    Public\n                                sdc_descr_eng\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        sdc_code\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/transit/transitDtos/scheduleDays.dto.ts:3\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        sdc_descr\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/transit/transitDtos/scheduleDays.dto.ts:4\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        sdc_descr_eng\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/transit/transitDtos/scheduleDays.dto.ts:5\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class ScheduleDayDto{\n    public sdc_code: string;\n    public sdc_descr: string;\n    public sdc_descr_eng: string;\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ScheduleDetailsDto.html":{"url":"classes/ScheduleDetailsDto.html","title":"class - ScheduleDetailsDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ScheduleDetailsDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/transit/transitDtos/schedule.details.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                routeCode\n                            \n                            \n                                    Private\n                                schedules\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \n                                Public\n                        constructor(sch: Schedule[], code: string)\n                    \n                \n                        \n                            \n                                Defined in src/transit/transitDtos/schedule.details.ts:6\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        sch\n                                                  \n                                                        \n                                                                        Schedule[]\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        code\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        routeCode\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/transit/transitDtos/schedule.details.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        schedules\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Schedule[]\n\n                    \n                \n                    \n                        \n                                Defined in src/transit/transitDtos/schedule.details.ts:5\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Schedule } from \"src/transit/entities/schedule.entity\";\n\nexport class ScheduleDetailsDto{\n\n    private schedules: Schedule[];\n    private routeCode: string;\n\n    public constructor(sch: Schedule[], code: string){\n        this.schedules = sch;\n        this.routeCode = code;\n    }\n    \n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ScheduleDto.html":{"url":"classes/ScheduleDto.html","title":"class - ScheduleDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ScheduleDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/transit/transitDtos/schedule.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                line_code\n                            \n                            \n                                    Public\n                                ml_code\n                            \n                            \n                                    Public\n                                sdc_code\n                            \n                            \n                                    Public\n                                sde_end1\n                            \n                            \n                                    Public\n                                sde_end2\n                            \n                            \n                                    Public\n                                sde_start1\n                            \n                            \n                                    Public\n                                sde_start2\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        line_code\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/transit/transitDtos/schedule.dto.ts:4\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        ml_code\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/transit/transitDtos/schedule.dto.ts:5\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        sdc_code\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/transit/transitDtos/schedule.dto.ts:3\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        sde_end1\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/transit/transitDtos/schedule.dto.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        sde_end2\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/transit/transitDtos/schedule.dto.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        sde_start1\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/transit/transitDtos/schedule.dto.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        sde_start2\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/transit/transitDtos/schedule.dto.ts:8\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class ScheduleDto{\n    public sdc_code: string;\n    public line_code: string;\n    public ml_code: string;\n    public sde_start1: string;\n    public sde_end1: string;\n    public sde_start2: string;\n    public sde_end2: string;\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ScheduleRepository.html":{"url":"classes/ScheduleRepository.html","title":"class - ScheduleRepository","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ScheduleRepository\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/repositories/schedule.repository.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        IGenericRepository\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    \n                                get\n                            \n                            \n                                    Public\n                                    \n                                getAll\n                            \n                            \n                                    Public\n                                    Async\n                                getByTime\n                            \n                            \n                                    Public\n                                    Async\n                                getIds\n                            \n                            \n                                    Public\n                                getTrip\n                            \n                            \n                                    Public\n                                    Async\n                                getTripOne\n                            \n                            \n                                    Public\n                                    \n                                insert\n                            \n                            \n                                    Protected\n                                deleteOne\n                            \n                            \n                                    Protected\n                                    Async\n                                getOne\n                            \n                            \n                                    Protected\n                                insertOne\n                            \n                            \n                                    Protected\n                                updateOne\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \n                                Public\n                        constructor(scheduleRepo: Repository, db: DataSource)\n                    \n                \n                        \n                            \n                                Defined in src/repositories/schedule.repository.ts:6\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        scheduleRepo\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        db\n                                                  \n                                                        \n                                                                    DataSource\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        \n                        get\n                        \n                    \n                \n            \n            \n                \n                    \n                    get(routeCode: string)\n                \n            \n\n\n            \n                \n                    Inherited from         IGenericRepository\n\n                \n            \n            \n                \n                        Defined in         IGenericRepository:19\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    routeCode\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        \n                        getAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    getAll()\n                \n            \n\n\n            \n                \n                    Inherited from         IGenericRepository\n\n                \n            \n            \n                \n                        Defined in         IGenericRepository:15\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        getByTime\n                        \n                    \n                \n            \n            \n                \n                    \n                    getByTime(s: number, e: number, day: number, route: string)\n                \n            \n\n\n            \n                \n                    Defined in src/repositories/schedule.repository.ts:38\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    s\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    e\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    day\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    route\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        getIds\n                        \n                    \n                \n            \n            \n                \n                    \n                    getIds()\n                \n            \n\n\n            \n                \n                    Defined in src/repositories/schedule.repository.ts:23\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        getTrip\n                        \n                    \n                \n            \n            \n                \n                    \n                    getTrip(day: number, routeCode: string, stopCode: string)\n                \n            \n\n\n            \n                \n                    Defined in src/repositories/schedule.repository.ts:50\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    day\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    routeCode\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    stopCode\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        getTripOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    getTripOne(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/repositories/schedule.repository.ts:30\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        \n                        insert\n                        \n                    \n                \n            \n            \n                \n                    \n                    insert(data: Schedule[])\n                \n            \n\n\n            \n                \n                    Inherited from         IGenericRepository\n\n                \n            \n            \n                \n                        Defined in         IGenericRepository:46\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                                Schedule[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Protected\n                        deleteOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteOne(spec: any)\n                \n            \n\n\n            \n                \n                    Inherited from         IGenericRepository\n\n                \n            \n            \n                \n                        Defined in         IGenericRepository:49\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    spec\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Protected\n                        Async\n                        getOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    getOne(spec: any)\n                \n            \n\n\n            \n                \n                    Inherited from         IGenericRepository\n\n                \n            \n            \n                \n                        Defined in         IGenericRepository:41\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    spec\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Protected\n                        insertOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    insertOne(data: T)\n                \n            \n\n\n            \n                \n                    Inherited from         IGenericRepository\n\n                \n            \n            \n                \n                        Defined in         IGenericRepository:32\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                            T\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Protected\n                        updateOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateOne(spec: any, update: any)\n                \n            \n\n\n            \n                \n                    Inherited from         IGenericRepository\n\n                \n            \n            \n                \n                        Defined in         IGenericRepository:58\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    spec\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    update\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { InjectDataSource, InjectRepository } from \"@nestjs/typeorm\";\nimport { DataSource, Repository, UpdateResult } from \"typeorm\";\nimport { Schedule } from \"../transit/entities/schedule.entity\";\nimport { IGenericRepository } from \"./generic.repository\";\n\nexport class ScheduleRepository extends IGenericRepository{\n\n    public constructor(\n        @InjectRepository(Schedule) scheduleRepo: Repository,\n        @InjectDataSource() db: DataSource\n    ){\n        super(scheduleRepo, db);\n    }\n\n    public override getAll(): Promise {\n        return super.getAll();\n    }\n\n    public override get(routeCode: string): Promise {\n        return super.get({routeCode: routeCode});\n    }\n\n    public async getIds(): Promise {\n        return this.db.query(`\n            SELECT DISTINCT trip_id\n            FROM transit_data.schedule;\n        `).catch(e => console.log(e));\n    }\n\n    public async getTripOne(id: number): Promise {\n        return this.db.query(`\n            SELECT *\n            FROM transit_data.schedule as s\n            WHERE s.\"trip_id\"='${id}';\n        `).catch(e => console.log(e));\n    }\n\n    public async getByTime(s: number, e: number, day: number, route: string): Promise{\n        return this.db.query(`\n            SELECT *\n            FROM transit_data.schedule AS s\n            WHERE s.\"routeCode\"='${route}' AND s.\"day\"='${day}' AND s.\"tripTimeHour\" > '${s}' AND s.\"tripTimeHour\"  console.log(e));\n    }\n\n    public override insert(data: Schedule[]): Promise {\n        return super.insert(data);\n    }\n\n    public getTrip(day: number, routeCode: string, stopCode: string): Promise{\n        return super.get({routeCode: routeCode, day: day, stopCode: stopCode});\n    }\n\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ScheduleService.html":{"url":"injectables/ScheduleService.html","title":"injectable - ScheduleService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ScheduleService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/transit/services/schedule.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                getAll\n                            \n                            \n                                    Public\n                                getByTime\n                            \n                            \n                                    Public\n                                    Async\n                                getIds\n                            \n                            \n                                    Public\n                                getRouteSchedules\n                            \n                            \n                                    Public\n                                    Async\n                                getTripOne\n                            \n                            \n                                    Public\n                                getTrips\n                            \n                            \n                                    Public\n                                insertTrips\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(repo: ScheduleRepository)\n                    \n                \n                        \n                            \n                                Defined in src/transit/services/schedule.service.ts:6\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        repo\n                                                  \n                                                        \n                                                                        ScheduleRepository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        getAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    getAll()\n                \n            \n\n\n            \n                \n                    Defined in src/transit/services/schedule.service.ts:30\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        getByTime\n                        \n                    \n                \n            \n            \n                \n                    \n                    getByTime(day: number, route: string, s: number, e: number)\n                \n            \n\n\n            \n                \n                    Defined in src/transit/services/schedule.service.ts:34\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    day\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    route\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    s\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    e\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        getIds\n                        \n                    \n                \n            \n            \n                \n                    \n                    getIds()\n                \n            \n\n\n            \n                \n                    Defined in src/transit/services/schedule.service.ts:18\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        getRouteSchedules\n                        \n                    \n                \n            \n            \n                \n                    \n                    getRouteSchedules(routeCode: string)\n                \n            \n\n\n            \n                \n                    Defined in src/transit/services/schedule.service.ts:10\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    routeCode\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        getTripOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    getTripOne(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/transit/services/schedule.service.ts:22\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        getTrips\n                        \n                    \n                \n            \n            \n                \n                    \n                    getTrips(routeCode: string, day: number, stopCode: string)\n                \n            \n\n\n            \n                \n                    Defined in src/transit/services/schedule.service.ts:26\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    routeCode\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    day\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    stopCode\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        insertTrips\n                        \n                    \n                \n            \n            \n                \n                    \n                    insertTrips(trips: Schedule[])\n                \n            \n\n\n            \n                \n                    Defined in src/transit/services/schedule.service.ts:14\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    trips\n                                    \n                                                Schedule[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { Schedule } from '../entities/schedule.entity';\nimport { ScheduleRepository } from '../../repositories/schedule.repository';\n\n@Injectable()\nexport class ScheduleService {\n\n    constructor(private repo: ScheduleRepository) {}\n\n    public getRouteSchedules(routeCode: string): Promise{\n        return this.repo.get(routeCode);\n    }\n\n    public insertTrips(trips: Schedule[]): Promise{\n        return this.repo.insert(trips);\n    }\n\n    public async getIds(): Promise{\n        return this.repo.getIds();\n    }\n\n    public async getTripOne(id: number): Promise{\n        return this.repo.getTripOne(id);\n    }\n\n    public getTrips(routeCode: string, day: number, stopCode: string): Promise{\n        return this.repo.getTrip(day, routeCode, stopCode);\n    }\n\n    public getAll(): Promise{\n        return this.repo.getAll();\n    }\n\n    public getByTime(day: number, route: string, s: number, e: number): Promise{\n        return this.repo.getByTime(s, e, day, route);\n    }\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SingleRouteStrategy.html":{"url":"classes/SingleRouteStrategy.html","title":"class - SingleRouteStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SingleRouteStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/transit/Navigator/Strategies/transitBusStrategy.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                            NavigatorStrategy\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                buildRoute\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        buildRoute\n                        \n                    \n                \n            \n            \n                \n                    \n                    buildRoute(tripState: TripState, routeRepo: RouteRepository)\n                \n            \n\n\n            \n                \n                    Defined in src/transit/Navigator/Strategies/transitBusStrategy.ts:9\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    tripState\n                                    \n                                                TripState\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    routeRepo\n                                    \n                                                RouteRepository\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Route } from \"src/transit/entities/route.entity\";\nimport { RouteRepository } from \"src/repositories/route.repository\";\nimport { TripState } from \"src/transit/transitDtos/trip.state\";\nimport { Repository } from \"typeorm\";\nimport { NavigatorStrategy } from \"../navigatorStrategy\";\n\nexport class SingleRouteStrategy implements NavigatorStrategy{\n\n    public async buildRoute(tripState: TripState, routeRepo: RouteRepository): Promise {\n\n        const start: string = tripState.start[0];\n        const end: string = tripState.destination[0];\n        const routes: Route[] = await routeRepo.getRoutesBystops(start, end);\n  \n        return routes.filter((route: any) => {\n\n            const stops = route.stopCodes.split(',');\n            const startIndex = stops.findIndex((v: string) => v == start);\n            const endIndex = stops.findIndex((v: string) => v == end);\n\n            if(startIndex \n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Step.html":{"url":"classes/Step.html","title":"class - Step","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Step\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/transit/transitDtos/itinerary.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                absoluteDirection\n                            \n                            \n                                    Public\n                                distance\n                            \n                            \n                                    Public\n                                exit\n                            \n                            \n                                    Public\n                                lat\n                            \n                            \n                                    Public\n                                lon\n                            \n                            \n                                    Public\n                                relativeDirection\n                            \n                            \n                                    Public\n                                streetName\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(step: Step)\n                    \n                \n                        \n                            \n                                Defined in src/transit/transitDtos/itinerary.dto.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        step\n                                                  \n                                                        \n                                                                        Step\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        absoluteDirection\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/transit/transitDtos/itinerary.dto.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        distance\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/transit/transitDtos/itinerary.dto.ts:5\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        exit\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/transit/transitDtos/itinerary.dto.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        lat\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/transit/transitDtos/itinerary.dto.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        lon\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/transit/transitDtos/itinerary.dto.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        relativeDirection\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/transit/transitDtos/itinerary.dto.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        streetName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/transit/transitDtos/itinerary.dto.ts:7\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        var polyline = require( 'google-polyline' );\n\nexport class Step{\n\n    public distance: number;\n    public relativeDirection: string;\n    public streetName: string;\n    public absoluteDirection: string;\n    public exit: string;\n    public lon: number;\n    public lat: number;\n\n    constructor(step: Step){\n        this.distance = Math.floor(step.distance);\n        this.relativeDirection = step.relativeDirection;\n        this.streetName = step.streetName;\n        this.absoluteDirection = step.absoluteDirection;\n        this.exit = step.exit;\n        this.lon = step.lon;\n        this.lat = step.lat;\n    }\n\n}\n\nexport class Vertex{\n\n    public name: string;\n    public lon: string;\n    public lat: string;\n    public vertexType: string;\n    public departure: string;\n    public arrival: string;\n    public stopCode?: string;\n    public stopId?: string;\n    public stopIndex: number;\n    public stopSequence: number;\n\n    constructor(v: Vertex){\n        this.name = v.name;\n        this.lon = v.lon;\n        this.lat = v.lat;\n        this.vertexType = v.vertexType;\n        this.stopCode = v.stopCode;\n        this.stopId = v.stopCode;\n        this.stopIndex = v.stopIndex;\n        this.stopSequence = v.stopSequence;\n        this.arrival = this.edit(+v.arrival);\n        this.departure = this.edit(+v.departure);\n    }\n\n    private edit(time: number): string{\n        const date = new Date(time).toLocaleTimeString().split(\":\");\n        return date[0] + ':' + date[1];\n    }\n\n}\n\nexport class Leg{\n\n    public points: string[];\n    public duration: number;\n    public transitTime: number;\n    public mode: string;\n    public steps: Step[];\n    public routeId: string | undefined;\n    public tripId: string | undefined;\n    public serviceDate: string;\n    public agencyName: string;\n    public agencyTimeZoneOffset: number;\n    public startTime: string;\n    public endTime: string;\n    public distance: number;\n    public departureDelay: number;\n    public arrivalDelay: number;\n    public routeShortName: string;\n    public from: Vertex;\n    public to: Vertex;\n    public intermediateStops: Vertex[] = [];\n    public legGeometry: any;\n    public flex: number;\n    public occupancyStatus: number;\n\n    constructor(leg: Leg, steps: Step[], from: Vertex, to: Vertex, stops: Vertex[], points: string){\n        this.points = polyline.decode(points);\n        this.duration = Math.floor(leg.duration/60);\n        this.transitTime = Math.floor(leg.transitTime/60);\n        this.mode = leg.mode;\n        this.routeId = this.setRoute(leg.routeId);\n        this.tripId = this.setTrip(leg.tripId);\n        this.serviceDate = leg.serviceDate;\n        this.agencyName = leg.agencyName;\n        this.agencyTimeZoneOffset = leg.agencyTimeZoneOffset;\n        this.startTime = this.edit(+leg.startTime);\n        this.endTime = this.edit(+leg.endTime);\n        this.distance = Math.floor(leg.distance);\n        this.arrivalDelay = Math.floor(leg.arrivalDelay/60);\n        this.routeShortName = leg.routeShortName;\n        this.steps = steps;\n        this.from = from;\n        this.to = to;\n        this.departureDelay = Math.floor(leg.departureDelay/60);\n        this.intermediateStops = stops;\n    }\n\n    public setRoute(route: string){\n        if(route){\n            return route.split(\":\")[1];\n        }else{\n            return undefined;\n        }\n    }\n\n    public setTrip(trip_id: string | undefined){\n        if(trip_id){\n            return trip_id.split(\":\")[1];\n        }else{\n            return undefined;\n        }\n    }\n\n    private edit(time: number): string{\n        const date = new Date(time).toLocaleTimeString().split(\":\");\n        return date[0] + ':' + date[1];\n    }\n\n    public setFlexGrow(totalDuration: number){\n        this.flex = Math.floor(this.duration/totalDuration * 10);\n    }\n\n}\n\nexport class Itinerary{\n\n    public duration: number;\n    public startTime: string;\n    public endTime: string;\n    public walkTime: number;\n    public transitTime: number;\n    public waitingTime: number;\n    public walkDistance: number;\n    public arrivalDelay: number;\n    public departureDelay: number;\n    public serviceDate: string;\n    public legs: Leg[];\n\n    constructor(it: Itinerary, legs: Leg[]){\n        this.duration = Math.floor(it.duration/60);\n        this.transitTime = Math.floor(it.transitTime/60);\n        this.waitingTime = Math.floor(it.waitingTime/60);\n        this.walkDistance = Math.floor(it.walkDistance);\n        this.legs = legs;\n        this.startTime = this.edit(+it.startTime);\n        this.endTime = this.edit(+it.endTime);\n        this.walkTime = Math.floor(it.walkTime/60);\n        this.arrivalDelay = it.arrivalDelay;\n        this.departureDelay = it.departureDelay;\n        this.serviceDate = it.serviceDate;\n    }\n\n    private edit(time: number): string{\n        const date = new Date(time).toLocaleTimeString().split(\":\");\n        return date[0] + ':' + date[1];\n    }\n}\n\nexport class Plan{\n\n    public date: string;\n    public from: Vertex;\n    public to: Vertex;\n    public arriveBy: string;\n    public itineraries: Itinerary[];\n    public slug: string;\n    public occupancy: any;\n\n    constructor(plan: Plan, it: Itinerary[], slug: string){\n        this.date = new Date(plan.date).toLocaleString();\n        this.from = new Vertex(plan.from);\n        this.to = new Vertex(plan.to);\n        this.itineraries = it;\n        this.slug = slug;\n    }\n\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Stop.html":{"url":"entities/Stop.html","title":"entity - Stop","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Stop\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/transit/entities/stop.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                code\n                            \n                            \n                                    Public\n                                desc\n                            \n                            \n                                    Public\n                                desc_eng\n                            \n                            \n                                    Public\n                                id\n                            \n                            \n                                    Public\n                                latitude\n                            \n                            \n                                    Public\n                                lines\n                            \n                            \n                                    Public\n                                longitude\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        code\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Index({unique: true})@PrimaryColumn({nullable: false, type: 'varchar'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/transit/entities/stop.entity.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        desc\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({nullable: false, type: 'varchar'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/transit/entities/stop.entity.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        desc_eng\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({nullable: true, type: 'varchar'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/transit/entities/stop.entity.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({nullable: false, type: 'bigint'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/transit/entities/stop.entity.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        latitude\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({nullable: true, type: 'varchar'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/transit/entities/stop.entity.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        lines\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('simple-array', {nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/transit/entities/stop.entity.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        longitude\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({nullable: true, type: 'varchar'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/transit/entities/stop.entity.ts:17\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Column, Entity, PrimaryColumn, Index, ManyToMany, JoinTable} from 'typeorm';\n\n@Entity()\nexport class Stop{\n\n    @Column({nullable: false, type: 'bigint'})\n    public id: number;\n\n    @Index({unique: true})\n    @PrimaryColumn({nullable: false, type: 'varchar'})\n    public code: string;\n\n    @Column({nullable: true, type: 'varchar'})\n    public latitude: string;\n\n    @Column({nullable: true, type: 'varchar'})\n    public longitude: string;\n\n    @Column({nullable: true, type: 'varchar'})\n    public desc_eng: string;\n\n    @Column({nullable: false, type: 'varchar'})\n    public desc: string;\n\n    @Column('simple-array', {nullable: true})\n    public lines: string[];\n\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/StopDto.html":{"url":"classes/StopDto.html","title":"class - StopDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  StopDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/transit/transitDtos/stop.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                code\n                            \n                            \n                                    Public\n                                desc\n                            \n                            \n                                    Public\n                                desc_eng\n                            \n                            \n                                    Public\n                                id\n                            \n                            \n                                    Public\n                                latitude\n                            \n                            \n                                    Public\n                                longitude\n                            \n                            \n                                    Public\n                                sequence\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        code\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/transit/transitDtos/stop.dto.ts:4\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        desc\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/transit/transitDtos/stop.dto.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        desc_eng\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/transit/transitDtos/stop.dto.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/transit/transitDtos/stop.dto.ts:3\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        latitude\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/transit/transitDtos/stop.dto.ts:5\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        longitude\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/transit/transitDtos/stop.dto.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        sequence\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/transit/transitDtos/stop.dto.ts:9\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class StopDto{\n    public id: number;\n    public code: string;\n    public latitude: string;\n    public longitude: string;\n    public desc_eng: string;\n    public desc: string;\n    public sequence: number;\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/StopRepository.html":{"url":"classes/StopRepository.html","title":"class - StopRepository","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  StopRepository\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/repositories/stop.repository.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        IGenericRepository\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    \n                                    Async\n                                get\n                            \n                            \n                                    Public\n                                    \n                                getAll\n                            \n                            \n                                    Public\n                                    \n                                    Async\n                                getOne\n                            \n                            \n                                    Public\n                                    Async\n                                getRouteStops\n                            \n                            \n                                    Public\n                                    Async\n                                getSaved\n                            \n                            \n                                    Public\n                                    Async\n                                getStopLines\n                            \n                            \n                                    Public\n                                    \n                                    Async\n                                insert\n                            \n                            \n                                    Public\n                                updateStopLines\n                            \n                            \n                                    Protected\n                                deleteOne\n                            \n                            \n                                    Protected\n                                insertOne\n                            \n                            \n                                    Protected\n                                updateOne\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \n                                Public\n                        constructor(stopRepo: Repository, dataSource: DataSource)\n                    \n                \n                        \n                            \n                                Defined in src/repositories/stop.repository.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        stopRepo\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        dataSource\n                                                  \n                                                        \n                                                                    DataSource\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        \n                        Async\n                        get\n                        \n                    \n                \n            \n            \n                \n                    \n                    get(spec: any)\n                \n            \n\n\n            \n                \n                    Inherited from         IGenericRepository\n\n                \n            \n            \n                \n                        Defined in         IGenericRepository:17\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    spec\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        \n                        getAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    getAll()\n                \n            \n\n\n            \n                \n                    Inherited from         IGenericRepository\n\n                \n            \n            \n                \n                        Defined in         IGenericRepository:13\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        \n                        Async\n                        getOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    getOne(spec: any)\n                \n            \n\n\n            \n                \n                    Inherited from         IGenericRepository\n\n                \n            \n            \n                \n                        Defined in         IGenericRepository:25\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    spec\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        getRouteStops\n                        \n                    \n                \n            \n            \n                \n                    \n                    getRouteStops(code: string)\n                \n            \n\n\n            \n                \n                    Defined in src/repositories/stop.repository.ts:39\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    code\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        getSaved\n                        \n                    \n                \n            \n            \n                \n                    \n                    getSaved(user: string)\n                \n            \n\n\n            \n                \n                    Defined in src/repositories/stop.repository.ts:29\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        getStopLines\n                        \n                    \n                \n            \n            \n                \n                    \n                    getStopLines()\n                \n            \n\n\n            \n                \n                    Defined in src/repositories/stop.repository.ts:49\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        \n                        Async\n                        insert\n                        \n                    \n                \n            \n            \n                \n                    \n                    insert(stops: Stop[])\n                \n            \n\n\n            \n                \n                    Inherited from         IGenericRepository\n\n                \n            \n            \n                \n                        Defined in         IGenericRepository:21\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    stops\n                                    \n                                                Stop[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        updateStopLines\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateStopLines(code: string, lines: string[])\n                \n            \n\n\n            \n                \n                    Defined in src/repositories/stop.repository.ts:63\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    code\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    lines\n                                    \n                                            string[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Protected\n                        deleteOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteOne(spec: any)\n                \n            \n\n\n            \n                \n                    Inherited from         IGenericRepository\n\n                \n            \n            \n                \n                        Defined in         IGenericRepository:49\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    spec\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Protected\n                        insertOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    insertOne(data: T)\n                \n            \n\n\n            \n                \n                    Inherited from         IGenericRepository\n\n                \n            \n            \n                \n                        Defined in         IGenericRepository:32\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                            T\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Protected\n                        updateOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateOne(spec: any, update: any)\n                \n            \n\n\n            \n                \n                    Inherited from         IGenericRepository\n\n                \n            \n            \n                \n                        Defined in         IGenericRepository:58\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    spec\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    update\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { InjectDataSource, InjectRepository } from \"@nestjs/typeorm\";\nimport { DataSource, Repository, UpdateResult } from \"typeorm\";\nimport { Stop } from \"../transit/entities/stop.entity\";\nimport { IGenericRepository } from \"./generic.repository\";\nimport { Line } from \"src/transit/entities/line.entity\";\n\nexport class StopRepository extends IGenericRepository{\n\n    public constructor(@InjectRepository(Stop) stopRepo: Repository, @InjectDataSource() dataSource: DataSource){\n        super(stopRepo, dataSource);\n    }\n\n    public override getAll(): Promise {\n        return super.getAll();\n    }\n\n    public override async get(spec: any): Promise{\n        return super.get(spec);\n    }\n\n    public override async insert(stops: Stop[]): Promise{\n        super.insert(stops);\n    }\n\n    public override async getOne(spec: any): Promise {\n        return super.getOne(spec);\n    }\n\n    public async getSaved(user: string): Promise{\n        return this.db.query(`\n            SELECT s.\"id\", s.\"code\", s.\"latitude\", s.\"longitude\", s.\"desc\", s.\"desc_eng\", s.\"lines\"\n            FROM transit_data.user_stop AS us\n            INNER JOIN transit_data.stop AS s\n            ON s.\"code\"=us.\"stop_code\"\n            WHERE us.\"user_id\"='${user}';\n        `).catch(e => console.log(e));\n    }\n\n    public async getRouteStops(code: string): Promise{\n        return this.db.query(`\n            SELECT \"desc\", \"desc_eng\", \"code\", \"latitude\", \"longitude\"\n            FROM transit_data.route_stop AS rs\n            INNER JOIN transit_data.stop AS s \n            ON s.\"code\"=rs.\"stopCode\"\n            WHERE rs.\"routeCode\"='${code}';\n        `).catch(e => console.log(e));\n    }\n\n    public async getStopLines(): Promise{\n        return this.db.query(`\n            SELECT DISTINCT s.\"code\", l.\"name\"\n            FROM transit_data.stop AS s\n            INNER JOIN transit_data.route_stop AS rs\n            ON s.\"code\"=rs.\"stopCode\"\n            INNER JOIN transit_data.route AS r\n            ON r.\"code\"=rs.\"routeCode\"\n            INNER JOIN transit_data.line AS l\n            ON r.\"lineId\"=l.\"id\"\n            ORDER BY s.\"code\";\n        `).catch(e => console.log(e));\n    }\n\n    public updateStopLines(code: string, lines:string[]){\n        super.updateOne({code: code}, {lines: lines});\n    }\n\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/StopService.html":{"url":"injectables/StopService.html","title":"injectable - StopService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  StopService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/transit/services/stop.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                get\n                            \n                            \n                                    Public\n                                getOne\n                            \n                            \n                                    Public\n                                    Async\n                                getRouteStops\n                            \n                            \n                                    Public\n                                getSaved\n                            \n                            \n                                    Public\n                                    Async\n                                getStopLines\n                            \n                            \n                                    Public\n                                    Async\n                                getStops\n                            \n                            \n                                    Public\n                                    Async\n                                insert\n                            \n                            \n                                    Public\n                                updateStopLines\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(repo: StopRepository)\n                    \n                \n                        \n                            \n                                Defined in src/transit/services/stop.service.ts:6\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        repo\n                                                  \n                                                        \n                                                                        StopRepository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        get\n                        \n                    \n                \n            \n            \n                \n                    \n                    get(spec: any)\n                \n            \n\n\n            \n                \n                    Defined in src/transit/services/stop.service.ts:26\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    spec\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        getOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    getOne(code: string)\n                \n            \n\n\n            \n                \n                    Defined in src/transit/services/stop.service.ts:38\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    code\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        getRouteStops\n                        \n                    \n                \n            \n            \n                \n                    \n                    getRouteStops(routeCode: string)\n                \n            \n\n\n            \n                \n                    Defined in src/transit/services/stop.service.ts:14\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    routeCode\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        getSaved\n                        \n                    \n                \n            \n            \n                \n                    \n                    getSaved(user: string)\n                \n            \n\n\n            \n                \n                    Defined in src/transit/services/stop.service.ts:30\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        getStopLines\n                        \n                    \n                \n            \n            \n                \n                    \n                    getStopLines()\n                \n            \n\n\n            \n                \n                    Defined in src/transit/services/stop.service.ts:18\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        getStops\n                        \n                    \n                \n            \n            \n                \n                    \n                    getStops()\n                \n            \n\n\n            \n                \n                    Defined in src/transit/services/stop.service.ts:10\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        insert\n                        \n                    \n                \n            \n            \n                \n                    \n                    insert(stops: Stop[])\n                \n            \n\n\n            \n                \n                    Defined in src/transit/services/stop.service.ts:34\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    stops\n                                    \n                                                Stop[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        updateStopLines\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateStopLines(lines: string[], code: string)\n                \n            \n\n\n            \n                \n                    Defined in src/transit/services/stop.service.ts:22\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    lines\n                                    \n                                            string[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    code\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { Stop } from '../entities/stop.entity';\nimport { StopRepository } from '../../repositories/stop.repository';\n\n@Injectable()\nexport class StopService {\n\n    constructor(private repo: StopRepository) {}\n\n    public async getStops(): Promise{\n        return this.repo.getAll();\n    }\n\n    public async getRouteStops(routeCode: string): Promise{\n        return this.repo.getRouteStops(routeCode);\n    }\n\n    public async getStopLines(): Promise{\n        return this.repo.getStopLines();\n    }\n    \n    public updateStopLines(lines: string[], code: string){\n        this.repo.updateStopLines(code, lines);\n    }\n\n    public get(spec: any): Promise{\n        return this.repo.get(spec);\n    }\n\n    public getSaved(user: string): Promise{\n        return this.repo.getSaved(user);\n    }\n\n    public async insert(stops: Stop[]){\n        this.repo.insert(stops);\n    }\n\n    public getOne(code: string): Promise{\n        return this.repo.getOne({code: code});\n    }\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/StopTimeEvent.html":{"url":"interfaces/StopTimeEvent.html","title":"interface - StopTimeEvent","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  StopTimeEvent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/transit/proto/trips.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            delay\n                                        \n                                \n                                \n                                        \n                                            time\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        delay\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        delay:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        time\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        time:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Line } from \"../entities/line.entity\";\nimport { Schedule } from \"../entities/schedule.entity\";\nimport { Stop } from \"../entities/stop.entity\";\nimport { DataService } from \"../services/data.service\";\nimport { LiveUpdatesService } from \"../services/live.updates.service\";\nimport { ArrivalDto } from \"../transitDtos/arrival.dto\";\n\nexport interface FeedHeader{\n    gtfsRealtimeVersion: string;\n    incrementality: number;\n    timestamp: number;\n}\n\nexport interface FeedMessage{\n    header: FeedHeader;\n    entity: FeedEntity[];\n}\n\nexport interface FeedEntity {\n    id: string;\n    tripUpdate: TripUpdate;\n}\n\nexport interface StopTimeEvent {\n    delay?: number;\n    time: number;\n}\n\nexport interface StopTimeUpdate{\n    stopSequence: number;\n    stopId: string;\n    arrival?: StopTimeEvent;\n    departure: StopTimeEvent;\n}\n\nexport interface TripUpdate {\n    trip: TripDescriptor;\n    stopTimeUpdate: StopTimeUpdate[];\n}\n\nexport interface TripDescriptor {\n    tripId: string;\n    routeId: string;\n    directionId: number;\n    startTime?: string;\n    startDate?: string;\n}\n\nexport default class Trip{\n\n    private defaultTrip = {};\n    private live: LiveUpdatesService;\n    private data: DataService;\n\n    private trip: TripDescriptor = {tripId: '1', routeId: '2', directionId: 0, startDate: '1', startTime: '2'};\n    private header: FeedHeader = {gtfsRealtimeVersion: '2', incrementality: 1, timestamp: 2};\n    private arrival: StopTimeEvent = {time: 1, delay: 2};\n    private departure: StopTimeEvent = {time: 2, delay: 1};\n    private stopTimeUpdate: StopTimeUpdate = {stopId: '1', stopSequence: 2, arrival: this.arrival, departure: this.departure};\n    private tripUpdate: TripUpdate = {trip: this.trip, stopTimeUpdate: [this.stopTimeUpdate, this.stopTimeUpdate]};\n    private entity: FeedEntity = {id: '1', tripUpdate: this.tripUpdate};\n    private message: FeedMessage = {header: this.header, entity: [this.entity, this.entity]};\n\n    constructor(live: LiveUpdatesService, data: DataService){\n        this.live = live;\n        this.data = data;\n    }\n\n    public get getMessage(): FeedMessage{\n        return this.message;\n    }\n\n    public async updateContructor(day: number){\n        \n        const lines: Line[] = await this.data.lines.getLines();\n\n        for (const line of lines) {\n\n            const { data } = await this.live.getLiveData(line.name, 'lines/live/');\n\n            if(data){\n                \n                let stops: Stop[] = [];\n                for (const e of data) {\n                    stops = await this.data.stops.getRouteStops(e.routeCode);\n                }\n\n                //for each stop of every route\n                for (const stop of stops) {\n\n                    const {data} = await this.live.getLiveData(stop.code, 'stops/live/');\n\n                    const tripUpdate: TripUpdate = {trip: undefined, stopTimeUpdate: []};\n                    const trips: Schedule[] = await this.data.schedule.getTrips(data.routeCode, day, stop.code);\n                    //for each arrival to the stop\n                    if(data.vehicles){\n\n                        for(const e of data.vehicles){\n\n                            const trips: Schedule[] = await this.data.schedule.getTrips(e.routeCode, day, stop.code);\n\n                            for (const trip of trips) {\n                                \n                                \n                            }\n                            \n                        }\n                    }\n\n\n\n\n                }\n\n\n            }   \n            \n        }\n    }\n\n    private createtMessage(sch: Schedule, arr: ArrivalDto, stopCode: string, seq: number){\n        const trip: TripDescriptor = {tripId: sch.trip_id + '', routeId: sch.line, directionId: 0};\n        const header: FeedHeader = {gtfsRealtimeVersion: '2', incrementality: 1, timestamp: Date.now()};\n\n        const arrival: StopTimeEvent = {time: 1, delay: 0};\n        const departure: StopTimeEvent = {time: Date.now() + Math.floor(arr.departureMins/60)};\n\n        const stopTimeUpdate: StopTimeUpdate = {stopId: stopCode, stopSequence: seq, departure: departure};\n        \n        const tripUpdate: TripUpdate = {trip: this.trip, stopTimeUpdate: [this.stopTimeUpdate, this.stopTimeUpdate]};\n        const entity: FeedEntity = {id: '1', tripUpdate: this.tripUpdate};\n        const message: FeedMessage = {header: this.header, entity: [this.entity, this.entity]};\n    }\n}\n  \n\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/StopTimeUpdate.html":{"url":"interfaces/StopTimeUpdate.html","title":"interface - StopTimeUpdate","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  StopTimeUpdate\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/transit/proto/trips.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            arrival\n                                        \n                                \n                                \n                                        \n                                            departure\n                                        \n                                \n                                \n                                        \n                                            stopId\n                                        \n                                \n                                \n                                        \n                                            stopSequence\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        arrival\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        arrival:         StopTimeEvent\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         StopTimeEvent\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        departure\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        departure:         StopTimeEvent\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         StopTimeEvent\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        stopId\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        stopId:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        stopSequence\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        stopSequence:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Line } from \"../entities/line.entity\";\nimport { Schedule } from \"../entities/schedule.entity\";\nimport { Stop } from \"../entities/stop.entity\";\nimport { DataService } from \"../services/data.service\";\nimport { LiveUpdatesService } from \"../services/live.updates.service\";\nimport { ArrivalDto } from \"../transitDtos/arrival.dto\";\n\nexport interface FeedHeader{\n    gtfsRealtimeVersion: string;\n    incrementality: number;\n    timestamp: number;\n}\n\nexport interface FeedMessage{\n    header: FeedHeader;\n    entity: FeedEntity[];\n}\n\nexport interface FeedEntity {\n    id: string;\n    tripUpdate: TripUpdate;\n}\n\nexport interface StopTimeEvent {\n    delay?: number;\n    time: number;\n}\n\nexport interface StopTimeUpdate{\n    stopSequence: number;\n    stopId: string;\n    arrival?: StopTimeEvent;\n    departure: StopTimeEvent;\n}\n\nexport interface TripUpdate {\n    trip: TripDescriptor;\n    stopTimeUpdate: StopTimeUpdate[];\n}\n\nexport interface TripDescriptor {\n    tripId: string;\n    routeId: string;\n    directionId: number;\n    startTime?: string;\n    startDate?: string;\n}\n\nexport default class Trip{\n\n    private defaultTrip = {};\n    private live: LiveUpdatesService;\n    private data: DataService;\n\n    private trip: TripDescriptor = {tripId: '1', routeId: '2', directionId: 0, startDate: '1', startTime: '2'};\n    private header: FeedHeader = {gtfsRealtimeVersion: '2', incrementality: 1, timestamp: 2};\n    private arrival: StopTimeEvent = {time: 1, delay: 2};\n    private departure: StopTimeEvent = {time: 2, delay: 1};\n    private stopTimeUpdate: StopTimeUpdate = {stopId: '1', stopSequence: 2, arrival: this.arrival, departure: this.departure};\n    private tripUpdate: TripUpdate = {trip: this.trip, stopTimeUpdate: [this.stopTimeUpdate, this.stopTimeUpdate]};\n    private entity: FeedEntity = {id: '1', tripUpdate: this.tripUpdate};\n    private message: FeedMessage = {header: this.header, entity: [this.entity, this.entity]};\n\n    constructor(live: LiveUpdatesService, data: DataService){\n        this.live = live;\n        this.data = data;\n    }\n\n    public get getMessage(): FeedMessage{\n        return this.message;\n    }\n\n    public async updateContructor(day: number){\n        \n        const lines: Line[] = await this.data.lines.getLines();\n\n        for (const line of lines) {\n\n            const { data } = await this.live.getLiveData(line.name, 'lines/live/');\n\n            if(data){\n                \n                let stops: Stop[] = [];\n                for (const e of data) {\n                    stops = await this.data.stops.getRouteStops(e.routeCode);\n                }\n\n                //for each stop of every route\n                for (const stop of stops) {\n\n                    const {data} = await this.live.getLiveData(stop.code, 'stops/live/');\n\n                    const tripUpdate: TripUpdate = {trip: undefined, stopTimeUpdate: []};\n                    const trips: Schedule[] = await this.data.schedule.getTrips(data.routeCode, day, stop.code);\n                    //for each arrival to the stop\n                    if(data.vehicles){\n\n                        for(const e of data.vehicles){\n\n                            const trips: Schedule[] = await this.data.schedule.getTrips(e.routeCode, day, stop.code);\n\n                            for (const trip of trips) {\n                                \n                                \n                            }\n                            \n                        }\n                    }\n\n\n\n\n                }\n\n\n            }   \n            \n        }\n    }\n\n    private createtMessage(sch: Schedule, arr: ArrivalDto, stopCode: string, seq: number){\n        const trip: TripDescriptor = {tripId: sch.trip_id + '', routeId: sch.line, directionId: 0};\n        const header: FeedHeader = {gtfsRealtimeVersion: '2', incrementality: 1, timestamp: Date.now()};\n\n        const arrival: StopTimeEvent = {time: 1, delay: 0};\n        const departure: StopTimeEvent = {time: Date.now() + Math.floor(arr.departureMins/60)};\n\n        const stopTimeUpdate: StopTimeUpdate = {stopId: stopCode, stopSequence: seq, departure: departure};\n        \n        const tripUpdate: TripUpdate = {trip: this.trip, stopTimeUpdate: [this.stopTimeUpdate, this.stopTimeUpdate]};\n        const entity: FeedEntity = {id: '1', tripUpdate: this.tripUpdate};\n        const message: FeedMessage = {header: this.header, entity: [this.entity, this.entity]};\n    }\n}\n  \n\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/TransitController.html":{"url":"controllers/TransitController.html","title":"controller - TransitController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  TransitController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/transit/controllers/transit.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                transitAPI\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                getLineRoutes\n                            \n                            \n                                    Public\n                                getLines\n                            \n                            \n                                    Public\n                                    Async\n                                getRouteSchedule\n                            \n                            \n                                    Public\n                                    Async\n                                getRouteStops\n                            \n                            \n                                    Public\n                                getStopRoutes\n                            \n                            \n                                    Public\n                                getStops\n                            \n                            \n                                    Public\n                                getTrips\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        getLineRoutes\n                        \n                    \n                \n            \n            \n                \n                    \n                    getLineRoutes(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/lineRoutes/:id')@Header('Content-Type', 'application/json')\n                \n            \n\n            \n                \n                    Defined in src/transit/controllers/transit.controller.ts:31\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        getLines\n                        \n                    \n                \n            \n            \n                \n                    \n                    getLines()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/lines')@Header('Content-Type', 'application/json')\n                \n            \n\n            \n                \n                    Defined in src/transit/controllers/transit.controller.ts:19\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        getRouteSchedule\n                        \n                    \n                \n            \n            \n                \n                    \n                    getRouteSchedule(code: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/routeSchedules/:code')@Header('Content-Type', 'application/json')\n                \n            \n\n            \n                \n                    Defined in src/transit/controllers/transit.controller.ts:49\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    code\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        getRouteStops\n                        \n                    \n                \n            \n            \n                \n                    \n                    getRouteStops(code: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/routeInfo/:code')@Header('Content-Type', 'application/json')\n                \n            \n\n            \n                \n                    Defined in src/transit/controllers/transit.controller.ts:37\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    code\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        getStopRoutes\n                        \n                    \n                \n            \n            \n                \n                    \n                    getStopRoutes(code: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/stopRoutes/:code')@Header('Content-Type', 'application/json')\n                \n            \n\n            \n                \n                    Defined in src/transit/controllers/transit.controller.ts:64\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    code\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        getStops\n                        \n                    \n                \n            \n            \n                \n                    \n                    getStops()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/stops')@Header('Content-Type', 'application/json')\n                \n            \n\n            \n                \n                    Defined in src/transit/controllers/transit.controller.ts:25\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        getTrips\n                        \n                    \n                \n            \n            \n                \n                    \n                    getTrips(data: any)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/getPaths')@Header('Content-Type', 'application/json')\n                \n            \n\n            \n                \n                    Defined in src/transit/controllers/transit.controller.ts:58\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Header, Post } from '@nestjs/common';\nimport { Body, Param } from '@nestjs/common/decorators/http/route-params.decorator';\nimport { Line } from '../entities/line.entity';\nimport { Route } from '../entities/route.entity';\nimport { Schedule } from '../entities/schedule.entity';\nimport { Stop } from '../entities/stop.entity';\nimport { DataService } from '../services/data.service';\nimport { Plan } from '../transitDtos/itinerary.dto';\nimport { RouteInfoDto } from '../transitDtos/route.dto';\nimport { ScheduleDetailsDto } from '../transitDtos/schedule.details';\n\n@Controller('transitAPI')\nexport class TransitController {\n\n    constructor(private data: DataService){}\n\n    @Get('/lines')\n    @Header('Content-Type', 'application/json')\n    public getLines(): Promise{\n        return this.data.lines.getLines();\n    }\n\n    @Get('/stops')\n    @Header('Content-Type', 'application/json')\n    public getStops(): Promise{\n        return this.data.stops.getStops();\n    }\n\n    @Get('/lineRoutes/:id')\n    @Header('Content-Type', 'application/json')\n    public getLineRoutes(@Param('id') id: string): Promise{\n        return this.data.routes.getLineRoutes(id);\n    }\n\n    @Get('/routeInfo/:code')\n    @Header('Content-Type', 'application/json')\n    public async getRouteStops(@Param('code') code: string): Promise{\n\n        const resolve = await Promise.all([\n            this.data.stops.getRouteStops(code),\n            this.data.points.getRoutePoints(code)\n        ]);\n\n        return new RouteInfoDto(resolve[0], resolve[1], code);\n    }\n\n    @Get('/routeSchedules/:code')\n    @Header('Content-Type', 'application/json')\n    public async getRouteSchedule(@Param('code') code: string): Promise{\n\n        const schedules: Schedule[] = await this.data.schedule.getRouteSchedules(code);\n\n        return new ScheduleDetailsDto(schedules, code);\n    }\n\n    @Post('/getPaths')\n    @Header('Content-Type', 'application/json')\n    public getTrips(@Body() data: any): Promise{\n        return this.data.otp.getPlan(data.data);\n    }\n\n    @Get('/stopRoutes/:code')\n    @Header('Content-Type', 'application/json')\n    public getStopRoutes(@Param('code') code: string): Promise{\n        return this.data.routes.getStopRoutes(code);\n    }\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/TransitGateWay.html":{"url":"classes/TransitGateWay.html","title":"class - TransitGateWay","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  TransitGateWay\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/socketsIO/transit.gateway.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        OnGatewayConnection\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                server\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                handleConnection\n                            \n                            \n                                    Public\n                                handleDisconnect\n                            \n                            \n                                    Public\n                                updateOccupancy\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/socketsIO/transit.gateway.ts:8\n                            \n                        \n\n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        server\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Server\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @WebSocketServer()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/socketsIO/transit.gateway.ts:8\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        handleConnection\n                        \n                    \n                \n            \n            \n                \n                    \n                    handleConnection(client: Socket)\n                \n            \n\n\n            \n                \n                    Defined in src/socketsIO/transit.gateway.ts:16\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    client\n                                    \n                                            Socket\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        handleDisconnect\n                        \n                    \n                \n            \n            \n                \n                    \n                    handleDisconnect(client: Socket)\n                \n            \n\n\n            \n                \n                    Defined in src/socketsIO/transit.gateway.ts:21\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    client\n                                    \n                                            Socket\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        updateOccupancy\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateOccupancy(value: number, trip_ids: number[])\n                \n            \n\n\n            \n                \n                    Defined in src/socketsIO/transit.gateway.ts:12\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    trip_ids\n                                    \n                                            number[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { OnGatewayConnection } from \"@nestjs/websockets\";\nimport { SubscribeMessage, WebSocketGateway, WebSocketServer } from \"@nestjs/websockets/decorators\";\nimport { Server, Socket } from \"socket.io\";\n\n@WebSocketGateway({cors: {origins: ['http://localhost:4200']}})\nexport class TransitGateWay implements OnGatewayConnection{\n\n    @WebSocketServer() private server: Server;\n\n    constructor(){}\n\n    public updateOccupancy(value: number, trip_ids: number[]){\n        this.server.emit('update', {value: value, trip_ids: trip_ids});\n    }\n\n    public handleConnection(client: Socket){\n        client.join(client.id);\n        this.server.to(client.id).emit('accepted', {msg: 'Connection Established'});\n    }\n\n    public handleDisconnect(client: Socket){\n        client.leave(client.id);\n    }\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/TransitModule.html":{"url":"modules/TransitModule.html","title":"module - TransitModule","body":"\n                   \n\n\n\n\n    Modules\n    TransitModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_TransitModule\n\n\n\ncluster_TransitModule_exports\n\n\n\ncluster_TransitModule_providers\n\n\n\n\nDataService \n\nDataService \n\n\n\nTransitModule\n\nTransitModule\n\nDataService  -->\n\nTransitModule->DataService \n\n\n\n\n\nDBUpdateService\n\nDBUpdateService\n\nTransitModule -->\n\nDBUpdateService->TransitModule\n\n\n\n\n\nDataService\n\nDataService\n\nTransitModule -->\n\nDataService->TransitModule\n\n\n\n\n\nLineRepository\n\nLineRepository\n\nTransitModule -->\n\nLineRepository->TransitModule\n\n\n\n\n\nLineService\n\nLineService\n\nTransitModule -->\n\nLineService->TransitModule\n\n\n\n\n\nLiveDataRepository\n\nLiveDataRepository\n\nTransitModule -->\n\nLiveDataRepository->TransitModule\n\n\n\n\n\nLiveUpdatesService\n\nLiveUpdatesService\n\nTransitModule -->\n\nLiveUpdatesService->TransitModule\n\n\n\n\n\nOTPService\n\nOTPService\n\nTransitModule -->\n\nOTPService->TransitModule\n\n\n\n\n\nPointService\n\nPointService\n\nTransitModule -->\n\nPointService->TransitModule\n\n\n\n\n\nRouteService\n\nRouteService\n\nTransitModule -->\n\nRouteService->TransitModule\n\n\n\n\n\nRouteStopService\n\nRouteStopService\n\nTransitModule -->\n\nRouteStopService->TransitModule\n\n\n\n\n\nScheduleService\n\nScheduleService\n\nTransitModule -->\n\nScheduleService->TransitModule\n\n\n\n\n\nStopService\n\nStopService\n\nTransitModule -->\n\nStopService->TransitModule\n\n\n\n\n\nTripRepository\n\nTripRepository\n\nTransitModule -->\n\nTripRepository->TransitModule\n\n\n\n\n\nTripService\n\nTripService\n\nTransitModule -->\n\nTripService->TransitModule\n\n\n\n\n\nTripUpdatesListener\n\nTripUpdatesListener\n\nTransitModule -->\n\nTripUpdatesListener->TransitModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/transit/transit.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            DBUpdateService\n                        \n                        \n                            DataService\n                        \n                        \n                            LineRepository\n                        \n                        \n                            LineService\n                        \n                        \n                            LiveDataRepository\n                        \n                        \n                            LiveUpdatesService\n                        \n                        \n                            OTPService\n                        \n                        \n                            PointService\n                        \n                        \n                            RouteService\n                        \n                        \n                            RouteStopService\n                        \n                        \n                            ScheduleService\n                        \n                        \n                            StopService\n                        \n                        \n                            TripRepository\n                        \n                        \n                            TripService\n                        \n                        \n                            TripUpdatesListener\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            TransitController\n                        \n                        \n                            DBupdateController\n                        \n                        \n                            LiveUpdatesController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            DataService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { Line } from './entities/line.entity';\nimport { Point } from './entities/point.entity';\nimport { Route } from './entities/route.entity';\nimport { Stop } from './entities/stop.entity';\nimport { TransitController } from './controllers/transit.controller';\nimport { RouteStop } from './entities/routeStops.entity';\nimport { DBUpdateService } from './services/db.update.service';\nimport { DBupdateController } from './controllers/db.update.controller';\nimport { LiveUpdatesService } from './services/live.updates.service';\nimport { LiveUpdatesController } from './controllers/live.updates.controller';\nimport { HttpModule } from '@nestjs/axios';\nimport { Schedule } from './entities/schedule.entity';\nimport { LineService } from './services/line.service';\nimport { RouteService } from './services/routes.service';\nimport { PointService } from './services/points.service';\nimport { ScheduleService } from './services/schedule.service';\nimport { StopService } from './services/stop.service';\nimport { LineRepository } from '../repositories/line.repository';\nimport { RouteRepository } from '../repositories/route.repository';\nimport { PointRepository } from '../repositories/point.repository';\nimport { ScheduleRepository } from '../repositories/schedule.repository';\nimport { StopRepository } from '../repositories/stop.repository';\nimport { Context } from './Navigator/context';\nimport { DataService } from './services/data.service';\nimport { Trip } from './entities/trip.entity';\nimport { TripRepository } from 'src/repositories/trip.repository';\nimport { TripService } from './services/trip.service';\nimport { OTPService } from './services/otp.service';\nimport { TripUpdatesListener } from './listeners/trips.update.listener';\nimport { TransitGateWay } from 'src/socketsIO/transit.gateway';\nimport { RouteStopRepository } from 'src/repositories/routeStop.repository';\nimport { RouteStopService } from './services/routeStop.service';\nimport { NewSchedule } from './entities/newSchedule.entity';\nimport { NewScheduleService } from './services/newSchedule.service';\nimport { LiveData } from './entities/live.data';\nimport { LiveDataRepository } from 'src/repositories/liveData.repository';\n\n\n@Module({\n    imports: [\n        TypeOrmModule.forFeature([NewSchedule, Line, Route, Point, Stop, RouteStop, Schedule, Trip, LiveData]), \n        HttpModule\n    ],\n    providers: [\n        DBUpdateService, LiveUpdatesService, LineService, RouteService, DataService, OTPService,\n        PointService, ScheduleService, StopService, RouteStopRepository, RouteStopService,\n        TripRepository, TripService, LineRepository, RouteRepository, PointRepository, ScheduleRepository, StopRepository,\n        TripUpdatesListener, TransitGateWay, NewScheduleService, LiveDataRepository\n    ],\n    controllers: [TransitController, DBupdateController, LiveUpdatesController],\n    exports: [DataService]\n})\nexport class TransitModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Trip.html":{"url":"entities/Trip.html","title":"entity - Trip","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Trip\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/transit/entities/trip.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                debarkation\n                            \n                            \n                                    Public\n                                embarkation\n                            \n                            \n                                    Public\n                                id\n                            \n                            \n                                    Public\n                                occupied\n                            \n                            \n                                    Public\n                                routeCode\n                            \n                            \n                                    Public\n                                stopCode\n                            \n                            \n                                    Public\n                                time\n                            \n                            \n                                    Public\n                                totalSeats\n                            \n                            \n                                    Public\n                                trip_id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        debarkation\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({nullable: false, type: 'bigint'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/transit/entities/trip.entity.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        embarkation\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({nullable: false, type: 'bigint'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/transit/entities/trip.entity.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryColumn({nullable: false, type: 'bigint'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/transit/entities/trip.entity.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        occupied\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({nullable: false, type: 'bigint'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/transit/entities/trip.entity.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        routeCode\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({nullable: true, type: 'varchar'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/transit/entities/trip.entity.ts:29\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        stopCode\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryColumn({nullable: false, type: 'varchar'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/transit/entities/trip.entity.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        time\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({nullable: true, type: 'varchar'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/transit/entities/trip.entity.ts:32\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        totalSeats\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({nullable: false, type: 'bigint'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/transit/entities/trip.entity.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        trip_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryColumn({nullable: false, type: 'bigint'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/transit/entities/trip.entity.ts:8\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Column, Entity, OneToMany, PrimaryColumn, Index, ManyToOne, JoinColumn} from 'typeorm';\n\n@Entity()\n@Index(['trip_id', 'stopCode'], {unique: false})\nexport class Trip{\n\n    @PrimaryColumn({nullable: false, type: 'bigint'})\n    public trip_id: number;\n\n    @PrimaryColumn({nullable: false, type: 'varchar'})\n    public stopCode: string;\n\n    @PrimaryColumn({nullable: false, type: 'bigint'})\n    public id: number;\n\n    @Column({nullable: false, type: 'bigint'})\n    public occupied: number;\n\n    @Column({nullable: false, type: 'bigint'})\n    public totalSeats: number;\n\n    @Column({nullable: false, type: 'bigint'})\n    public embarkation: number;\n\n    @Column({nullable: false, type: 'bigint'})\n    public debarkation: number;\n\n    @Column({nullable: true, type: 'varchar'})\n    public routeCode: string;\n\n    @Column({nullable: true, type: 'varchar'})\n    public time: string;\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Trip-1.html":{"url":"classes/Trip-1.html","title":"class - Trip-1","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Trip\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/transit/proto/trips.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                arrival\n                            \n                            \n                                    Private\n                                data\n                            \n                            \n                                    Private\n                                defaultTrip\n                            \n                            \n                                    Private\n                                departure\n                            \n                            \n                                    Private\n                                entity\n                            \n                            \n                                    Private\n                                header\n                            \n                            \n                                    Private\n                                live\n                            \n                            \n                                    Private\n                                message\n                            \n                            \n                                    Private\n                                stopTimeUpdate\n                            \n                            \n                                    Private\n                                trip\n                            \n                            \n                                    Private\n                                tripUpdate\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                createtMessage\n                            \n                            \n                                    Public\n                                    Async\n                                updateContructor\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    getMessage\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(live: LiveUpdatesService, data: DataService)\n                    \n                \n                        \n                            \n                                Defined in src/transit/proto/trips.ts:62\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        live\n                                                  \n                                                        \n                                                                        LiveUpdatesService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        data\n                                                  \n                                                        \n                                                                        DataService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        arrival\n                        \n                    \n                \n            \n                \n                    \n                        Type :         StopTimeEvent\n\n                    \n                \n                \n                    \n                        Default value : {time: 1, delay: 2}\n                    \n                \n                    \n                        \n                                Defined in src/transit/proto/trips.ts:57\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        data\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DataService\n\n                    \n                \n                    \n                        \n                                Defined in src/transit/proto/trips.ts:53\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        defaultTrip\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {}\n                    \n                \n                    \n                        \n                                Defined in src/transit/proto/trips.ts:51\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        departure\n                        \n                    \n                \n            \n                \n                    \n                        Type :         StopTimeEvent\n\n                    \n                \n                \n                    \n                        Default value : {time: 2, delay: 1}\n                    \n                \n                    \n                        \n                                Defined in src/transit/proto/trips.ts:58\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        entity\n                        \n                    \n                \n            \n                \n                    \n                        Type :         FeedEntity\n\n                    \n                \n                \n                    \n                        Default value : {id: '1', tripUpdate: this.tripUpdate}\n                    \n                \n                    \n                        \n                                Defined in src/transit/proto/trips.ts:61\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        header\n                        \n                    \n                \n            \n                \n                    \n                        Type :         FeedHeader\n\n                    \n                \n                \n                    \n                        Default value : {gtfsRealtimeVersion: '2', incrementality: 1, timestamp: 2}\n                    \n                \n                    \n                        \n                                Defined in src/transit/proto/trips.ts:56\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        live\n                        \n                    \n                \n            \n                \n                    \n                        Type :         LiveUpdatesService\n\n                    \n                \n                    \n                        \n                                Defined in src/transit/proto/trips.ts:52\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        message\n                        \n                    \n                \n            \n                \n                    \n                        Type :         FeedMessage\n\n                    \n                \n                \n                    \n                        Default value : {header: this.header, entity: [this.entity, this.entity]}\n                    \n                \n                    \n                        \n                                Defined in src/transit/proto/trips.ts:62\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        stopTimeUpdate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         StopTimeUpdate\n\n                    \n                \n                \n                    \n                        Default value : {stopId: '1', stopSequence: 2, arrival: this.arrival, departure: this.departure}\n                    \n                \n                    \n                        \n                                Defined in src/transit/proto/trips.ts:59\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        trip\n                        \n                    \n                \n            \n                \n                    \n                        Type :         TripDescriptor\n\n                    \n                \n                \n                    \n                        Default value : {tripId: '1', routeId: '2', directionId: 0, startDate: '1', startTime: '2'}\n                    \n                \n                    \n                        \n                                Defined in src/transit/proto/trips.ts:55\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        tripUpdate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         TripUpdate\n\n                    \n                \n                \n                    \n                        Default value : {trip: this.trip, stopTimeUpdate: [this.stopTimeUpdate, this.stopTimeUpdate]}\n                    \n                \n                    \n                        \n                                Defined in src/transit/proto/trips.ts:60\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        createtMessage\n                        \n                    \n                \n            \n            \n                \n                    \n                    createtMessage(sch: Schedule, arr: ArrivalDto, stopCode: string, seq: number)\n                \n            \n\n\n            \n                \n                    Defined in src/transit/proto/trips.ts:121\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    sch\n                                    \n                                                Schedule\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    arr\n                                    \n                                                ArrivalDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    stopCode\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    seq\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        updateContructor\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateContructor(day: number)\n                \n            \n\n\n            \n                \n                    Defined in src/transit/proto/trips.ts:73\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    day\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        getMessage\n                    \n                \n\n                \n                    \n                        getgetMessage()\n                    \n                \n                            \n                                \n                                    Defined in src/transit/proto/trips.ts:69\n                                \n                            \n\n            \n        \n\n    \n\n\n    \n        import { Line } from \"../entities/line.entity\";\nimport { Schedule } from \"../entities/schedule.entity\";\nimport { Stop } from \"../entities/stop.entity\";\nimport { DataService } from \"../services/data.service\";\nimport { LiveUpdatesService } from \"../services/live.updates.service\";\nimport { ArrivalDto } from \"../transitDtos/arrival.dto\";\n\nexport interface FeedHeader{\n    gtfsRealtimeVersion: string;\n    incrementality: number;\n    timestamp: number;\n}\n\nexport interface FeedMessage{\n    header: FeedHeader;\n    entity: FeedEntity[];\n}\n\nexport interface FeedEntity {\n    id: string;\n    tripUpdate: TripUpdate;\n}\n\nexport interface StopTimeEvent {\n    delay?: number;\n    time: number;\n}\n\nexport interface StopTimeUpdate{\n    stopSequence: number;\n    stopId: string;\n    arrival?: StopTimeEvent;\n    departure: StopTimeEvent;\n}\n\nexport interface TripUpdate {\n    trip: TripDescriptor;\n    stopTimeUpdate: StopTimeUpdate[];\n}\n\nexport interface TripDescriptor {\n    tripId: string;\n    routeId: string;\n    directionId: number;\n    startTime?: string;\n    startDate?: string;\n}\n\nexport default class Trip{\n\n    private defaultTrip = {};\n    private live: LiveUpdatesService;\n    private data: DataService;\n\n    private trip: TripDescriptor = {tripId: '1', routeId: '2', directionId: 0, startDate: '1', startTime: '2'};\n    private header: FeedHeader = {gtfsRealtimeVersion: '2', incrementality: 1, timestamp: 2};\n    private arrival: StopTimeEvent = {time: 1, delay: 2};\n    private departure: StopTimeEvent = {time: 2, delay: 1};\n    private stopTimeUpdate: StopTimeUpdate = {stopId: '1', stopSequence: 2, arrival: this.arrival, departure: this.departure};\n    private tripUpdate: TripUpdate = {trip: this.trip, stopTimeUpdate: [this.stopTimeUpdate, this.stopTimeUpdate]};\n    private entity: FeedEntity = {id: '1', tripUpdate: this.tripUpdate};\n    private message: FeedMessage = {header: this.header, entity: [this.entity, this.entity]};\n\n    constructor(live: LiveUpdatesService, data: DataService){\n        this.live = live;\n        this.data = data;\n    }\n\n    public get getMessage(): FeedMessage{\n        return this.message;\n    }\n\n    public async updateContructor(day: number){\n        \n        const lines: Line[] = await this.data.lines.getLines();\n\n        for (const line of lines) {\n\n            const { data } = await this.live.getLiveData(line.name, 'lines/live/');\n\n            if(data){\n                \n                let stops: Stop[] = [];\n                for (const e of data) {\n                    stops = await this.data.stops.getRouteStops(e.routeCode);\n                }\n\n                //for each stop of every route\n                for (const stop of stops) {\n\n                    const {data} = await this.live.getLiveData(stop.code, 'stops/live/');\n\n                    const tripUpdate: TripUpdate = {trip: undefined, stopTimeUpdate: []};\n                    const trips: Schedule[] = await this.data.schedule.getTrips(data.routeCode, day, stop.code);\n                    //for each arrival to the stop\n                    if(data.vehicles){\n\n                        for(const e of data.vehicles){\n\n                            const trips: Schedule[] = await this.data.schedule.getTrips(e.routeCode, day, stop.code);\n\n                            for (const trip of trips) {\n                                \n                                \n                            }\n                            \n                        }\n                    }\n\n\n\n\n                }\n\n\n            }   \n            \n        }\n    }\n\n    private createtMessage(sch: Schedule, arr: ArrivalDto, stopCode: string, seq: number){\n        const trip: TripDescriptor = {tripId: sch.trip_id + '', routeId: sch.line, directionId: 0};\n        const header: FeedHeader = {gtfsRealtimeVersion: '2', incrementality: 1, timestamp: Date.now()};\n\n        const arrival: StopTimeEvent = {time: 1, delay: 0};\n        const departure: StopTimeEvent = {time: Date.now() + Math.floor(arr.departureMins/60)};\n\n        const stopTimeUpdate: StopTimeUpdate = {stopId: stopCode, stopSequence: seq, departure: departure};\n        \n        const tripUpdate: TripUpdate = {trip: this.trip, stopTimeUpdate: [this.stopTimeUpdate, this.stopTimeUpdate]};\n        const entity: FeedEntity = {id: '1', tripUpdate: this.tripUpdate};\n        const message: FeedMessage = {header: this.header, entity: [this.entity, this.entity]};\n    }\n}\n  \n\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/TripDescriptor.html":{"url":"interfaces/TripDescriptor.html","title":"interface - TripDescriptor","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  TripDescriptor\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/transit/proto/position.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            directionId\n                                        \n                                \n                                \n                                        \n                                            routeId\n                                        \n                                \n                                \n                                        \n                                            startDate\n                                        \n                                \n                                \n                                        \n                                            tripId\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        directionId\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        directionId:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        routeId\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        routeId:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        startDate\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        startDate:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        tripId\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        tripId:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface FeedHeader{\n    gtfsRealtimeVersion: string;\n    incrimentality: number;\n    timestamp: number;\n}\n\nexport interface TripDescriptor{\n    tripId: string;\n    startDate: string;\n    routeId: string;\n    directionId: number;\n}\n\nexport interface Position{\n    latitude: number;\n    longitude: number;\n}\n\nexport interface Long{\n    low: number;\n    high: number;\n    unsigned: boolean;\n}  \n\nexport interface VehicleDescriptor{\n    id: string;\n    label: string;\n}\n\nexport interface VehiclePosition{\n    currentStopSequence: number;\n    stopId: string;\n    occupancyStatus: number;\n    trip: TripDescriptor;\n    position: Position;\n    timestamp: Long;\n    vehicle: VehicleDescriptor;\n}\n\nexport interface FeedEntity{\n    id: string;\n    vehicle: VehiclePosition;\n}\n\nexport interface FeedMessage{\n    header: FeedHeader;\n    entity: FeedEntity[];\n}\n\nexport class PositionProto{\n\n    constructor(){}\n\n    public async createProto(data: FeedMessage){\n        \n    }\n\n\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/TripDescriptor-1.html":{"url":"interfaces/TripDescriptor-1.html","title":"interface - TripDescriptor-1","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  TripDescriptor\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/transit/proto/trips.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            directionId\n                                        \n                                \n                                \n                                        \n                                            routeId\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            startDate\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            startTime\n                                        \n                                \n                                \n                                        \n                                            tripId\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        directionId\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        directionId:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        routeId\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        routeId:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        startDate\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        startDate:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        startTime\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        startTime:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        tripId\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        tripId:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Line } from \"../entities/line.entity\";\nimport { Schedule } from \"../entities/schedule.entity\";\nimport { Stop } from \"../entities/stop.entity\";\nimport { DataService } from \"../services/data.service\";\nimport { LiveUpdatesService } from \"../services/live.updates.service\";\nimport { ArrivalDto } from \"../transitDtos/arrival.dto\";\n\nexport interface FeedHeader{\n    gtfsRealtimeVersion: string;\n    incrementality: number;\n    timestamp: number;\n}\n\nexport interface FeedMessage{\n    header: FeedHeader;\n    entity: FeedEntity[];\n}\n\nexport interface FeedEntity {\n    id: string;\n    tripUpdate: TripUpdate;\n}\n\nexport interface StopTimeEvent {\n    delay?: number;\n    time: number;\n}\n\nexport interface StopTimeUpdate{\n    stopSequence: number;\n    stopId: string;\n    arrival?: StopTimeEvent;\n    departure: StopTimeEvent;\n}\n\nexport interface TripUpdate {\n    trip: TripDescriptor;\n    stopTimeUpdate: StopTimeUpdate[];\n}\n\nexport interface TripDescriptor {\n    tripId: string;\n    routeId: string;\n    directionId: number;\n    startTime?: string;\n    startDate?: string;\n}\n\nexport default class Trip{\n\n    private defaultTrip = {};\n    private live: LiveUpdatesService;\n    private data: DataService;\n\n    private trip: TripDescriptor = {tripId: '1', routeId: '2', directionId: 0, startDate: '1', startTime: '2'};\n    private header: FeedHeader = {gtfsRealtimeVersion: '2', incrementality: 1, timestamp: 2};\n    private arrival: StopTimeEvent = {time: 1, delay: 2};\n    private departure: StopTimeEvent = {time: 2, delay: 1};\n    private stopTimeUpdate: StopTimeUpdate = {stopId: '1', stopSequence: 2, arrival: this.arrival, departure: this.departure};\n    private tripUpdate: TripUpdate = {trip: this.trip, stopTimeUpdate: [this.stopTimeUpdate, this.stopTimeUpdate]};\n    private entity: FeedEntity = {id: '1', tripUpdate: this.tripUpdate};\n    private message: FeedMessage = {header: this.header, entity: [this.entity, this.entity]};\n\n    constructor(live: LiveUpdatesService, data: DataService){\n        this.live = live;\n        this.data = data;\n    }\n\n    public get getMessage(): FeedMessage{\n        return this.message;\n    }\n\n    public async updateContructor(day: number){\n        \n        const lines: Line[] = await this.data.lines.getLines();\n\n        for (const line of lines) {\n\n            const { data } = await this.live.getLiveData(line.name, 'lines/live/');\n\n            if(data){\n                \n                let stops: Stop[] = [];\n                for (const e of data) {\n                    stops = await this.data.stops.getRouteStops(e.routeCode);\n                }\n\n                //for each stop of every route\n                for (const stop of stops) {\n\n                    const {data} = await this.live.getLiveData(stop.code, 'stops/live/');\n\n                    const tripUpdate: TripUpdate = {trip: undefined, stopTimeUpdate: []};\n                    const trips: Schedule[] = await this.data.schedule.getTrips(data.routeCode, day, stop.code);\n                    //for each arrival to the stop\n                    if(data.vehicles){\n\n                        for(const e of data.vehicles){\n\n                            const trips: Schedule[] = await this.data.schedule.getTrips(e.routeCode, day, stop.code);\n\n                            for (const trip of trips) {\n                                \n                                \n                            }\n                            \n                        }\n                    }\n\n\n\n\n                }\n\n\n            }   \n            \n        }\n    }\n\n    private createtMessage(sch: Schedule, arr: ArrivalDto, stopCode: string, seq: number){\n        const trip: TripDescriptor = {tripId: sch.trip_id + '', routeId: sch.line, directionId: 0};\n        const header: FeedHeader = {gtfsRealtimeVersion: '2', incrementality: 1, timestamp: Date.now()};\n\n        const arrival: StopTimeEvent = {time: 1, delay: 0};\n        const departure: StopTimeEvent = {time: Date.now() + Math.floor(arr.departureMins/60)};\n\n        const stopTimeUpdate: StopTimeUpdate = {stopId: stopCode, stopSequence: seq, departure: departure};\n        \n        const tripUpdate: TripUpdate = {trip: this.trip, stopTimeUpdate: [this.stopTimeUpdate, this.stopTimeUpdate]};\n        const entity: FeedEntity = {id: '1', tripUpdate: this.tripUpdate};\n        const message: FeedMessage = {header: this.header, entity: [this.entity, this.entity]};\n    }\n}\n  \n\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/TripRepository.html":{"url":"injectables/TripRepository.html","title":"injectable - TripRepository","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  TripRepository\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/repositories/trip.repository.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        IGenericRepository\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                get\n                            \n                            \n                                    Public\n                                    Async\n                                getByDate\n                            \n                            \n                                    Public\n                                    Async\n                                getOccupation\n                            \n                            \n                                    Public\n                                    \n                                getOne\n                            \n                            \n                                    Public\n                                getStatus\n                            \n                            \n                                    Public\n                                    \n                                    Async\n                                insert\n                            \n                            \n                                    Public\n                                updateDebarkation\n                            \n                            \n                                    Public\n                                updateEmbarkation\n                            \n                            \n                                    Public\n                                    Async\n                                updateOccupation\n                            \n                            \n                                    Protected\n                                deleteOne\n                            \n                            \n                                    Protected\n                                    Async\n                                getAll\n                            \n                            \n                                    Protected\n                                insertOne\n                            \n                            \n                                    Protected\n                                updateOne\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \n                                Public\n                        constructor(tripRepo: Repository, dataSource: DataSource)\n                    \n                \n                        \n                            \n                                Defined in src/repositories/trip.repository.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        tripRepo\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        dataSource\n                                                  \n                                                        \n                                                                    DataSource\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        get\n                        \n                    \n                \n            \n            \n                \n                    \n                    get(trip_id: number)\n                \n            \n\n\n            \n                \n                    Inherited from         IGenericRepository\n\n                \n            \n            \n                \n                        Defined in         IGenericRepository:75\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    trip_id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        getByDate\n                        \n                    \n                \n            \n            \n                \n                    \n                    getByDate(routeCode: string, day: number, stopCode: string)\n                \n            \n\n\n            \n                \n                    Defined in src/repositories/trip.repository.ts:84\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    routeCode\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    day\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    stopCode\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        getOccupation\n                        \n                    \n                \n            \n            \n                \n                    \n                    getOccupation(trip_ids: number[], stopCodes: string[])\n                \n            \n\n\n            \n                \n                    Defined in src/repositories/trip.repository.ts:38\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    trip_ids\n                                    \n                                            number[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    stopCodes\n                                    \n                                            string[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        \n                        getOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    getOne(trip_id: number)\n                \n            \n\n\n            \n                \n                    Inherited from         IGenericRepository\n\n                \n            \n            \n                \n                        Defined in         IGenericRepository:26\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    trip_id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        getStatus\n                        \n                    \n                \n            \n            \n                \n                    \n                    getStatus(trip_id: number, stop: string)\n                \n            \n\n\n            \n                \n                    Defined in src/repositories/trip.repository.ts:34\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    trip_id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    stop\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        \n                        Async\n                        insert\n                        \n                    \n                \n            \n            \n                \n                    \n                    insert(data: Trip[])\n                \n            \n\n\n            \n                \n                    Inherited from         IGenericRepository\n\n                \n            \n            \n                \n                        Defined in         IGenericRepository:30\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                                Trip[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        updateDebarkation\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateDebarkation(trip_id: number, stopCode: string, value: number)\n                \n            \n\n\n            \n                \n                    Defined in src/repositories/trip.repository.ts:20\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    trip_id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    stopCode\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    value\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        updateEmbarkation\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateEmbarkation(trip_id: number, stopCode: string, value: number)\n                \n            \n\n\n            \n                \n                    Defined in src/repositories/trip.repository.ts:14\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    trip_id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    stopCode\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    value\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        updateOccupation\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateOccupation(stopCodes: string[], value: number, trip_id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/repositories/trip.repository.ts:64\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    stopCodes\n                                    \n                                            string[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    value\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    trip_id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Protected\n                        deleteOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteOne(spec: any)\n                \n            \n\n\n            \n                \n                    Inherited from         IGenericRepository\n\n                \n            \n            \n                \n                        Defined in         IGenericRepository:49\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    spec\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Protected\n                        Async\n                        getAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    getAll()\n                \n            \n\n\n            \n                \n                    Inherited from         IGenericRepository\n\n                \n            \n            \n                \n                        Defined in         IGenericRepository:11\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Protected\n                        insertOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    insertOne(data: T)\n                \n            \n\n\n            \n                \n                    Inherited from         IGenericRepository\n\n                \n            \n            \n                \n                        Defined in         IGenericRepository:32\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                            T\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Protected\n                        updateOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateOne(spec: any, update: any)\n                \n            \n\n\n            \n                \n                    Inherited from         IGenericRepository\n\n                \n            \n            \n                \n                        Defined in         IGenericRepository:58\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    spec\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    update\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from \"@nestjs/common\";\nimport { InjectDataSource, InjectRepository } from \"@nestjs/typeorm\";\nimport { Trip } from \"src/transit/entities/trip.entity\";\nimport { DataSource, Repository, UpdateResult } from \"typeorm\";\nimport { IGenericRepository } from \"./generic.repository\";\n\n@Injectable()\nexport class TripRepository extends IGenericRepository{\n\n    public constructor(@InjectRepository(Trip) tripRepo: Repository, @InjectDataSource() dataSource: DataSource){\n        super(tripRepo, dataSource);\n    }\n\n    public updateEmbarkation(trip_id: number, stopCode: string, value: number){\n        const spec: any = {trip_id: trip_id, stopCode: stopCode};\n        const update: any = {embarkation: () => `embarkation + ${value}`};\n        super.updateOne(spec, update);\n    }\n\n    public updateDebarkation(trip_id: number, stopCode: string, value: number){\n        const spec: any = {trip_id: trip_id, stopCode: stopCode};\n        const update: any = {debarkation: () => `debarkation + ${value}`};\n        super.updateOne(spec, update);\n    }\n\n    public override getOne(trip_id: number): Promise {\n        return super.getOne({trip_id: trip_id});\n    }\n\n    public override async insert(data: Trip[]): Promise {\n        super.insert(data);\n    }\n\n    public getStatus(trip_id: number, stop: string): Promise{\n        return super.getOne({trip_id: trip_id, stopCode: stop});\n    }\n\n    public async getOccupation(trip_ids: number[], stopCodes: string[]): Promise{\n\n        let query: string = ''\n\n        for(let i = 0; i  console.log(e));\n    }\n\n    public async updateOccupation(stopCodes: string[], value: number, trip_id: number): Promise{\n        await this.entityRepository\n            .createQueryBuilder()\n            .update()\n            .set({occupied: () => `occupied + ${value}`})\n            .where('\"stopCode\" IN (:...codes)', {codes: stopCodes})\n            .andWhere({trip_id: trip_id})\n            .execute()\n            .catch(e => console.log(e));\n    }\n\n    public async get(trip_id: number): Promise{\n        return this.db.query(`\n            SELECT * \n            FROM transit_data.trip AS trip\n            WHERE trip.\"trip_id\"='${trip_id}'\n            ORDER BY trip.\"id\" ASC;\n        `).catch(e => console.log(e));\n    }\n\n    public async getByDate(routeCode: string, day: number, stopCode: string): Promise {\n        return this.db.query(`\n            SELECT *\n            FROM transit_data.trip AS t\n            WHERE t.\"day\"=${day} AND t.\"routeCode\"='${routeCode}' AND t.\"stopCode\"='${stopCode}'\n        `).catch(e => console.log(e));\n    }\n\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/TripService.html":{"url":"injectables/TripService.html","title":"injectable - TripService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  TripService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/transit/services/trip.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                get\n                            \n                            \n                                    Public\n                                    Async\n                                getByDate\n                            \n                            \n                                    Public\n                                    Async\n                                getOccupation\n                            \n                            \n                                    Public\n                                getOne\n                            \n                            \n                                    Public\n                                    Async\n                                insertTrips\n                            \n                            \n                                    Public\n                                updateDebarkation\n                            \n                            \n                                    Public\n                                updateEmbarkation\n                            \n                            \n                                    Public\n                                    Async\n                                updateOccupation\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(repo: TripRepository)\n                    \n                \n                        \n                            \n                                Defined in src/transit/services/trip.service.ts:6\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        repo\n                                                  \n                                                        \n                                                                        TripRepository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        get\n                        \n                    \n                \n            \n            \n                \n                    \n                    get(trip_id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/transit/services/trip.service.ts:38\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    trip_id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        getByDate\n                        \n                    \n                \n            \n            \n                \n                    \n                    getByDate(routeCode: string, day: number, stopCode: string)\n                \n            \n\n\n            \n                \n                    Defined in src/transit/services/trip.service.ts:26\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    routeCode\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    day\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    stopCode\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        getOccupation\n                        \n                    \n                \n            \n            \n                \n                    \n                    getOccupation(trip_ids: number[], stopCodes: string[])\n                \n            \n\n\n            \n                \n                    Defined in src/transit/services/trip.service.ts:30\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    trip_ids\n                                    \n                                            number[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    stopCodes\n                                    \n                                            string[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        getOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    getOne(trip_id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/transit/services/trip.service.ts:14\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    trip_id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        insertTrips\n                        \n                    \n                \n            \n            \n                \n                    \n                    insertTrips(trips: Trip[])\n                \n            \n\n\n            \n                \n                    Defined in src/transit/services/trip.service.ts:10\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    trips\n                                    \n                                                Trip[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        updateDebarkation\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateDebarkation(trip_id: number, stopCode: string, value: number)\n                \n            \n\n\n            \n                \n                    Defined in src/transit/services/trip.service.ts:22\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    trip_id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    stopCode\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    value\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        updateEmbarkation\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateEmbarkation(trip_id: number, stopCode: string, value: number)\n                \n            \n\n\n            \n                \n                    Defined in src/transit/services/trip.service.ts:18\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    trip_id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    stopCode\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    value\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        updateOccupation\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateOccupation(stopCodes: string[], value: number, trip_id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/transit/services/trip.service.ts:34\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    stopCodes\n                                    \n                                            string[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    value\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    trip_id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { TripRepository } from 'src/repositories/trip.repository';\nimport { Trip } from '../entities/trip.entity';\n\n@Injectable()\nexport class TripService {\n\n    constructor(private repo: TripRepository) {}\n\n    public async insertTrips(trips: Trip[]): Promise{\n        this.repo.insert(trips);\n    }\n\n    public getOne(trip_id: number){\n        return this.repo.getOne(trip_id);\n    }\n\n    public updateEmbarkation(trip_id: number, stopCode: string, value: number){\n        this.repo.updateEmbarkation(trip_id, stopCode, value);\n    }\n\n    public updateDebarkation(trip_id: number, stopCode: string, value: number){\n        this.repo.updateDebarkation(trip_id, stopCode, value);\n    }\n\n    public async getByDate(routeCode: string, day: number, stopCode: string): Promise {\n       return this.repo.getByDate(routeCode, day, stopCode);\n    }\n\n    public async getOccupation(trip_ids: number[], stopCodes: string[]): Promise{\n        return this.repo.getOccupation(trip_ids, stopCodes);\n    }\n\n    public async updateOccupation(stopCodes: string[], value: number, trip_id: number): Promise{\n        this.repo.updateOccupation(stopCodes, value, trip_id);\n    }\n\n    public async get(trip_id: number): Promise{\n        return this.repo.get(trip_id);\n    }\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/TripState.html":{"url":"interfaces/TripState.html","title":"interface - TripState","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  TripState\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/transit/transitDtos/trip.state.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            arriveBy\n                                        \n                                \n                                \n                                        \n                                            date\n                                        \n                                \n                                \n                                        \n                                            destination\n                                        \n                                \n                                \n                                        \n                                            direction\n                                        \n                                \n                                \n                                        \n                                            fetch\n                                        \n                                \n                                \n                                        \n                                            start\n                                        \n                                \n                                \n                                        \n                                            time\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        arriveBy\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        arriveBy:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        date\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        date:         Date\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Date\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        destination\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        destination:     string[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        direction\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        direction:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        fetch\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        fetch:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        start\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        start:     string[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        time\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        time:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { initialize } from \"passport\";\n\nexport interface TripState {\n    start: string[];\n    destination: string[];\n    direction: string;\n    time: string;\n    date: Date;\n    arriveBy: string;\n    fetch: boolean;\n}\n\nexport class OTPParams{\n\n    public fromPlace: string;\n    public toPlace: string;\n    public time: string;\n    public date: string;\n    public arriveBy: boolean;\n    public mode: string = 'TRANSIT,WALK';\n    public maxWalkDistance: string = '4828.032';\n    public wheelchair: boolean = false;\n    public preferredRoutes: string = '1__16';\n    public otherThanPreferredRoutesPenalty: string = '0';\n    public showIntermediateStops: boolean = true;\n    public debugItineraryFilter: boolean = false;\n    public locale: string = 'en';\n\n    public constructor(init: TripState){\n\n        this.fromPlace = `${init.start[2]},${init.start[3]}`;\n        this.toPlace = `${init.destination[2]},${init.destination[3]}`;\n        this.date = this.apiDateFormat(init.date);\n        this.time = init.time;\n\n        if(init.arriveBy == 'depart'){\n            this.arriveBy = false;\n        }else{\n            this.arriveBy = true;\n        }\n\n    }\n \n    public buildQueryParams(): string{\n\n        const params: string[] = [\n            `fromPlace=${this.fromPlace}&`,\n            `toPlace=${this.toPlace}&`,\n            `time=${this.time}&`,\n            `date=${this.date}&`,\n            `arriveBy=${this.arriveBy}&`,\n            `mode=${this.mode}&`,\n            `maxWalkDistance=${this.maxWalkDistance}&`,\n            `wheelChair=${this.wheelchair}&`,\n            `preferedRoutes=${this.preferredRoutes}&`,\n            `otherThanPreferredRoutesPenalty=${this.otherThanPreferredRoutesPenalty}&`,\n            `showIntermediateStops=${this.showIntermediateStops}&`,\n            `debugItineraryFilter=${this.debugItineraryFilter}&`,\n            `locale=${this.locale}`\n        ];\n\n        return params.join('');\n    }\n\n    private apiDateFormat(date: Date): string{\n\n        let new_date: Date = new Date(date);\n        let year = new_date.getFullYear();\n        let month = (1 + new_date.getMonth()).toString();\n        let day = new_date.getDate().toString();\n\n        month = month.length > 1 ? month : '0' + month;\n        day = day.length > 1 ? day : '0' + day;\n\n        return month + '-' + day + '-' + year;\n    }\n\n}\n\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/TripUpdate.html":{"url":"interfaces/TripUpdate.html","title":"interface - TripUpdate","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  TripUpdate\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/transit/proto/trips.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            stopTimeUpdate\n                                        \n                                \n                                \n                                        \n                                            trip\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        stopTimeUpdate\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        stopTimeUpdate:         StopTimeUpdate[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         StopTimeUpdate[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        trip\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        trip:         TripDescriptor\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         TripDescriptor\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Line } from \"../entities/line.entity\";\nimport { Schedule } from \"../entities/schedule.entity\";\nimport { Stop } from \"../entities/stop.entity\";\nimport { DataService } from \"../services/data.service\";\nimport { LiveUpdatesService } from \"../services/live.updates.service\";\nimport { ArrivalDto } from \"../transitDtos/arrival.dto\";\n\nexport interface FeedHeader{\n    gtfsRealtimeVersion: string;\n    incrementality: number;\n    timestamp: number;\n}\n\nexport interface FeedMessage{\n    header: FeedHeader;\n    entity: FeedEntity[];\n}\n\nexport interface FeedEntity {\n    id: string;\n    tripUpdate: TripUpdate;\n}\n\nexport interface StopTimeEvent {\n    delay?: number;\n    time: number;\n}\n\nexport interface StopTimeUpdate{\n    stopSequence: number;\n    stopId: string;\n    arrival?: StopTimeEvent;\n    departure: StopTimeEvent;\n}\n\nexport interface TripUpdate {\n    trip: TripDescriptor;\n    stopTimeUpdate: StopTimeUpdate[];\n}\n\nexport interface TripDescriptor {\n    tripId: string;\n    routeId: string;\n    directionId: number;\n    startTime?: string;\n    startDate?: string;\n}\n\nexport default class Trip{\n\n    private defaultTrip = {};\n    private live: LiveUpdatesService;\n    private data: DataService;\n\n    private trip: TripDescriptor = {tripId: '1', routeId: '2', directionId: 0, startDate: '1', startTime: '2'};\n    private header: FeedHeader = {gtfsRealtimeVersion: '2', incrementality: 1, timestamp: 2};\n    private arrival: StopTimeEvent = {time: 1, delay: 2};\n    private departure: StopTimeEvent = {time: 2, delay: 1};\n    private stopTimeUpdate: StopTimeUpdate = {stopId: '1', stopSequence: 2, arrival: this.arrival, departure: this.departure};\n    private tripUpdate: TripUpdate = {trip: this.trip, stopTimeUpdate: [this.stopTimeUpdate, this.stopTimeUpdate]};\n    private entity: FeedEntity = {id: '1', tripUpdate: this.tripUpdate};\n    private message: FeedMessage = {header: this.header, entity: [this.entity, this.entity]};\n\n    constructor(live: LiveUpdatesService, data: DataService){\n        this.live = live;\n        this.data = data;\n    }\n\n    public get getMessage(): FeedMessage{\n        return this.message;\n    }\n\n    public async updateContructor(day: number){\n        \n        const lines: Line[] = await this.data.lines.getLines();\n\n        for (const line of lines) {\n\n            const { data } = await this.live.getLiveData(line.name, 'lines/live/');\n\n            if(data){\n                \n                let stops: Stop[] = [];\n                for (const e of data) {\n                    stops = await this.data.stops.getRouteStops(e.routeCode);\n                }\n\n                //for each stop of every route\n                for (const stop of stops) {\n\n                    const {data} = await this.live.getLiveData(stop.code, 'stops/live/');\n\n                    const tripUpdate: TripUpdate = {trip: undefined, stopTimeUpdate: []};\n                    const trips: Schedule[] = await this.data.schedule.getTrips(data.routeCode, day, stop.code);\n                    //for each arrival to the stop\n                    if(data.vehicles){\n\n                        for(const e of data.vehicles){\n\n                            const trips: Schedule[] = await this.data.schedule.getTrips(e.routeCode, day, stop.code);\n\n                            for (const trip of trips) {\n                                \n                                \n                            }\n                            \n                        }\n                    }\n\n\n\n\n                }\n\n\n            }   \n            \n        }\n    }\n\n    private createtMessage(sch: Schedule, arr: ArrivalDto, stopCode: string, seq: number){\n        const trip: TripDescriptor = {tripId: sch.trip_id + '', routeId: sch.line, directionId: 0};\n        const header: FeedHeader = {gtfsRealtimeVersion: '2', incrementality: 1, timestamp: Date.now()};\n\n        const arrival: StopTimeEvent = {time: 1, delay: 0};\n        const departure: StopTimeEvent = {time: Date.now() + Math.floor(arr.departureMins/60)};\n\n        const stopTimeUpdate: StopTimeUpdate = {stopId: stopCode, stopSequence: seq, departure: departure};\n        \n        const tripUpdate: TripUpdate = {trip: this.trip, stopTimeUpdate: [this.stopTimeUpdate, this.stopTimeUpdate]};\n        const entity: FeedEntity = {id: '1', tripUpdate: this.tripUpdate};\n        const message: FeedMessage = {header: this.header, entity: [this.entity, this.entity]};\n    }\n}\n  \n\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/TripUpdatesListener.html":{"url":"injectables/TripUpdatesListener.html","title":"injectable - TripUpdatesListener","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  TripUpdatesListener\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/transit/listeners/trips.update.listener.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                bookingCreated\n                            \n                            \n                                    Public\n                                    Async\n                                bookingDeleted\n                            \n                            \n                                    Private\n                                    Async\n                                updateDb\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(io: TransitGateWay)\n                    \n                \n                        \n                            \n                                Defined in src/transit/listeners/trips.update.listener.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        io\n                                                  \n                                                        \n                                                                        TransitGateWay\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        bookingCreated\n                        \n                    \n                \n            \n            \n                \n                    \n                    bookingCreated(event: UpdateTrips)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @OnEvent('trips.update', {async: true})\n                \n            \n\n            \n                \n                    Defined in src/transit/listeners/trips.update.listener.ts:14\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    event\n                                    \n                                                UpdateTrips\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        bookingDeleted\n                        \n                    \n                \n            \n            \n                \n                    \n                    bookingDeleted(event: UpdateTrips)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @OnEvent('booking.deleted', {async: true})\n                \n            \n\n            \n                \n                    Defined in src/transit/listeners/trips.update.listener.ts:23\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    event\n                                    \n                                                UpdateTrips\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        Async\n                        updateDb\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateDb(event: UpdateTrips, booking: Booking)\n                \n            \n\n\n            \n                \n                    Defined in src/transit/listeners/trips.update.listener.ts:36\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    event\n                                    \n                                                UpdateTrips\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    booking\n                                    \n                                                Booking\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { OnEvent } from \"@nestjs/event-emitter\";\nimport { Trip } from \"../entities/trip.entity\";\nimport { Injectable } from \"@nestjs/common\";\nimport { UpdateTrips } from \"../events/trips.update.event\";\nimport { TransitGateWay } from \"src/socketsIO/transit.gateway\";\nimport { Booking } from \"src/user/entities/booking.entity\";\n\n@Injectable()\nexport class TripUpdatesListener{\n    \n    constructor(private io: TransitGateWay){}\n\n    @OnEvent('trips.update', {async: true})\n    public bookingCreated(event: UpdateTrips){\n        \n        for (const booking of event.getBookings) {\n            this.updateDb(event, booking);\n        }\n\n    }\n\n    @OnEvent('booking.deleted', {async: true})\n    public async bookingDeleted(event: UpdateTrips){\n\n        const booking: Booking = event.getBookings[0];\n        const trip: Trip[] = await event.repo.trips.get(+booking.trip_id);\n        const stops: string[] = trip.map(t => t.stopCode);\n        const s: number = stops.indexOf(booking.startStop);\n        const e: number = stops.indexOf(booking.endStop);\n        booking.stopCodes = stops.splice(s, e - 1);\n\n        this.updateDb(event, booking);\n        this.io.updateOccupancy(event.getValue, event.getBookings.map(b => b.trip_id));\n    }\n\n    private async updateDb(event: UpdateTrips, booking: Booking){\n        event.repo.trips.updateEmbarkation(booking.trip_id, booking.startStop, event.getValue);\n        event.repo.trips.updateDebarkation(booking.trip_id, booking.endStop, event.getValue);\n        await event.repo.trips.updateOccupation(booking.stopCodes, event.getValue, booking.trip_id);\n        this.io.updateOccupancy(event.getValue, event.getBookings.map(b => b.trip_id));\n    }\n\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateTrips.html":{"url":"classes/UpdateTrips.html","title":"class - UpdateTrips","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateTrips\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/transit/events/trips.update.event.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    getBookings\n                                \n                                \n                                    repo\n                                \n                                \n                                    getValue\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(bookings: Booking[], data: DataService, value: number)\n                    \n                \n                        \n                            \n                                Defined in src/transit/events/trips.update.event.ts:5\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        bookings\n                                                  \n                                                        \n                                                                        Booking[]\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        data\n                                                  \n                                                        \n                                                                        DataService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        value\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        getBookings\n                    \n                \n\n                \n                    \n                        getgetBookings()\n                    \n                \n                            \n                                \n                                    Defined in src/transit/events/trips.update.event.ts:13\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        repo\n                    \n                \n\n                \n                    \n                        getrepo()\n                    \n                \n                            \n                                \n                                    Defined in src/transit/events/trips.update.event.ts:17\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        getValue\n                    \n                \n\n                \n                    \n                        getgetValue()\n                    \n                \n                            \n                                \n                                    Defined in src/transit/events/trips.update.event.ts:21\n                                \n                            \n\n            \n        \n\n    \n\n\n    \n        import { TripRepository } from 'src/repositories/trip.repository';\nimport { DataService } from '../services/data.service';\nimport { Booking } from 'src/user/entities/booking.entity';\n\nexport class UpdateTrips{\n\n    constructor(\n        private bookings: Booking[], \n        private data: DataService, \n        private value: number\n    ){}\n\n    public get getBookings(): Booking[]{\n        return this.bookings;\n    }\n\n    public get repo(): DataService{\n        return this.data;\n    }\n\n    public get getValue(): number{\n        return this.value;\n    }\n\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/User.html":{"url":"entities/User.html","title":"entity - User","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  User\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/entities/user.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                email\n                            \n                            \n                                    Public\n                                name\n                            \n                            \n                                    Public\n                                password\n                            \n                            \n                                    Public\n                                user_id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Index({unique: true})@PrimaryColumn({nullable: false, type: 'varchar', unique: true})@IsNotEmpty()@MinLength(5)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user.entity.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@MinLength(2)@Column({nullable: false, type: 'varchar'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user.entity.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@MinLength(3)@Column({nullable: false, type: 'varchar'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user.entity.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        user_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Index()@PrimaryGeneratedColumn({type: 'bigint', name: 'user_id'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user.entity.ts:10\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        \nimport { IsNotEmpty, MinLength } from 'class-validator';\nimport { Column, Entity, PrimaryGeneratedColumn, OneToMany, PrimaryColumn, Index, ManyToMany, JoinTable} from 'typeorm';\n\n@Entity()\nexport class User {\n\n  @Index()\n  @PrimaryGeneratedColumn({type: 'bigint', name: 'user_id'})\n  public user_id: number;\n\n  @Index({unique: true})\n  @PrimaryColumn({nullable: false, type: 'varchar', unique: true})\n  @IsNotEmpty()\n  @MinLength(5)\n  public email: string;\n  \n  @IsNotEmpty()\n  @MinLength(3)\n  @Column({nullable: false, type: 'varchar'})\n  public password: string;\n\n  @IsNotEmpty()\n  @MinLength(2)\n  @Column({nullable: false, type: 'varchar'})\n  public name: string;\n\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UserController.html":{"url":"controllers/UserController.html","title":"controller - UserController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UserController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/controllers/user.controller.ts\n        \n\n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                createUser\n                            \n                            \n                                    Public\n                                getProfile\n                            \n                            \n                                    Public\n                                    Async\n                                login\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        createUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    createUser(data: User)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('register')@UsePipes(ValidationPipe)\n                \n            \n\n            \n                \n                    Defined in src/user/controllers/user.controller.ts:17\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        getProfile\n                        \n                    \n                \n            \n            \n                \n                    \n                    getProfile(req: any)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard)@Get('profile')\n                \n            \n\n            \n                \n                    Defined in src/user/controllers/user.controller.ts:40\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        login\n                        \n                    \n                \n            \n            \n                \n                    \n                    login(req: any)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(LocalAuthGuard)@Header('Content-Type', 'application/json')@Post('login')@UsePipes(ValidationPipe)\n                \n            \n\n            \n                \n                    Defined in src/user/controllers/user.controller.ts:34\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        \nimport {Body,Controller,Get,Post,UseGuards,UsePipes,ValidationPipe,Request,Header} from '@nestjs/common';\nimport { AuthService } from 'src/auth/auth.service';\nimport { JwtAuthGuard } from 'src/auth/jwt-auth.guard';\nimport { LocalAuthGuard } from 'src/auth/local-auth.guard';\nimport { User } from '../entities/user.entity';\nimport { UserService } from '../services/user.service';\n\n    \n@Controller()\nexport class UserController {\n\n    constructor(private auth: AuthService) {}\n      \n    @Post('register')\n    @UsePipes(ValidationPipe)\n    public async createUser(@Body() data: User): Promise {\n\n        const user: User | void = await this.auth.findUserByEmail(data.email);\n\n        if(user){\n            this.auth.throwError('email exists');\n        }else{\n            this.auth.createUser(data);\n            return this.auth.login(data);\n        }\n\n    }\n\n    @UseGuards(LocalAuthGuard)\n    @Header('Content-Type', 'application/json')\n    @Post('login')\n    @UsePipes(ValidationPipe)\n    public async login(@Request() req: any): Promise {\n        return this.auth.login(req.user);\n    }\n\n    @UseGuards(JwtAuthGuard)\n    @Get('profile')\n    public getProfile(@Request() req: any): Promise {\n        return req.user;\n    }\n    \n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UserModule.html":{"url":"modules/UserModule.html","title":"module - UserModule","body":"\n                   \n\n\n\n\n    Modules\n    UserModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_UserModule\n\n\n\ncluster_UserModule_providers\n\n\n\ncluster_UserModule_imports\n\n\n\ncluster_UserModule_exports\n\n\n\n\nTransitModule\n\nTransitModule\n\n\n\nUserModule\n\nUserModule\n\nUserModule -->\n\nTransitModule->UserModule\n\n\n\n\n\nUserService \n\nUserService \n\nUserService  -->\n\nUserModule->UserService \n\n\n\n\n\nBookingRepository\n\nBookingRepository\n\nUserModule -->\n\nBookingRepository->UserModule\n\n\n\n\n\nBookingService\n\nBookingService\n\nUserModule -->\n\nBookingService->UserModule\n\n\n\n\n\nSavedService\n\nSavedService\n\nUserModule -->\n\nSavedService->UserModule\n\n\n\n\n\nUserRepository\n\nUserRepository\n\nUserModule -->\n\nUserRepository->UserModule\n\n\n\n\n\nUserService\n\nUserService\n\nUserModule -->\n\nUserService->UserModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/user/user.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            BookingRepository\n                        \n                        \n                            BookingService\n                        \n                        \n                            SavedService\n                        \n                        \n                            UserRepository\n                        \n                        \n                            UserService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            BookingsController\n                        \n                        \n                            SavedController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            TransitModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            UserService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { User } from './entities/user.entity';\nimport { UserService } from './services/user.service';\nimport { UserRepository } from 'src/repositories/user.repository';\nimport { BookingsController } from './controllers/bookings.controller';\nimport { TransitModule } from 'src/transit/transit.module';\nimport { TransitGateWay } from 'src/socketsIO/transit.gateway';\nimport { UserStop } from './entities/userStop.entity';\nimport { SavedService } from './services/saved.service';\nimport { SavedController } from './controllers/saved.controller';\nimport { UserRoute } from './entities/userRoute.entity';\nimport { BookingService } from './services/booking.service';\nimport { BookingRepository } from 'src/repositories/booking.repository';\nimport { Booking } from './entities/booking.entity';\n\n\n@Module({\n    imports: [TypeOrmModule.forFeature([User, UserRoute, UserStop, Booking]), TransitModule],\n    providers: [UserService, UserRepository, SavedService, BookingService, BookingRepository],\n    controllers: [BookingsController, SavedController],\n    exports: [UserService]\n})\nexport class UserModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UserRepository.html":{"url":"injectables/UserRepository.html","title":"injectable - UserRepository","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UserRepository\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/repositories/user.repository.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        IGenericRepository\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                deleteRoute\n                            \n                            \n                                    Public\n                                deleteStop\n                            \n                            \n                                    Public\n                                    Async\n                                getAllRoutes\n                            \n                            \n                                    Public\n                                    Async\n                                getAllStops\n                            \n                            \n                                    Public\n                                    \n                                getOne\n                            \n                            \n                                    Public\n                                    Async\n                                getStopCode\n                            \n                            \n                                    Public\n                                    \n                                insertOne\n                            \n                            \n                                    Public\n                                insertRoute\n                            \n                            \n                                    Public\n                                insertStop\n                            \n                            \n                                    Protected\n                                deleteOne\n                            \n                            \n                                    Protected\n                                    Async\n                                get\n                            \n                            \n                                    Protected\n                                    Async\n                                getAll\n                            \n                            \n                                    Protected\n                                    Async\n                                insert\n                            \n                            \n                                    Protected\n                                updateOne\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userRepo: Repository, db: DataSource)\n                    \n                \n                        \n                            \n                                Defined in src/repositories/user.repository.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userRepo\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        db\n                                                  \n                                                        \n                                                                    DataSource\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        deleteRoute\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteRoute(route_code: string, user_id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/repositories/user.repository.ts:57\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    route_code\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user_id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        deleteStop\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteStop(code: string, user_id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/repositories/user.repository.ts:48\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    code\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user_id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        getAllRoutes\n                        \n                    \n                \n            \n            \n                \n                    \n                    getAllRoutes(user_id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/repositories/user.repository.ts:76\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user_id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        getAllStops\n                        \n                    \n                \n            \n            \n                \n                    \n                    getAllStops(user_id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/repositories/user.repository.ts:66\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user_id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        \n                        getOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    getOne(email: string)\n                \n            \n\n\n            \n                \n                    Inherited from         IGenericRepository\n\n                \n            \n            \n                \n                        Defined in         IGenericRepository:19\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        getStopCode\n                        \n                    \n                \n            \n            \n                \n                    \n                    getStopCode(code: string, user_id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/repositories/user.repository.ts:33\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    code\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user_id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        \n                        insertOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    insertOne(data: User)\n                \n            \n\n\n            \n                \n                    Inherited from         IGenericRepository\n\n                \n            \n            \n                \n                        Defined in         IGenericRepository:23\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        insertRoute\n                        \n                    \n                \n            \n            \n                \n                    \n                    insertRoute(route_code: string, user_id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/repositories/user.repository.ts:42\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    route_code\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user_id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        insertStop\n                        \n                    \n                \n            \n            \n                \n                    \n                    insertStop(code: string, user_id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/repositories/user.repository.ts:27\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    code\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user_id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Protected\n                        deleteOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteOne(spec: any)\n                \n            \n\n\n            \n                \n                    Inherited from         IGenericRepository\n\n                \n            \n            \n                \n                        Defined in         IGenericRepository:49\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    spec\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Protected\n                        Async\n                        get\n                        \n                    \n                \n            \n            \n                \n                    \n                    get(spec: any)\n                \n            \n\n\n            \n                \n                    Inherited from         IGenericRepository\n\n                \n            \n            \n                \n                        Defined in         IGenericRepository:19\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    spec\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Protected\n                        Async\n                        getAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    getAll()\n                \n            \n\n\n            \n                \n                    Inherited from         IGenericRepository\n\n                \n            \n            \n                \n                        Defined in         IGenericRepository:11\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Protected\n                        Async\n                        insert\n                        \n                    \n                \n            \n            \n                \n                    \n                    insert(data: T[])\n                \n            \n\n\n            \n                \n                    Inherited from         IGenericRepository\n\n                \n            \n            \n                \n                        Defined in         IGenericRepository:28\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                            T[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Protected\n                        updateOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateOne(spec: any, update: any)\n                \n            \n\n\n            \n                \n                    Inherited from         IGenericRepository\n\n                \n            \n            \n                \n                        Defined in         IGenericRepository:58\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    spec\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    update\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from \"@nestjs/common\";\nimport { InjectDataSource, InjectRepository } from \"@nestjs/typeorm\";\nimport { User } from \"src/user/entities/user.entity\";\nimport { DataSource, Repository } from \"typeorm\";\nimport { IGenericRepository } from \"./generic.repository\";\nimport { UserStop } from \"src/user/entities/userStop.entity\";\nimport { UserRoute } from \"src/user/entities/userRoute.entity\";\n\n@Injectable()\nexport class UserRepository extends IGenericRepository{\n\n    constructor(\n        @InjectRepository(User) userRepo: Repository, \n        @InjectDataSource() db: DataSource)    \n    {\n        super(userRepo, db);\n    }\n\n    public override getOne(email: string): Promise {\n        return super.getOne({email: email});\n    }\n\n    public override insertOne(data: User) {\n        super.insertOne(data);\n    }\n\n    public insertStop(code: string, user_id: string){\n        this.db.getRepository(UserStop)\n            .insert({user_id: user_id, stop_code: code})\n            .catch(e => console.log(e));\n    }\n\n    public async getStopCode(code: string, user_id: string): Promise{\n        return this.db.getRepository(UserStop)\n            .createQueryBuilder()\n            .select(['stop_code'])\n            .where({user_id: user_id, stop_code: code})\n            .execute()\n            .catch(e => console.log(e));\n    }\n\n    public insertRoute(route_code: string, user_id: string){\n        this.db.getRepository(UserRoute)\n            .insert({user_id: user_id, route_code: route_code})\n            .catch(e => console.log(e));\n    }\n\n    public deleteStop(code: string, user_id: string){\n        this.db.getRepository(UserStop)\n            .createQueryBuilder()\n            .delete()\n            .where({user_id: user_id, stop_code: code})\n            .execute()\n            .catch(e => console.log(e));\n    }\n\n    public deleteRoute(route_code: string, user_id: string){\n        this.db.getRepository(UserRoute)\n            .createQueryBuilder()\n            .delete()\n            .where({user_id: user_id, route_code: route_code})\n            .execute()\n            .catch(e => console.log(e));\n    }\n\n    public async getAllStops(user_id: string): Promise{\n        return (await this.db.getRepository(UserStop)\n            .createQueryBuilder()\n            .select(['stop_code'])\n            .where({user_id: user_id})\n            .execute()\n            .catch(e => console.log(e)))\n            .map(s => s.stop_code);\n    }\n\n    public async getAllRoutes(user_id: string): Promise{\n        return (await this.db.getRepository(UserRoute)\n            .createQueryBuilder()\n            .select(['route_code'])\n            .where({user_id: user_id})\n            .execute()\n            .catch(e => console.log(e)))\n            .map(r => r.route_code);\n    }\n\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/UserRoute.html":{"url":"entities/UserRoute.html","title":"entity - UserRoute","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  UserRoute\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/entities/userRoute.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                id\n                            \n                            \n                                    Public\n                                route_code\n                            \n                            \n                                    Public\n                                user_id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn({type: 'bigint'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/userRoute.entity.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        route_code\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Index({unique: false})@Column({type: 'varchar'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/userRoute.entity.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        user_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Index({unique: false})@Column({type: 'varchar'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/userRoute.entity.ts:11\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Column, Entity, Index, PrimaryGeneratedColumn} from 'typeorm';\n\n@Entity()\nexport class UserRoute{\n\n    @PrimaryGeneratedColumn({type: 'bigint'})\n    public id: number;\n\n    @Index({unique: false})\n    @Column({type: 'varchar'})\n    public user_id: string;\n\n    @Index({unique: false})\n    @Column({type: 'varchar'})\n    public route_code: string;\n\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UserService.html":{"url":"injectables/UserService.html","title":"injectable - UserService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UserService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/services/user.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                createUser\n                            \n                            \n                                    Public\n                                findUserByEmail\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(repo: UserRepository)\n                    \n                \n                        \n                            \n                                Defined in src/user/services/user.service.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        repo\n                                                  \n                                                        \n                                                                        UserRepository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        createUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    createUser(user: User)\n                \n            \n\n\n            \n                \n                    Defined in src/user/services/user.service.ts:11\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        findUserByEmail\n                        \n                    \n                \n            \n            \n                \n                    \n                    findUserByEmail(email: string)\n                \n            \n\n\n            \n                \n                    Defined in src/user/services/user.service.ts:15\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { UserRepository } from 'src/repositories/user.repository';\nimport { User } from '../entities/user.entity';\nimport { UserStop } from '../entities/userStop.entity';\n\n@Injectable()\nexport class UserService {\n\n    constructor(private repo: UserRepository) {}\n\n    public createUser(user: User) {\n        this.repo.insertOne(user);\n    }\n         \n    public findUserByEmail(email: string): Promise {\n        return this.repo.getOne(email);\n    }\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/UserStop.html":{"url":"entities/UserStop.html","title":"entity - UserStop","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  UserStop\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/entities/userStop.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                id\n                            \n                            \n                                    Public\n                                stop_code\n                            \n                            \n                                    Public\n                                user_id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn({type: 'bigint'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/userStop.entity.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        stop_code\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Index({unique: false})@PrimaryColumn({type: 'varchar'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/userStop.entity.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        user_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Index({unique: false})@PrimaryColumn({type: 'varchar'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/userStop.entity.ts:12\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        \nimport { Column, Entity, Index, PrimaryColumn, PrimaryGeneratedColumn} from 'typeorm';\n\n@Entity()\nexport class UserStop{\n\n    @PrimaryGeneratedColumn({type: 'bigint'})\n    public id: number;\n\n    @Index({unique: false})\n    @PrimaryColumn({type: 'varchar'})\n    public user_id: string;\n\n    @Index({unique: false})\n    @PrimaryColumn({type: 'varchar'})\n    public stop_code: string;\n\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/VehicleDescriptor.html":{"url":"interfaces/VehicleDescriptor.html","title":"interface - VehicleDescriptor","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  VehicleDescriptor\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/transit/proto/position.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            id\n                                        \n                                \n                                \n                                        \n                                            label\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        id:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        label\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        label:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface FeedHeader{\n    gtfsRealtimeVersion: string;\n    incrimentality: number;\n    timestamp: number;\n}\n\nexport interface TripDescriptor{\n    tripId: string;\n    startDate: string;\n    routeId: string;\n    directionId: number;\n}\n\nexport interface Position{\n    latitude: number;\n    longitude: number;\n}\n\nexport interface Long{\n    low: number;\n    high: number;\n    unsigned: boolean;\n}  \n\nexport interface VehicleDescriptor{\n    id: string;\n    label: string;\n}\n\nexport interface VehiclePosition{\n    currentStopSequence: number;\n    stopId: string;\n    occupancyStatus: number;\n    trip: TripDescriptor;\n    position: Position;\n    timestamp: Long;\n    vehicle: VehicleDescriptor;\n}\n\nexport interface FeedEntity{\n    id: string;\n    vehicle: VehiclePosition;\n}\n\nexport interface FeedMessage{\n    header: FeedHeader;\n    entity: FeedEntity[];\n}\n\nexport class PositionProto{\n\n    constructor(){}\n\n    public async createProto(data: FeedMessage){\n        \n    }\n\n\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/VehiclePosition.html":{"url":"interfaces/VehiclePosition.html","title":"interface - VehiclePosition","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  VehiclePosition\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/transit/proto/position.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            currentStopSequence\n                                        \n                                \n                                \n                                        \n                                            occupancyStatus\n                                        \n                                \n                                \n                                        \n                                            position\n                                        \n                                \n                                \n                                        \n                                            stopId\n                                        \n                                \n                                \n                                        \n                                            timestamp\n                                        \n                                \n                                \n                                        \n                                            trip\n                                        \n                                \n                                \n                                        \n                                            vehicle\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        currentStopSequence\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        currentStopSequence:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        occupancyStatus\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        occupancyStatus:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        position\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        position:         Position\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Position\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        stopId\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        stopId:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        timestamp\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        timestamp:         Long\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Long\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        trip\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        trip:         TripDescriptor\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         TripDescriptor\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        vehicle\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        vehicle:         VehicleDescriptor\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         VehicleDescriptor\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface FeedHeader{\n    gtfsRealtimeVersion: string;\n    incrimentality: number;\n    timestamp: number;\n}\n\nexport interface TripDescriptor{\n    tripId: string;\n    startDate: string;\n    routeId: string;\n    directionId: number;\n}\n\nexport interface Position{\n    latitude: number;\n    longitude: number;\n}\n\nexport interface Long{\n    low: number;\n    high: number;\n    unsigned: boolean;\n}  \n\nexport interface VehicleDescriptor{\n    id: string;\n    label: string;\n}\n\nexport interface VehiclePosition{\n    currentStopSequence: number;\n    stopId: string;\n    occupancyStatus: number;\n    trip: TripDescriptor;\n    position: Position;\n    timestamp: Long;\n    vehicle: VehicleDescriptor;\n}\n\nexport interface FeedEntity{\n    id: string;\n    vehicle: VehiclePosition;\n}\n\nexport interface FeedMessage{\n    header: FeedHeader;\n    entity: FeedEntity[];\n}\n\nexport class PositionProto{\n\n    constructor(){}\n\n    public async createProto(data: FeedMessage){\n        \n    }\n\n\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Vertex.html":{"url":"classes/Vertex.html","title":"class - Vertex","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Vertex\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/transit/transitDtos/itinerary.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                arrival\n                            \n                            \n                                    Public\n                                departure\n                            \n                            \n                                    Public\n                                lat\n                            \n                            \n                                    Public\n                                lon\n                            \n                            \n                                    Public\n                                name\n                            \n                            \n                                    Public\n                                    Optional\n                                stopCode\n                            \n                            \n                                    Public\n                                    Optional\n                                stopId\n                            \n                            \n                                    Public\n                                stopIndex\n                            \n                            \n                                    Public\n                                stopSequence\n                            \n                            \n                                    Public\n                                vertexType\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                edit\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(v: Vertex)\n                    \n                \n                        \n                            \n                                Defined in src/transit/transitDtos/itinerary.dto.ts:36\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        v\n                                                  \n                                                        \n                                                                        Vertex\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        arrival\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/transit/transitDtos/itinerary.dto.ts:32\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        departure\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/transit/transitDtos/itinerary.dto.ts:31\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        lat\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/transit/transitDtos/itinerary.dto.ts:29\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        lon\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/transit/transitDtos/itinerary.dto.ts:28\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/transit/transitDtos/itinerary.dto.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        stopCode\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/transit/transitDtos/itinerary.dto.ts:33\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        stopId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/transit/transitDtos/itinerary.dto.ts:34\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        stopIndex\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/transit/transitDtos/itinerary.dto.ts:35\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        stopSequence\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/transit/transitDtos/itinerary.dto.ts:36\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        vertexType\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/transit/transitDtos/itinerary.dto.ts:30\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        edit\n                        \n                    \n                \n            \n            \n                \n                    \n                    edit(time: number)\n                \n            \n\n\n            \n                \n                    Defined in src/transit/transitDtos/itinerary.dto.ts:51\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    time\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        var polyline = require( 'google-polyline' );\n\nexport class Step{\n\n    public distance: number;\n    public relativeDirection: string;\n    public streetName: string;\n    public absoluteDirection: string;\n    public exit: string;\n    public lon: number;\n    public lat: number;\n\n    constructor(step: Step){\n        this.distance = Math.floor(step.distance);\n        this.relativeDirection = step.relativeDirection;\n        this.streetName = step.streetName;\n        this.absoluteDirection = step.absoluteDirection;\n        this.exit = step.exit;\n        this.lon = step.lon;\n        this.lat = step.lat;\n    }\n\n}\n\nexport class Vertex{\n\n    public name: string;\n    public lon: string;\n    public lat: string;\n    public vertexType: string;\n    public departure: string;\n    public arrival: string;\n    public stopCode?: string;\n    public stopId?: string;\n    public stopIndex: number;\n    public stopSequence: number;\n\n    constructor(v: Vertex){\n        this.name = v.name;\n        this.lon = v.lon;\n        this.lat = v.lat;\n        this.vertexType = v.vertexType;\n        this.stopCode = v.stopCode;\n        this.stopId = v.stopCode;\n        this.stopIndex = v.stopIndex;\n        this.stopSequence = v.stopSequence;\n        this.arrival = this.edit(+v.arrival);\n        this.departure = this.edit(+v.departure);\n    }\n\n    private edit(time: number): string{\n        const date = new Date(time).toLocaleTimeString().split(\":\");\n        return date[0] + ':' + date[1];\n    }\n\n}\n\nexport class Leg{\n\n    public points: string[];\n    public duration: number;\n    public transitTime: number;\n    public mode: string;\n    public steps: Step[];\n    public routeId: string | undefined;\n    public tripId: string | undefined;\n    public serviceDate: string;\n    public agencyName: string;\n    public agencyTimeZoneOffset: number;\n    public startTime: string;\n    public endTime: string;\n    public distance: number;\n    public departureDelay: number;\n    public arrivalDelay: number;\n    public routeShortName: string;\n    public from: Vertex;\n    public to: Vertex;\n    public intermediateStops: Vertex[] = [];\n    public legGeometry: any;\n    public flex: number;\n    public occupancyStatus: number;\n\n    constructor(leg: Leg, steps: Step[], from: Vertex, to: Vertex, stops: Vertex[], points: string){\n        this.points = polyline.decode(points);\n        this.duration = Math.floor(leg.duration/60);\n        this.transitTime = Math.floor(leg.transitTime/60);\n        this.mode = leg.mode;\n        this.routeId = this.setRoute(leg.routeId);\n        this.tripId = this.setTrip(leg.tripId);\n        this.serviceDate = leg.serviceDate;\n        this.agencyName = leg.agencyName;\n        this.agencyTimeZoneOffset = leg.agencyTimeZoneOffset;\n        this.startTime = this.edit(+leg.startTime);\n        this.endTime = this.edit(+leg.endTime);\n        this.distance = Math.floor(leg.distance);\n        this.arrivalDelay = Math.floor(leg.arrivalDelay/60);\n        this.routeShortName = leg.routeShortName;\n        this.steps = steps;\n        this.from = from;\n        this.to = to;\n        this.departureDelay = Math.floor(leg.departureDelay/60);\n        this.intermediateStops = stops;\n    }\n\n    public setRoute(route: string){\n        if(route){\n            return route.split(\":\")[1];\n        }else{\n            return undefined;\n        }\n    }\n\n    public setTrip(trip_id: string | undefined){\n        if(trip_id){\n            return trip_id.split(\":\")[1];\n        }else{\n            return undefined;\n        }\n    }\n\n    private edit(time: number): string{\n        const date = new Date(time).toLocaleTimeString().split(\":\");\n        return date[0] + ':' + date[1];\n    }\n\n    public setFlexGrow(totalDuration: number){\n        this.flex = Math.floor(this.duration/totalDuration * 10);\n    }\n\n}\n\nexport class Itinerary{\n\n    public duration: number;\n    public startTime: string;\n    public endTime: string;\n    public walkTime: number;\n    public transitTime: number;\n    public waitingTime: number;\n    public walkDistance: number;\n    public arrivalDelay: number;\n    public departureDelay: number;\n    public serviceDate: string;\n    public legs: Leg[];\n\n    constructor(it: Itinerary, legs: Leg[]){\n        this.duration = Math.floor(it.duration/60);\n        this.transitTime = Math.floor(it.transitTime/60);\n        this.waitingTime = Math.floor(it.waitingTime/60);\n        this.walkDistance = Math.floor(it.walkDistance);\n        this.legs = legs;\n        this.startTime = this.edit(+it.startTime);\n        this.endTime = this.edit(+it.endTime);\n        this.walkTime = Math.floor(it.walkTime/60);\n        this.arrivalDelay = it.arrivalDelay;\n        this.departureDelay = it.departureDelay;\n        this.serviceDate = it.serviceDate;\n    }\n\n    private edit(time: number): string{\n        const date = new Date(time).toLocaleTimeString().split(\":\");\n        return date[0] + ':' + date[1];\n    }\n}\n\nexport class Plan{\n\n    public date: string;\n    public from: Vertex;\n    public to: Vertex;\n    public arriveBy: string;\n    public itineraries: Itinerary[];\n    public slug: string;\n    public occupancy: any;\n\n    constructor(plan: Plan, it: Itinerary[], slug: string){\n        this.date = new Date(plan.date).toLocaleString();\n        this.from = new Vertex(plan.from);\n        this.to = new Vertex(plan.to);\n        this.itineraries = it;\n        this.slug = slug;\n    }\n\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/app.controller.ts\n            \n            controller\n            AppController\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/auth/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/auth/jwt-auth.guard.ts\n            \n            injectable\n            JwtAuthGuard\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/jwt.strategy.ts\n            \n            injectable\n            JwtStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/local-auth.guard.ts\n            \n            class\n            LocalAuthGuard\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/local.strategy.ts\n            \n            injectable\n            LocalStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/configurations/config.ts\n            \n            variable\n            DBconnectionProperties\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/configurations/config.ts\n            \n            variable\n            jwtConstants\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            test\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            variable\n            fs\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            variable\n            GtfsRealtimeBindings\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            variable\n            protobuf\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            variable\n            request\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            variable\n            requestSettings\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/repositories/booking.repository.ts\n            \n            injectable\n            BookingRepository\n            \n                0 %\n                (0/11)\n            \n        \n        \n            \n                \n                src/repositories/generic.repository.ts\n            \n            class\n            IGenericRepository\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                src/repositories/line.repository.ts\n            \n            injectable\n            LineRepository\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                src/repositories/liveData.repository.ts\n            \n            injectable\n            LiveDataRepository\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                src/repositories/point.repository.ts\n            \n            class\n            PointRepository\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                src/repositories/route.repository.ts\n            \n            class\n            RouteRepository\n            \n                0 %\n                (0/14)\n            \n        \n        \n            \n                \n                src/repositories/routeStop.repository.ts\n            \n            class\n            RouteStopRepository\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                src/repositories/schedule.repository.ts\n            \n            class\n            ScheduleRepository\n            \n                0 %\n                (0/13)\n            \n        \n        \n            \n                \n                src/repositories/stop.repository.ts\n            \n            class\n            StopRepository\n            \n                0 %\n                (0/13)\n            \n        \n        \n            \n                \n                src/repositories/trip.repository.ts\n            \n            injectable\n            TripRepository\n            \n                0 %\n                (0/15)\n            \n        \n        \n            \n                \n                src/repositories/user.repository.ts\n            \n            injectable\n            UserRepository\n            \n                0 %\n                (0/16)\n            \n        \n        \n            \n                \n                src/socketsIO/transit.gateway.ts\n            \n            class\n            TransitGateWay\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/transit/Navigator/Strategies/otp.strategy.ts\n            \n            class\n            OTPStrategy\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/transit/Navigator/Strategies/transitBusStrategy.ts\n            \n            class\n            SingleRouteStrategy\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/transit/Navigator/context.ts\n            \n            class\n            Context\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/transit/Navigator/navigatorStrategy.ts\n            \n            interface\n            NavigatorStrategy\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/transit/controllers/db.update.controller.ts\n            \n            controller\n            DBupdateController\n            \n                0 %\n                (0/12)\n            \n        \n        \n            \n                \n                src/transit/controllers/db.update.controller.ts\n            \n            variable\n            greekUtils\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/transit/controllers/live.updates.controller.ts\n            \n            controller\n            LiveUpdatesController\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/transit/controllers/live.updates.controller.ts\n            \n            variable\n            protobuf\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/transit/controllers/transit.controller.ts\n            \n            controller\n            TransitController\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/transit/entities/line.entity.ts\n            \n            entity\n            Line\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/transit/entities/live.data.ts\n            \n            entity\n            LiveData\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/transit/entities/newSchedule.entity.ts\n            \n            entity\n            NewSchedule\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/transit/entities/point.entity.ts\n            \n            entity\n            Point\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/transit/entities/route.entity.ts\n            \n            entity\n            Route\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/transit/entities/routeStops.entity.ts\n            \n            entity\n            RouteStop\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/transit/entities/schedule.entity.ts\n            \n            entity\n            Schedule\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/transit/entities/stop.entity.ts\n            \n            entity\n            Stop\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/transit/entities/trip.entity.ts\n            \n            entity\n            Trip\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/transit/entities/trip.entity.ts\n            \n            class\n            Trip\n            \n                0 %\n                (0/10)\n            \n        \n        \n            \n                \n                src/transit/events/trips.update.event.ts\n            \n            class\n            UpdateTrips\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/transit/listeners/trips.update.listener.ts\n            \n            injectable\n            TripUpdatesListener\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/transit/proto/position.ts\n            \n            class\n            PositionProto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/transit/proto/position.ts\n            \n            interface\n            FeedEntity\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/transit/proto/position.ts\n            \n            interface\n            FeedHeader\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/transit/proto/position.ts\n            \n            interface\n            FeedMessage\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/transit/proto/position.ts\n            \n            interface\n            Long\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/transit/proto/position.ts\n            \n            interface\n            Position\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/transit/proto/position.ts\n            \n            interface\n            TripDescriptor\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/transit/proto/position.ts\n            \n            interface\n            VehicleDescriptor\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/transit/proto/position.ts\n            \n            interface\n            VehiclePosition\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/transit/proto/trips.ts\n            \n            class\n            Trip\n            \n                0 %\n                (0/15)\n            \n        \n        \n            \n                \n                src/transit/proto/trips.ts\n            \n            interface\n            FeedEntity\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/transit/proto/trips.ts\n            \n            interface\n            FeedHeader\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/transit/proto/trips.ts\n            \n            interface\n            FeedMessage\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/transit/proto/trips.ts\n            \n            interface\n            StopTimeEvent\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/transit/proto/trips.ts\n            \n            interface\n            StopTimeUpdate\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/transit/proto/trips.ts\n            \n            interface\n            TripDescriptor\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/transit/proto/trips.ts\n            \n            interface\n            TripUpdate\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/transit/services/data.service.ts\n            \n            injectable\n            DataService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/transit/services/db.update.service.ts\n            \n            injectable\n            DBUpdateService\n            \n                0 %\n                (0/10)\n            \n        \n        \n            \n                \n                src/transit/services/line.service.ts\n            \n            injectable\n            LineService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/transit/services/live.updates.service.ts\n            \n            injectable\n            LiveUpdatesService\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/transit/services/newSchedule.service.ts\n            \n            class\n            NewScheduleService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/transit/services/otp.service.ts\n            \n            injectable\n            OTPService\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/transit/services/points.service.ts\n            \n            injectable\n            PointService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/transit/services/routeStop.service.ts\n            \n            injectable\n            RouteStopService\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/transit/services/routes.service.ts\n            \n            injectable\n            RouteService\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                src/transit/services/schedule.service.ts\n            \n            injectable\n            ScheduleService\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                src/transit/services/stop.service.ts\n            \n            injectable\n            StopService\n            \n                0 %\n                (0/10)\n            \n        \n        \n            \n                \n                src/transit/services/trip.service.ts\n            \n            injectable\n            TripService\n            \n                0 %\n                (0/10)\n            \n        \n        \n            \n                \n                src/transit/transitDtos/arrival.dto.ts\n            \n            class\n            ArrivalDto\n            \n                0 %\n                (0/13)\n            \n        \n        \n            \n                \n                src/transit/transitDtos/itinerary.dto.ts\n            \n            class\n            Itinerary\n            \n                0 %\n                (0/14)\n            \n        \n        \n            \n                \n                src/transit/transitDtos/itinerary.dto.ts\n            \n            class\n            Leg\n            \n                0 %\n                (0/28)\n            \n        \n        \n            \n                \n                src/transit/transitDtos/itinerary.dto.ts\n            \n            class\n            Plan\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                src/transit/transitDtos/itinerary.dto.ts\n            \n            class\n            Step\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                src/transit/transitDtos/itinerary.dto.ts\n            \n            class\n            Vertex\n            \n                0 %\n                (0/13)\n            \n        \n        \n            \n                \n                src/transit/transitDtos/itinerary.dto.ts\n            \n            variable\n            polyline\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/transit/transitDtos/line.dto.ts\n            \n            class\n            LineDto\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/transit/transitDtos/point.dto.ts\n            \n            class\n            PointDto\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/transit/transitDtos/route.dto.ts\n            \n            class\n            RouteDto\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/transit/transitDtos/route.dto.ts\n            \n            class\n            RouteInfoDto\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/transit/transitDtos/schedule.details.ts\n            \n            class\n            ScheduleDetailsDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/transit/transitDtos/schedule.dto.ts\n            \n            class\n            ScheduleDto\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/transit/transitDtos/scheduleDays.dto.ts\n            \n            class\n            ScheduleDayDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/transit/transitDtos/stop.dto.ts\n            \n            class\n            StopDto\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/transit/transitDtos/trip.state.ts\n            \n            class\n            OTPParams\n            \n                0 %\n                (0/17)\n            \n        \n        \n            \n                \n                src/transit/transitDtos/trip.state.ts\n            \n            interface\n            TripState\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/user/controllers/bookings.controller.ts\n            \n            controller\n            BookingsController\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/user/controllers/saved.controller.ts\n            \n            controller\n            SavedController\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/user/controllers/user.controller.ts\n            \n            controller\n            UserController\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/user/dto/user.dto.ts\n            \n            class\n            CreateUserDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/user/entities/booking.entity.ts\n            \n            entity\n            Booking\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/user/entities/user.entity.ts\n            \n            entity\n            User\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/user/entities/userRoute.entity.ts\n            \n            entity\n            UserRoute\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/user/entities/userStop.entity.ts\n            \n            entity\n            UserStop\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/user/services/booking.service.ts\n            \n            injectable\n            BookingService\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/user/services/saved.service.ts\n            \n            injectable\n            SavedService\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                src/user/services/user.service.ts\n            \n            injectable\n            UserService\n            \n                0 %\n                (0/4)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @nestjs/axios : ^0.1.0\n        \n            @nestjs/common : ^9.2.1\n        \n            @nestjs/config : ^2.2.0\n        \n            @nestjs/core : ^9.2.1\n        \n            @nestjs/event-emitter : ^1.3.1\n        \n            @nestjs/jwt : ^9.0.0\n        \n            @nestjs/passport : ^9.0.0\n        \n            @nestjs/platform-express : ^9.0.0\n        \n            @nestjs/platform-socket.io : ^9.0.11\n        \n            @nestjs/schedule : ^2.1.0\n        \n            @nestjs/typeorm : ^9.0.1\n        \n            @nestjs/websockets : ^9.0.11\n        \n            @types/google-protobuf : ^3.15.6\n        \n            class-transformer : ^0.5.1\n        \n            class-validator : ^0.13.2\n        \n            google-polyline : ^1.0.3\n        \n            google-protobuf : ^3.21.2\n        \n            gtfs-realtime-bindings : ^0.0.6\n        \n            nestjs-spelunker : ^1.1.3\n        \n            passport : ^0.6.0\n        \n            passport-jwt : ^4.0.0\n        \n            passport-local : ^1.0.0\n        \n            pg : ^8.8.0\n        \n            protobufjs : ^7.1.2\n        \n            protocol-buffers : ^5.0.0\n        \n            reflect-metadata : ^0.1.13\n        \n            request : ^2.88.2\n        \n            rimraf : ^3.0.2\n        \n            rxjs : ^7.2.0\n        \n            socket.io : ^4.5.1\n        \n            typeorm : ^0.3.11\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                        \n                            test   (src/.../main.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        test\n                        \n                    \n                \n            \n            \n                \ntest()\n                \n            \n\n\n\n\n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\n  \n\n\n  A progressive Node.js framework for building efficient and scalable server-side applications.\n    \n\n\n\n\n\n\n\n\n  \n    \n  \n\n  \n\nDescription\nNest framework TypeScript starter repository.\nInstallation\n$ npm installRunning the app\n# development\n$ npm run start\n\n# watch mode\n$ npm run start:dev\n\n# production mode\n$ npm run start:prodTest\n# unit tests\n$ npm run test\n\n# e2e tests\n$ npm run test:e2e\n\n# test coverage\n$ npm run test:covSupport\nNest is an MIT-licensed open source project. It can grow thanks to the sponsors and support by the amazing backers. If you'd like to join them, please read more here.\nStay in touch\n\nAuthor - Kamil Myśliwiec\nWebsite - https://nestjs.com\nTwitter - @nestframework\n\nLicense\nNest is MIT licensed.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        TransitModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UserModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_TransitModule\n\n\n\ncluster_TransitModule_exports\n\n\n\ncluster_TransitModule_providers\n\n\n\ncluster_UserModule\n\n\n\ncluster_UserModule_exports\n\n\n\ncluster_UserModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nAuthService \n\nAuthService \n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\n\n\nTransitModule\n\nTransitModule\n\n\n\nUserModule\n\nUserModule\n\nUserModule -->\n\nTransitModule->UserModule\n\n\n\nAppModule -->\n\nTransitModule->AppModule\n\n\n\n\n\nDataService \n\nDataService \n\nDataService  -->\n\nTransitModule->DataService \n\n\n\nAuthModule -->\n\nUserModule->AuthModule\n\n\n\nAppModule -->\n\nUserModule->AppModule\n\n\n\n\n\nUserService \n\nUserService \n\nUserService  -->\n\nUserModule->UserService \n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\nLocalStrategy\n\nLocalStrategy\n\nAuthModule -->\n\nLocalStrategy->AuthModule\n\n\n\n\n\nDBUpdateService\n\nDBUpdateService\n\nTransitModule -->\n\nDBUpdateService->TransitModule\n\n\n\n\n\nDataService\n\nDataService\n\nTransitModule -->\n\nDataService->TransitModule\n\n\n\n\n\nLineRepository\n\nLineRepository\n\nTransitModule -->\n\nLineRepository->TransitModule\n\n\n\n\n\nLineService\n\nLineService\n\nTransitModule -->\n\nLineService->TransitModule\n\n\n\n\n\nLiveDataRepository\n\nLiveDataRepository\n\nTransitModule -->\n\nLiveDataRepository->TransitModule\n\n\n\n\n\nLiveUpdatesService\n\nLiveUpdatesService\n\nTransitModule -->\n\nLiveUpdatesService->TransitModule\n\n\n\n\n\nOTPService\n\nOTPService\n\nTransitModule -->\n\nOTPService->TransitModule\n\n\n\n\n\nPointService\n\nPointService\n\nTransitModule -->\n\nPointService->TransitModule\n\n\n\n\n\nRouteService\n\nRouteService\n\nTransitModule -->\n\nRouteService->TransitModule\n\n\n\n\n\nRouteStopService\n\nRouteStopService\n\nTransitModule -->\n\nRouteStopService->TransitModule\n\n\n\n\n\nScheduleService\n\nScheduleService\n\nTransitModule -->\n\nScheduleService->TransitModule\n\n\n\n\n\nStopService\n\nStopService\n\nTransitModule -->\n\nStopService->TransitModule\n\n\n\n\n\nTripRepository\n\nTripRepository\n\nTransitModule -->\n\nTripRepository->TransitModule\n\n\n\n\n\nTripService\n\nTripService\n\nTransitModule -->\n\nTripService->TransitModule\n\n\n\n\n\nTripUpdatesListener\n\nTripUpdatesListener\n\nTransitModule -->\n\nTripUpdatesListener->TransitModule\n\n\n\n\n\nBookingRepository\n\nBookingRepository\n\nUserModule -->\n\nBookingRepository->UserModule\n\n\n\n\n\nBookingService\n\nBookingService\n\nUserModule -->\n\nBookingService->UserModule\n\n\n\n\n\nSavedService\n\nSavedService\n\nUserModule -->\n\nSavedService->UserModule\n\n\n\n\n\nUserRepository\n\nUserRepository\n\nUserModule -->\n\nUserRepository->UserModule\n\n\n\n\n\nUserService\n\nUserService\n\nUserModule -->\n\nUserService->UserModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        4 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    7 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    13 Entities\n                \n            \n        \n        \n            \n                \n                    \n                    24 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    32 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    17 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.1\n        \n            Description : \n        \n            License : UNLICENSED\n        \n            Author : \n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            DBconnectionProperties   (src/.../config.ts)\n                        \n                        \n                            fs   (src/.../main.ts)\n                        \n                        \n                            greekUtils   (src/.../db.update.controller.ts)\n                        \n                        \n                            GtfsRealtimeBindings   (src/.../main.ts)\n                        \n                        \n                            jwtConstants   (src/.../config.ts)\n                        \n                        \n                            polyline   (src/.../itinerary.dto.ts)\n                        \n                        \n                            protobuf   (src/.../main.ts)\n                        \n                        \n                            protobuf   (src/.../live.updates.controller.ts)\n                        \n                        \n                            request   (src/.../main.ts)\n                        \n                        \n                            requestSettings   (src/.../main.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/configurations/config.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        DBconnectionProperties\n                        \n                    \n                \n            \n                \n                    \n                        Type :     TypeOrmModuleOptions\n\n                    \n                \n                \n                    \n                        Default value : {\n    type: 'postgres',\n    host: process.env.DB_HOST,\n    port: +process.env.DB_PORT,\n    username: process.env.DB_USERNAME,\n    password: process.env.DB_PASSWORD,\n    database: process.env.DB_NAME,\n    entities: [],\n    synchronize: true,\n    autoLoadEntities: true,\n    schema: process.env.DB_SCHEMA\n}\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        jwtConstants\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n    secret: process.env.AUTH_KEY,\n}\n                    \n                \n\n\n        \n    \n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        fs\n                        \n                    \n                \n            \n                \n                    \n                        Default value : require('fs')\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        GtfsRealtimeBindings\n                        \n                    \n                \n            \n                \n                    \n                        Default value : require('gtfs-realtime-bindings')\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        protobuf\n                        \n                    \n                \n            \n                \n                    \n                        Default value : require('protobufjs')\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        request\n                        \n                    \n                \n            \n                \n                    \n                        Default value : require('request')\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        requestSettings\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n  method: 'GET',\n  url: 'https://cdn.mbta.com/realtime/TripUpdates.pb',\n  encoding: null\n}\n                    \n                \n\n\n        \n    \n\n    src/transit/controllers/db.update.controller.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        greekUtils\n                        \n                    \n                \n            \n                \n                    \n                        Default value : require('greek-utils')\n                    \n                \n\n\n        \n    \n\n    src/transit/transitDtos/itinerary.dto.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        polyline\n                        \n                    \n                \n            \n                \n                    \n                        Default value : require( 'google-polyline' )\n                    \n                \n\n\n        \n    \n\n    src/transit/controllers/live.updates.controller.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        protobuf\n                        \n                    \n                \n            \n                \n                    \n                        Default value : require('protobufjs')\n                    \n                \n\n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
